
SMART_WATCH_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a18  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae8  08005ad8  08005ad8  00015ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075c0  080075c0  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  080075c0  080075c0  000175c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075c8  080075c8  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075cc  080075cc  000175cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080075d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  200000d4  080076a4  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  080076a4  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c61f  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002286  00000000  00000000  0002c71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002e9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  0002f5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000150e7  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8bf  00000000  00000000  000451a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ed90  00000000  00000000  00054a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d37f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed4  00000000  00000000  000d3848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d4 	.word	0x200000d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005ac0 	.word	0x08005ac0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d8 	.word	0x200000d8
 8000104:	08005ac0 	.word	0x08005ac0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4647      	mov	r7, r8
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	4699      	mov	r9, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	469c      	mov	ip, r3
 8000458:	0413      	lsls	r3, r2, #16
 800045a:	0c1b      	lsrs	r3, r3, #16
 800045c:	001d      	movs	r5, r3
 800045e:	000e      	movs	r6, r1
 8000460:	4661      	mov	r1, ip
 8000462:	0400      	lsls	r0, r0, #16
 8000464:	0c14      	lsrs	r4, r2, #16
 8000466:	0c00      	lsrs	r0, r0, #16
 8000468:	4345      	muls	r5, r0
 800046a:	434b      	muls	r3, r1
 800046c:	4360      	muls	r0, r4
 800046e:	4361      	muls	r1, r4
 8000470:	18c0      	adds	r0, r0, r3
 8000472:	0c2c      	lsrs	r4, r5, #16
 8000474:	1820      	adds	r0, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	4283      	cmp	r3, r0
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4372      	muls	r2, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	4463      	add	r3, ip
 800048e:	042d      	lsls	r5, r5, #16
 8000490:	0c2d      	lsrs	r5, r5, #16
 8000492:	18c9      	adds	r1, r1, r3
 8000494:	0400      	lsls	r0, r0, #16
 8000496:	1940      	adds	r0, r0, r5
 8000498:	1889      	adds	r1, r1, r2
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8ba 	bl	800063c <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8b5 	bl	800063c <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	469b      	mov	fp, r3
 80004da:	d433      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004dc:	465a      	mov	r2, fp
 80004de:	4653      	mov	r3, sl
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83a      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e078      	b.n	80005e8 <__udivmoddi4+0x144>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e075      	b.n	80005ee <__udivmoddi4+0x14a>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e028      	b.n	800056e <__udivmoddi4+0xca>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	2320      	movs	r3, #32
 8000548:	1a9b      	subs	r3, r3, r2
 800054a:	4652      	mov	r2, sl
 800054c:	40da      	lsrs	r2, r3
 800054e:	4641      	mov	r1, r8
 8000550:	0013      	movs	r3, r2
 8000552:	464a      	mov	r2, r9
 8000554:	408a      	lsls	r2, r1
 8000556:	0017      	movs	r7, r2
 8000558:	4642      	mov	r2, r8
 800055a:	431f      	orrs	r7, r3
 800055c:	4653      	mov	r3, sl
 800055e:	4093      	lsls	r3, r2
 8000560:	001e      	movs	r6, r3
 8000562:	42af      	cmp	r7, r5
 8000564:	d9c4      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000566:	2200      	movs	r2, #0
 8000568:	2300      	movs	r3, #0
 800056a:	9200      	str	r2, [sp, #0]
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	4643      	mov	r3, r8
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0d9      	beq.n	8000528 <__udivmoddi4+0x84>
 8000574:	07fb      	lsls	r3, r7, #31
 8000576:	0872      	lsrs	r2, r6, #1
 8000578:	431a      	orrs	r2, r3
 800057a:	4646      	mov	r6, r8
 800057c:	087b      	lsrs	r3, r7, #1
 800057e:	e00e      	b.n	800059e <__udivmoddi4+0xfa>
 8000580:	42ab      	cmp	r3, r5
 8000582:	d101      	bne.n	8000588 <__udivmoddi4+0xe4>
 8000584:	42a2      	cmp	r2, r4
 8000586:	d80c      	bhi.n	80005a2 <__udivmoddi4+0xfe>
 8000588:	1aa4      	subs	r4, r4, r2
 800058a:	419d      	sbcs	r5, r3
 800058c:	2001      	movs	r0, #1
 800058e:	1924      	adds	r4, r4, r4
 8000590:	416d      	adcs	r5, r5
 8000592:	2100      	movs	r1, #0
 8000594:	3e01      	subs	r6, #1
 8000596:	1824      	adds	r4, r4, r0
 8000598:	414d      	adcs	r5, r1
 800059a:	2e00      	cmp	r6, #0
 800059c:	d006      	beq.n	80005ac <__udivmoddi4+0x108>
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d9ee      	bls.n	8000580 <__udivmoddi4+0xdc>
 80005a2:	3e01      	subs	r6, #1
 80005a4:	1924      	adds	r4, r4, r4
 80005a6:	416d      	adcs	r5, r5
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d1f8      	bne.n	800059e <__udivmoddi4+0xfa>
 80005ac:	9800      	ldr	r0, [sp, #0]
 80005ae:	9901      	ldr	r1, [sp, #4]
 80005b0:	465b      	mov	r3, fp
 80005b2:	1900      	adds	r0, r0, r4
 80005b4:	4169      	adcs	r1, r5
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	db24      	blt.n	8000604 <__udivmoddi4+0x160>
 80005ba:	002b      	movs	r3, r5
 80005bc:	465a      	mov	r2, fp
 80005be:	4644      	mov	r4, r8
 80005c0:	40d3      	lsrs	r3, r2
 80005c2:	002a      	movs	r2, r5
 80005c4:	40e2      	lsrs	r2, r4
 80005c6:	001c      	movs	r4, r3
 80005c8:	465b      	mov	r3, fp
 80005ca:	0015      	movs	r5, r2
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db2a      	blt.n	8000626 <__udivmoddi4+0x182>
 80005d0:	0026      	movs	r6, r4
 80005d2:	409e      	lsls	r6, r3
 80005d4:	0033      	movs	r3, r6
 80005d6:	0026      	movs	r6, r4
 80005d8:	4647      	mov	r7, r8
 80005da:	40be      	lsls	r6, r7
 80005dc:	0032      	movs	r2, r6
 80005de:	1a80      	subs	r0, r0, r2
 80005e0:	4199      	sbcs	r1, r3
 80005e2:	9000      	str	r0, [sp, #0]
 80005e4:	9101      	str	r1, [sp, #4]
 80005e6:	e79f      	b.n	8000528 <__udivmoddi4+0x84>
 80005e8:	42a3      	cmp	r3, r4
 80005ea:	d8bc      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80005ec:	e783      	b.n	80004f6 <__udivmoddi4+0x52>
 80005ee:	4642      	mov	r2, r8
 80005f0:	2320      	movs	r3, #32
 80005f2:	2100      	movs	r1, #0
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	2200      	movs	r2, #0
 80005f8:	9100      	str	r1, [sp, #0]
 80005fa:	9201      	str	r2, [sp, #4]
 80005fc:	2201      	movs	r2, #1
 80005fe:	40da      	lsrs	r2, r3
 8000600:	9201      	str	r2, [sp, #4]
 8000602:	e786      	b.n	8000512 <__udivmoddi4+0x6e>
 8000604:	4642      	mov	r2, r8
 8000606:	2320      	movs	r3, #32
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	002a      	movs	r2, r5
 800060c:	4646      	mov	r6, r8
 800060e:	409a      	lsls	r2, r3
 8000610:	0023      	movs	r3, r4
 8000612:	40f3      	lsrs	r3, r6
 8000614:	4644      	mov	r4, r8
 8000616:	4313      	orrs	r3, r2
 8000618:	002a      	movs	r2, r5
 800061a:	40e2      	lsrs	r2, r4
 800061c:	001c      	movs	r4, r3
 800061e:	465b      	mov	r3, fp
 8000620:	0015      	movs	r5, r2
 8000622:	2b00      	cmp	r3, #0
 8000624:	dad4      	bge.n	80005d0 <__udivmoddi4+0x12c>
 8000626:	4642      	mov	r2, r8
 8000628:	002f      	movs	r7, r5
 800062a:	2320      	movs	r3, #32
 800062c:	0026      	movs	r6, r4
 800062e:	4097      	lsls	r7, r2
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	40de      	lsrs	r6, r3
 8000634:	003b      	movs	r3, r7
 8000636:	4333      	orrs	r3, r6
 8000638:	e7cd      	b.n	80005d6 <__udivmoddi4+0x132>
 800063a:	46c0      	nop			; (mov r8, r8)

0800063c <__clzdi2>:
 800063c:	b510      	push	{r4, lr}
 800063e:	2900      	cmp	r1, #0
 8000640:	d103      	bne.n	800064a <__clzdi2+0xe>
 8000642:	f000 f807 	bl	8000654 <__clzsi2>
 8000646:	3020      	adds	r0, #32
 8000648:	e002      	b.n	8000650 <__clzdi2+0x14>
 800064a:	0008      	movs	r0, r1
 800064c:	f000 f802 	bl	8000654 <__clzsi2>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	46c0      	nop			; (mov r8, r8)

08000654 <__clzsi2>:
 8000654:	211c      	movs	r1, #28
 8000656:	2301      	movs	r3, #1
 8000658:	041b      	lsls	r3, r3, #16
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0xe>
 800065e:	0c00      	lsrs	r0, r0, #16
 8000660:	3910      	subs	r1, #16
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	4298      	cmp	r0, r3
 8000666:	d301      	bcc.n	800066c <__clzsi2+0x18>
 8000668:	0a00      	lsrs	r0, r0, #8
 800066a:	3908      	subs	r1, #8
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	4298      	cmp	r0, r3
 8000670:	d301      	bcc.n	8000676 <__clzsi2+0x22>
 8000672:	0900      	lsrs	r0, r0, #4
 8000674:	3904      	subs	r1, #4
 8000676:	a202      	add	r2, pc, #8	; (adr r2, 8000680 <__clzsi2+0x2c>)
 8000678:	5c10      	ldrb	r0, [r2, r0]
 800067a:	1840      	adds	r0, r0, r1
 800067c:	4770      	bx	lr
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	02020304 	.word	0x02020304
 8000684:	01010101 	.word	0x01010101
	...

08000690 <set_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_time(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	0018      	movs	r0, r3
 800069a:	2314      	movs	r3, #20
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f004 fd9c 	bl	80051dc <memset>
	RTC_DateTypeDef sDate = {0};
 80006a4:	003b      	movs	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]

	sTime.Hours = 0x10;
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2210      	movs	r2, #16
 80006ae:	701a      	strb	r2, [r3, #0]
	  sTime.Minutes = 0x35;
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2235      	movs	r2, #53	; 0x35
 80006b4:	705a      	strb	r2, [r3, #1]
	  sTime.Seconds = 0x40;
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2240      	movs	r2, #64	; 0x40
 80006ba:	709a      	strb	r2, [r3, #2]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006c8:	1d39      	adds	r1, r7, #4
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <set_time+0x8c>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	0018      	movs	r0, r3
 80006d0:	f004 f8b2 	bl	8004838 <HAL_RTC_SetTime>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <set_time+0x4c>
	  {
	    Error_Handler();
 80006d8:	f000 ffbe 	bl	8001658 <Error_Handler>
	  }

	  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80006dc:	003b      	movs	r3, r7
 80006de:	2202      	movs	r2, #2
 80006e0:	701a      	strb	r2, [r3, #0]
	    sDate.Month = RTC_MONTH_MAY;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2205      	movs	r2, #5
 80006e6:	705a      	strb	r2, [r3, #1]
	    sDate.Date = 0x16;
 80006e8:	003b      	movs	r3, r7
 80006ea:	2216      	movs	r2, #22
 80006ec:	709a      	strb	r2, [r3, #2]
	    sDate.Year = 0x0;
 80006ee:	003b      	movs	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	70da      	strb	r2, [r3, #3]

	    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006f4:	0039      	movs	r1, r7
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <set_time+0x8c>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	0018      	movs	r0, r3
 80006fc:	f004 f9a4 	bl	8004a48 <HAL_RTC_SetDate>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <set_time+0x78>
	    {
	      Error_Handler();
 8000704:	f000 ffa8 	bl	8001658 <Error_Handler>
	    }
	    HAL_RTCEx_BKUPWrite(&hrtc , RTC_BKP_DR1, 0x32F2);
 8000708:	4a05      	ldr	r2, [pc, #20]	; (8000720 <set_time+0x90>)
 800070a:	4b04      	ldr	r3, [pc, #16]	; (800071c <set_time+0x8c>)
 800070c:	2101      	movs	r1, #1
 800070e:	0018      	movs	r0, r3
 8000710:	f004 fd04 	bl	800511c <HAL_RTCEx_BKUPWrite>

}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b006      	add	sp, #24
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200001a0 	.word	0x200001a0
 8000720:	000032f2 	.word	0x000032f2

08000724 <set_alarm>:


void set_alarm(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
	  RTC_AlarmTypeDef sAlarm = {0};
 800072a:	003b      	movs	r3, r7
 800072c:	0018      	movs	r0, r3
 800072e:	2328      	movs	r3, #40	; 0x28
 8000730:	001a      	movs	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	f004 fd52 	bl	80051dc <memset>
	sAlarm.AlarmTime.Hours = 0x10;
 8000738:	003b      	movs	r3, r7
 800073a:	2210      	movs	r2, #16
 800073c:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = 0x36;
 800073e:	003b      	movs	r3, r7
 8000740:	2236      	movs	r2, #54	; 0x36
 8000742:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = 0x00;
 8000744:	003b      	movs	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 800074a:	003b      	movs	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000750:	003b      	movs	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000756:	003b      	movs	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800075c:	003b      	movs	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000762:	003b      	movs	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000768:	003b      	movs	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x18;
 800076e:	003b      	movs	r3, r7
 8000770:	2220      	movs	r2, #32
 8000772:	2118      	movs	r1, #24
 8000774:	5499      	strb	r1, [r3, r2]
	  sAlarm.Alarm = RTC_ALARM_A;
 8000776:	003b      	movs	r3, r7
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	0052      	lsls	r2, r2, #1
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800077e:	0039      	movs	r1, r7
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <set_alarm+0x78>)
 8000782:	2201      	movs	r2, #1
 8000784:	0018      	movs	r0, r3
 8000786:	f004 fa43 	bl	8004c10 <HAL_RTC_SetAlarm_IT>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <set_alarm+0x6e>
	  {
	    Error_Handler();
 800078e:	f000 ff63 	bl	8001658 <Error_Handler>
	  }
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b00a      	add	sp, #40	; 0x28
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	200001a0 	.word	0x200001a0

080007a0 <get_time>:

void get_time(void)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af02      	add	r7, sp, #8
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80007a6:	0039      	movs	r1, r7
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <get_time+0x7c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	0018      	movs	r0, r3
 80007ae:	f004 f8ed 	bl	800498c <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80007b2:	2514      	movs	r5, #20
 80007b4:	1979      	adds	r1, r7, r5
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <get_time+0x7c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	0018      	movs	r0, r3
 80007bc:	f004 f9d8 	bl	8004b70 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80007c0:	003b      	movs	r3, r7
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	001a      	movs	r2, r3
 80007c6:	003b      	movs	r3, r7
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	001c      	movs	r4, r3
 80007cc:	003b      	movs	r3, r7
 80007ce:	789b      	ldrb	r3, [r3, #2]
 80007d0:	4913      	ldr	r1, [pc, #76]	; (8000820 <get_time+0x80>)
 80007d2:	4814      	ldr	r0, [pc, #80]	; (8000824 <get_time+0x84>)
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	0023      	movs	r3, r4
 80007d8:	f004 fd08 	bl	80051ec <siprintf>

  /* Display date Format: mm-dd-yy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);  // I like the date first
 80007dc:	197b      	adds	r3, r7, r5
 80007de:	789b      	ldrb	r3, [r3, #2]
 80007e0:	001a      	movs	r2, r3
 80007e2:	197b      	adds	r3, r7, r5
 80007e4:	785b      	ldrb	r3, [r3, #1]
 80007e6:	001c      	movs	r4, r3
 80007e8:	197b      	adds	r3, r7, r5
 80007ea:	78db      	ldrb	r3, [r3, #3]
 80007ec:	21fa      	movs	r1, #250	; 0xfa
 80007ee:	00c9      	lsls	r1, r1, #3
 80007f0:	468c      	mov	ip, r1
 80007f2:	4463      	add	r3, ip
 80007f4:	490c      	ldr	r1, [pc, #48]	; (8000828 <get_time+0x88>)
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <get_time+0x8c>)
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	0023      	movs	r3, r4
 80007fc:	f004 fcf6 	bl	80051ec <siprintf>
  sprintf((char*)day,"%02d",gDate.WeekDay);
 8000800:	197b      	adds	r3, r7, r5
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	001a      	movs	r2, r3
 8000806:	490a      	ldr	r1, [pc, #40]	; (8000830 <get_time+0x90>)
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <get_time+0x94>)
 800080a:	0018      	movs	r0, r3
 800080c:	f004 fcee 	bl	80051ec <siprintf>
  day_function();
 8000810:	f000 f852 	bl	80008b8 <day_function>

}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b006      	add	sp, #24
 800081a:	bdb0      	pop	{r4, r5, r7, pc}
 800081c:	200001a0 	.word	0x200001a0
 8000820:	08005ad8 	.word	0x08005ad8
 8000824:	200001c4 	.word	0x200001c4
 8000828:	08005ae8 	.word	0x08005ae8
 800082c:	200001d0 	.word	0x200001d0
 8000830:	08005af8 	.word	0x08005af8
 8000834:	200001dc 	.word	0x200001dc

08000838 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	alarm=1;
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <HAL_RTC_AlarmAEventCallback+0x18>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	200001e6 	.word	0x200001e6

08000854 <to_do_on_alarm>:
void to_do_on_alarm(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1); //LED ON
 8000858:	23a0      	movs	r3, #160	; 0xa0
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	2201      	movs	r2, #1
 800085e:	2120      	movs	r1, #32
 8000860:	0018      	movs	r0, r3
 8000862:	f002 fa6c 	bl	8002d3e <HAL_GPIO_WritePin>
    SSD1306_Clear ();
 8000866:	f001 f9db 	bl	8001c20 <SSD1306_Clear>
    SSD1306_GotoXY (0, 40);
 800086a:	2128      	movs	r1, #40	; 0x28
 800086c:	2000      	movs	r0, #0
 800086e:	f001 f917 	bl	8001aa0 <SSD1306_GotoXY>
	SSD1306_Puts ("ALARM ON", &Font_11x18, 1);
 8000872:	490e      	ldr	r1, [pc, #56]	; (80008ac <to_do_on_alarm+0x58>)
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <to_do_on_alarm+0x5c>)
 8000876:	2201      	movs	r2, #1
 8000878:	0018      	movs	r0, r3
 800087a:	f001 f9ab 	bl	8001bd4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800087e:	f001 f853 	bl	8001928 <SSD1306_UpdateScreen>
	HAL_Delay(5000);
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <to_do_on_alarm+0x60>)
 8000884:	0018      	movs	r0, r3
 8000886:	f001 fc2d 	bl	80020e4 <HAL_Delay>
	SSD1306_Clear ();
 800088a:	f001 f9c9 	bl	8001c20 <SSD1306_Clear>
	HAL_Delay(1000);
 800088e:	23fa      	movs	r3, #250	; 0xfa
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	0018      	movs	r0, r3
 8000894:	f001 fc26 	bl	80020e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000898:	23a0      	movs	r3, #160	; 0xa0
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	2200      	movs	r2, #0
 800089e:	2120      	movs	r1, #32
 80008a0:	0018      	movs	r0, r3
 80008a2:	f002 fa4c 	bl	8002d3e <HAL_GPIO_WritePin>
}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000008 	.word	0x20000008
 80008b0:	08005b00 	.word	0x08005b00
 80008b4:	00001388 	.word	0x00001388

080008b8 <day_function>:


uint8_t day_function(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	if(day[0]==48&&day[1]==49)
 80008bc:	4b33      	ldr	r3, [pc, #204]	; (800098c <day_function+0xd4>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b30      	cmp	r3, #48	; 0x30
 80008c2:	d109      	bne.n	80008d8 <day_function+0x20>
 80008c4:	4b31      	ldr	r3, [pc, #196]	; (800098c <day_function+0xd4>)
 80008c6:	785b      	ldrb	r3, [r3, #1]
 80008c8:	2b31      	cmp	r3, #49	; 0x31
 80008ca:	d105      	bne.n	80008d8 <day_function+0x20>
	  {
		  memcpy(day,today_1,sizeof(day));
 80008cc:	4b2f      	ldr	r3, [pc, #188]	; (800098c <day_function+0xd4>)
 80008ce:	4a30      	ldr	r2, [pc, #192]	; (8000990 <day_function+0xd8>)
 80008d0:	ca03      	ldmia	r2!, {r0, r1}
 80008d2:	c303      	stmia	r3!, {r0, r1}
 80008d4:	8812      	ldrh	r2, [r2, #0]
 80008d6:	801a      	strh	r2, [r3, #0]

	  }
	  if(day[0]==48&&day[1]==50)
 80008d8:	4b2c      	ldr	r3, [pc, #176]	; (800098c <day_function+0xd4>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b30      	cmp	r3, #48	; 0x30
 80008de:	d109      	bne.n	80008f4 <day_function+0x3c>
 80008e0:	4b2a      	ldr	r3, [pc, #168]	; (800098c <day_function+0xd4>)
 80008e2:	785b      	ldrb	r3, [r3, #1]
 80008e4:	2b32      	cmp	r3, #50	; 0x32
 80008e6:	d105      	bne.n	80008f4 <day_function+0x3c>
	    {
	  	  memcpy(day,today_2,sizeof(day));
 80008e8:	4b28      	ldr	r3, [pc, #160]	; (800098c <day_function+0xd4>)
 80008ea:	4a2a      	ldr	r2, [pc, #168]	; (8000994 <day_function+0xdc>)
 80008ec:	ca03      	ldmia	r2!, {r0, r1}
 80008ee:	c303      	stmia	r3!, {r0, r1}
 80008f0:	8812      	ldrh	r2, [r2, #0]
 80008f2:	801a      	strh	r2, [r3, #0]

	    }
	  if(day[0]==48&&day[1]==51)
 80008f4:	4b25      	ldr	r3, [pc, #148]	; (800098c <day_function+0xd4>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b30      	cmp	r3, #48	; 0x30
 80008fa:	d109      	bne.n	8000910 <day_function+0x58>
 80008fc:	4b23      	ldr	r3, [pc, #140]	; (800098c <day_function+0xd4>)
 80008fe:	785b      	ldrb	r3, [r3, #1]
 8000900:	2b33      	cmp	r3, #51	; 0x33
 8000902:	d105      	bne.n	8000910 <day_function+0x58>
	    {
	  	  memcpy(day,today_3,sizeof(day));
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <day_function+0xd4>)
 8000906:	4a24      	ldr	r2, [pc, #144]	; (8000998 <day_function+0xe0>)
 8000908:	ca03      	ldmia	r2!, {r0, r1}
 800090a:	c303      	stmia	r3!, {r0, r1}
 800090c:	8812      	ldrh	r2, [r2, #0]
 800090e:	801a      	strh	r2, [r3, #0]

	    }
	  if(day[0]==48&&day[1]==52)
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <day_function+0xd4>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b30      	cmp	r3, #48	; 0x30
 8000916:	d109      	bne.n	800092c <day_function+0x74>
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <day_function+0xd4>)
 800091a:	785b      	ldrb	r3, [r3, #1]
 800091c:	2b34      	cmp	r3, #52	; 0x34
 800091e:	d105      	bne.n	800092c <day_function+0x74>
	    {
	  	  memcpy(day,today_4,sizeof(day));
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <day_function+0xd4>)
 8000922:	4a1e      	ldr	r2, [pc, #120]	; (800099c <day_function+0xe4>)
 8000924:	ca03      	ldmia	r2!, {r0, r1}
 8000926:	c303      	stmia	r3!, {r0, r1}
 8000928:	8812      	ldrh	r2, [r2, #0]
 800092a:	801a      	strh	r2, [r3, #0]

	    }
	  if(day[0]==48&&day[1]==53)
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <day_function+0xd4>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b30      	cmp	r3, #48	; 0x30
 8000932:	d109      	bne.n	8000948 <day_function+0x90>
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <day_function+0xd4>)
 8000936:	785b      	ldrb	r3, [r3, #1]
 8000938:	2b35      	cmp	r3, #53	; 0x35
 800093a:	d105      	bne.n	8000948 <day_function+0x90>
	    {
	  	  memcpy(day,today_5,sizeof(day));
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <day_function+0xd4>)
 800093e:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <day_function+0xe8>)
 8000940:	ca03      	ldmia	r2!, {r0, r1}
 8000942:	c303      	stmia	r3!, {r0, r1}
 8000944:	8812      	ldrh	r2, [r2, #0]
 8000946:	801a      	strh	r2, [r3, #0]

	    }
	  if(day[0]==48&&day[1]==54)
 8000948:	4b10      	ldr	r3, [pc, #64]	; (800098c <day_function+0xd4>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b30      	cmp	r3, #48	; 0x30
 800094e:	d109      	bne.n	8000964 <day_function+0xac>
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <day_function+0xd4>)
 8000952:	785b      	ldrb	r3, [r3, #1]
 8000954:	2b36      	cmp	r3, #54	; 0x36
 8000956:	d105      	bne.n	8000964 <day_function+0xac>
	    {
	  	  memcpy(day,today_6,sizeof(day));
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <day_function+0xd4>)
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <day_function+0xec>)
 800095c:	ca03      	ldmia	r2!, {r0, r1}
 800095e:	c303      	stmia	r3!, {r0, r1}
 8000960:	8812      	ldrh	r2, [r2, #0]
 8000962:	801a      	strh	r2, [r3, #0]

	    }
	  if(day[0]==48&&day[1]==55)
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <day_function+0xd4>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b30      	cmp	r3, #48	; 0x30
 800096a:	d109      	bne.n	8000980 <day_function+0xc8>
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <day_function+0xd4>)
 800096e:	785b      	ldrb	r3, [r3, #1]
 8000970:	2b37      	cmp	r3, #55	; 0x37
 8000972:	d105      	bne.n	8000980 <day_function+0xc8>
	    {
	  	  memcpy(day,today_7,sizeof(day));
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <day_function+0xd4>)
 8000976:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <day_function+0xf0>)
 8000978:	ca03      	ldmia	r2!, {r0, r1}
 800097a:	c303      	stmia	r3!, {r0, r1}
 800097c:	8812      	ldrh	r2, [r2, #0]
 800097e:	801a      	strh	r2, [r3, #0]

	    }
	  return day;
 8000980:	4b02      	ldr	r3, [pc, #8]	; (800098c <day_function+0xd4>)
 8000982:	b2db      	uxtb	r3, r3
}
 8000984:	0018      	movs	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	200001dc 	.word	0x200001dc
 8000990:	20000010 	.word	0x20000010
 8000994:	2000001c 	.word	0x2000001c
 8000998:	20000028 	.word	0x20000028
 800099c:	20000034 	.word	0x20000034
 80009a0:	20000040 	.word	0x20000040
 80009a4:	2000004c 	.word	0x2000004c
 80009a8:	20000058 	.word	0x20000058

080009ac <home_screen>:

void home_screen(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af02      	add	r7, sp, #8
	/* USER CODE END WHILE */

					  get_time();
 80009b2:	f7ff fef5 	bl	80007a0 <get_time>
					  SSD1306_GotoXY (15, 25);
 80009b6:	2119      	movs	r1, #25
 80009b8:	200f      	movs	r0, #15
 80009ba:	f001 f871 	bl	8001aa0 <SSD1306_GotoXY>
					  SSD1306_Puts (time, &Font_11x18, 1);
 80009be:	4952      	ldr	r1, [pc, #328]	; (8000b08 <home_screen+0x15c>)
 80009c0:	4b52      	ldr	r3, [pc, #328]	; (8000b0c <home_screen+0x160>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 f905 	bl	8001bd4 <SSD1306_Puts>

					  SSD1306_GotoXY (0, 0);
 80009ca:	2100      	movs	r1, #0
 80009cc:	2000      	movs	r0, #0
 80009ce:	f001 f867 	bl	8001aa0 <SSD1306_GotoXY>
					  SSD1306_Puts (date, &Font_7x10, 1);
 80009d2:	494f      	ldr	r1, [pc, #316]	; (8000b10 <home_screen+0x164>)
 80009d4:	4b4f      	ldr	r3, [pc, #316]	; (8000b14 <home_screen+0x168>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	0018      	movs	r0, r3
 80009da:	f001 f8fb 	bl	8001bd4 <SSD1306_Puts>

					  SSD1306_GotoXY (10, 10);
 80009de:	210a      	movs	r1, #10
 80009e0:	200a      	movs	r0, #10
 80009e2:	f001 f85d 	bl	8001aa0 <SSD1306_GotoXY>
					  SSD1306_Puts (day, &Font_7x10, 1);
 80009e6:	494a      	ldr	r1, [pc, #296]	; (8000b10 <home_screen+0x164>)
 80009e8:	4b4b      	ldr	r3, [pc, #300]	; (8000b18 <home_screen+0x16c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	0018      	movs	r0, r3
 80009ee:	f001 f8f1 	bl	8001bd4 <SSD1306_Puts>
					  SSD1306_UpdateScreen(); //display
 80009f2:	f000 ff99 	bl	8001928 <SSD1306_UpdateScreen>
					  SSD1306_DrawBitmap(100, 0, bat, 20, 12, 1);
 80009f6:	4a49      	ldr	r2, [pc, #292]	; (8000b1c <home_screen+0x170>)
 80009f8:	2301      	movs	r3, #1
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	230c      	movs	r3, #12
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2314      	movs	r3, #20
 8000a02:	2100      	movs	r1, #0
 8000a04:	2064      	movs	r0, #100	; 0x64
 8000a06:	f000 fe2c 	bl	8001662 <SSD1306_DrawBitmap>
					  HAL_Delay (200);
 8000a0a:	20c8      	movs	r0, #200	; 0xc8
 8000a0c:	f001 fb6a 	bl	80020e4 <HAL_Delay>



					 HAL_ADC_Start(&hadc);
 8000a10:	4b43      	ldr	r3, [pc, #268]	; (8000b20 <home_screen+0x174>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f001 fcfe 	bl	8002414 <HAL_ADC_Start>
					if(  HAL_ADC_PollForConversion(&hadc, 100)==HAL_OK)
 8000a18:	4b41      	ldr	r3, [pc, #260]	; (8000b20 <home_screen+0x174>)
 8000a1a:	2164      	movs	r1, #100	; 0x64
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f001 fd4d 	bl	80024bc <HAL_ADC_PollForConversion>
 8000a22:	1e03      	subs	r3, r0, #0
 8000a24:	d164      	bne.n	8000af0 <home_screen+0x144>
					  {
						  adc_res=HAL_ADC_GetValue(&hadc);
 8000a26:	4b3e      	ldr	r3, [pc, #248]	; (8000b20 <home_screen+0x174>)
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f001 fde3 	bl	80025f4 <HAL_ADC_GetValue>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b3c      	ldr	r3, [pc, #240]	; (8000b24 <home_screen+0x178>)
 8000a34:	701a      	strb	r2, [r3, #0]
						  adc_val=(adc_res*330)/1023;
 8000a36:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <home_screen+0x178>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	189b      	adds	r3, r3, r2
 8000a42:	015a      	lsls	r2, r3, #5
 8000a44:	189b      	adds	r3, r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4937      	ldr	r1, [pc, #220]	; (8000b28 <home_screen+0x17c>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f7ff fbf0 	bl	8000230 <__divsi3>
 8000a50:	0003      	movs	r3, r0
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b35      	ldr	r3, [pc, #212]	; (8000b2c <home_screen+0x180>)
 8000a56:	701a      	strb	r2, [r3, #0]
						  if(adc_res<=60&&adc_res>=20)
 8000a58:	4b32      	ldr	r3, [pc, #200]	; (8000b24 <home_screen+0x178>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b3c      	cmp	r3, #60	; 0x3c
 8000a5e:	d80f      	bhi.n	8000a80 <home_screen+0xd4>
 8000a60:	4b30      	ldr	r3, [pc, #192]	; (8000b24 <home_screen+0x178>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b13      	cmp	r3, #19
 8000a66:	d90b      	bls.n	8000a80 <home_screen+0xd4>
						  {
							  SSD1306_GotoXY (102,2);
 8000a68:	2102      	movs	r1, #2
 8000a6a:	2066      	movs	r0, #102	; 0x66
 8000a6c:	f001 f818 	bl	8001aa0 <SSD1306_GotoXY>
							  SSD1306_Puts ("25%", &Font_7x10, 0);
 8000a70:	4927      	ldr	r1, [pc, #156]	; (8000b10 <home_screen+0x164>)
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <home_screen+0x184>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	0018      	movs	r0, r3
 8000a78:	f001 f8ac 	bl	8001bd4 <SSD1306_Puts>
							  SSD1306_UpdateScreen();
 8000a7c:	f000 ff54 	bl	8001928 <SSD1306_UpdateScreen>
						  }
						  if(adc_res<=100&&adc_res>=60)
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <home_screen+0x178>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b64      	cmp	r3, #100	; 0x64
 8000a86:	d80f      	bhi.n	8000aa8 <home_screen+0xfc>
 8000a88:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <home_screen+0x178>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b3b      	cmp	r3, #59	; 0x3b
 8000a8e:	d90b      	bls.n	8000aa8 <home_screen+0xfc>
						  {
							  SSD1306_GotoXY (102,2);
 8000a90:	2102      	movs	r1, #2
 8000a92:	2066      	movs	r0, #102	; 0x66
 8000a94:	f001 f804 	bl	8001aa0 <SSD1306_GotoXY>
							  SSD1306_Puts ("50%", &Font_7x10, 0);
 8000a98:	491d      	ldr	r1, [pc, #116]	; (8000b10 <home_screen+0x164>)
 8000a9a:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <home_screen+0x188>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f001 f898 	bl	8001bd4 <SSD1306_Puts>
							  SSD1306_UpdateScreen();
 8000aa4:	f000 ff40 	bl	8001928 <SSD1306_UpdateScreen>
						  }
						  if(adc_res<=200&&adc_res>=100)
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <home_screen+0x178>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2bc8      	cmp	r3, #200	; 0xc8
 8000aae:	d80f      	bhi.n	8000ad0 <home_screen+0x124>
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <home_screen+0x178>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b63      	cmp	r3, #99	; 0x63
 8000ab6:	d90b      	bls.n	8000ad0 <home_screen+0x124>
						  {
							  SSD1306_GotoXY (102,2);
 8000ab8:	2102      	movs	r1, #2
 8000aba:	2066      	movs	r0, #102	; 0x66
 8000abc:	f000 fff0 	bl	8001aa0 <SSD1306_GotoXY>
							  SSD1306_Puts ("75%", &Font_7x10, 0);
 8000ac0:	4913      	ldr	r1, [pc, #76]	; (8000b10 <home_screen+0x164>)
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <home_screen+0x18c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 f884 	bl	8001bd4 <SSD1306_Puts>
							  SSD1306_UpdateScreen();
 8000acc:	f000 ff2c 	bl	8001928 <SSD1306_UpdateScreen>
						  }
						 if(adc_res>=200)
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <home_screen+0x178>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2bc7      	cmp	r3, #199	; 0xc7
 8000ad6:	d90b      	bls.n	8000af0 <home_screen+0x144>
						  {
							  SSD1306_GotoXY (102,2);
 8000ad8:	2102      	movs	r1, #2
 8000ada:	2066      	movs	r0, #102	; 0x66
 8000adc:	f000 ffe0 	bl	8001aa0 <SSD1306_GotoXY>
							  SSD1306_Puts ("100%", &Font_7x10, 0);
 8000ae0:	490b      	ldr	r1, [pc, #44]	; (8000b10 <home_screen+0x164>)
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <home_screen+0x190>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 f874 	bl	8001bd4 <SSD1306_Puts>
							  SSD1306_UpdateScreen();
 8000aec:	f000 ff1c 	bl	8001928 <SSD1306_UpdateScreen>
						  }
					  }

					  if(alarm)
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <home_screen+0x194>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d004      	beq.n	8000b02 <home_screen+0x156>
						{
						  to_do_on_alarm();
 8000af8:	f7ff feac 	bl	8000854 <to_do_on_alarm>
						  alarm=0;
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <home_screen+0x194>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]

						}

					 /* USER CODE BEGIN 3 */

}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	200001c4 	.word	0x200001c4
 8000b10:	20000000 	.word	0x20000000
 8000b14:	200001d0 	.word	0x200001d0
 8000b18:	200001dc 	.word	0x200001dc
 8000b1c:	08007134 	.word	0x08007134
 8000b20:	200000f0 	.word	0x200000f0
 8000b24:	200001e7 	.word	0x200001e7
 8000b28:	000003ff 	.word	0x000003ff
 8000b2c:	200001e8 	.word	0x200001e8
 8000b30:	08005b0c 	.word	0x08005b0c
 8000b34:	08005b10 	.word	0x08005b10
 8000b38:	08005b14 	.word	0x08005b14
 8000b3c:	08005b18 	.word	0x08005b18
 8000b40:	200001e6 	.word	0x200001e6

08000b44 <up_button>:


void up_button(void)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b095      	sub	sp, #84	; 0x54
 8000b48:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET)
 8000b4a:	4bb4      	ldr	r3, [pc, #720]	; (8000e1c <up_button+0x2d8>)
 8000b4c:	2108      	movs	r1, #8
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f002 f8d8 	bl	8002d04 <HAL_GPIO_ReadPin>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d000      	beq.n	8000b5a <up_button+0x16>
 8000b58:	e241      	b.n	8000fde <up_button+0x49a>
						{
						SSD1306_Clear ();
 8000b5a:	f001 f861 	bl	8001c20 <SSD1306_Clear>
						HAL_Delay (10);
 8000b5e:	200a      	movs	r0, #10
 8000b60:	f001 fac0 	bl	80020e4 <HAL_Delay>
						int y=1;
 8000b64:	2301      	movs	r3, #1
 8000b66:	64fb      	str	r3, [r7, #76]	; 0x4c
						while(y)
 8000b68:	e235      	b.n	8000fd6 <up_button+0x492>
						{
									HAL_ADC_Start(&hadc);
 8000b6a:	4bad      	ldr	r3, [pc, #692]	; (8000e20 <up_button+0x2dc>)
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f001 fc51 	bl	8002414 <HAL_ADC_Start>
									HAL_ADC_PollForConversion(&hadc, 100);
 8000b72:	4bab      	ldr	r3, [pc, #684]	; (8000e20 <up_button+0x2dc>)
 8000b74:	2164      	movs	r1, #100	; 0x64
 8000b76:	0018      	movs	r0, r3
 8000b78:	f001 fca0 	bl	80024bc <HAL_ADC_PollForConversion>
									sensor1_data = HAL_ADC_GetValue(&hadc);
 8000b7c:	4ba8      	ldr	r3, [pc, #672]	; (8000e20 <up_button+0x2dc>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fd38 	bl	80025f4 <HAL_ADC_GetValue>
 8000b84:	0003      	movs	r3, r0
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4ba6      	ldr	r3, [pc, #664]	; (8000e24 <up_button+0x2e0>)
 8000b8a:	801a      	strh	r2, [r3, #0]
									sensor1_data=(((sensor1_data*330)/1023)-65580);
 8000b8c:	4ba5      	ldr	r3, [pc, #660]	; (8000e24 <up_button+0x2e0>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	001a      	movs	r2, r3
 8000b92:	0013      	movs	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	189b      	adds	r3, r3, r2
 8000b98:	015a      	lsls	r2, r3, #5
 8000b9a:	189b      	adds	r3, r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	49a2      	ldr	r1, [pc, #648]	; (8000e28 <up_button+0x2e4>)
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff fb45 	bl	8000230 <__divsi3>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	3b2c      	subs	r3, #44	; 0x2c
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	4b9d      	ldr	r3, [pc, #628]	; (8000e24 <up_button+0x2e0>)
 8000bb0:	801a      	strh	r2, [r3, #0]
									 char buffer[16];
								//	 Display pressure value
								//	SSD1306_Clear();
									//HAL_Delay(100);
									SSD1306_GotoXY(0, 0);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 ff73 	bl	8001aa0 <SSD1306_GotoXY>
									SSD1306_Puts("                            ", &Font_7x10, 1);
 8000bba:	499c      	ldr	r1, [pc, #624]	; (8000e2c <up_button+0x2e8>)
 8000bbc:	4b9c      	ldr	r3, [pc, #624]	; (8000e30 <up_button+0x2ec>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f001 f807 	bl	8001bd4 <SSD1306_Puts>
									SSD1306_GotoXY(0, 2);
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f000 ff69 	bl	8001aa0 <SSD1306_GotoXY>
									SSD1306_Puts(" TEMPERATURE            ", &Font_7x10, 1);
 8000bce:	4997      	ldr	r1, [pc, #604]	; (8000e2c <up_button+0x2e8>)
 8000bd0:	4b98      	ldr	r3, [pc, #608]	; (8000e34 <up_button+0x2f0>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f000 fffd 	bl	8001bd4 <SSD1306_Puts>
									SSD1306_GotoXY(10, 30);
 8000bda:	211e      	movs	r1, #30
 8000bdc:	200a      	movs	r0, #10
 8000bde:	f000 ff5f 	bl	8001aa0 <SSD1306_GotoXY>
									sprintf(buffer, "Temp now: %d'C", sensor1_data);
 8000be2:	4b90      	ldr	r3, [pc, #576]	; (8000e24 <up_button+0x2e0>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	001a      	movs	r2, r3
 8000be8:	4993      	ldr	r1, [pc, #588]	; (8000e38 <up_button+0x2f4>)
 8000bea:	2430      	movs	r4, #48	; 0x30
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f004 fafc 	bl	80051ec <siprintf>
									SSD1306_Puts(buffer, &Font_7x10, 1);
 8000bf4:	498d      	ldr	r1, [pc, #564]	; (8000e2c <up_button+0x2e8>)
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 ffea 	bl	8001bd4 <SSD1306_Puts>
									SSD1306_UpdateScreen();
 8000c00:	f000 fe92 	bl	8001928 <SSD1306_UpdateScreen>
									HAL_Delay(2000);
 8000c04:	23fa      	movs	r3, #250	; 0xfa
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f001 fa6b 	bl	80020e4 <HAL_Delay>
									HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1); //LED ON
 8000c0e:	23a0      	movs	r3, #160	; 0xa0
 8000c10:	05db      	lsls	r3, r3, #23
 8000c12:	2201      	movs	r2, #1
 8000c14:	2120      	movs	r1, #32
 8000c16:	0018      	movs	r0, r3
 8000c18:	f002 f891 	bl	8002d3e <HAL_GPIO_WritePin>
									HAL_Delay(80);
 8000c1c:	2050      	movs	r0, #80	; 0x50
 8000c1e:	f001 fa61 	bl	80020e4 <HAL_Delay>
									HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000c22:	23a0      	movs	r3, #160	; 0xa0
 8000c24:	05db      	lsls	r3, r3, #23
 8000c26:	2200      	movs	r2, #0
 8000c28:	2120      	movs	r1, #32
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f002 f887 	bl	8002d3e <HAL_GPIO_WritePin>
															if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET)
 8000c30:	4b7a      	ldr	r3, [pc, #488]	; (8000e1c <up_button+0x2d8>)
 8000c32:	2108      	movs	r1, #8
 8000c34:	0018      	movs	r0, r3
 8000c36:	f002 f865 	bl	8002d04 <HAL_GPIO_ReadPin>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d000      	beq.n	8000c40 <up_button+0xfc>
 8000c3e:	e1b4      	b.n	8000faa <up_button+0x466>
															{
															SSD1306_Clear ();
 8000c40:	f000 ffee 	bl	8001c20 <SSD1306_Clear>
															HAL_Delay (10);
 8000c44:	200a      	movs	r0, #10
 8000c46:	f001 fa4d 	bl	80020e4 <HAL_Delay>
															int y=1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	64bb      	str	r3, [r7, #72]	; 0x48
															while(y)
 8000c4e:	e1a8      	b.n	8000fa2 <up_button+0x45e>
															{
																		HAL_ADC_Start(&hadc);
 8000c50:	4b73      	ldr	r3, [pc, #460]	; (8000e20 <up_button+0x2dc>)
 8000c52:	0018      	movs	r0, r3
 8000c54:	f001 fbde 	bl	8002414 <HAL_ADC_Start>
																		HAL_ADC_PollForConversion(&hadc, 100);
 8000c58:	4b71      	ldr	r3, [pc, #452]	; (8000e20 <up_button+0x2dc>)
 8000c5a:	2164      	movs	r1, #100	; 0x64
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f001 fc2d 	bl	80024bc <HAL_ADC_PollForConversion>
																		sensor1_data = HAL_ADC_GetValue(&hadc);
 8000c62:	4b6f      	ldr	r3, [pc, #444]	; (8000e20 <up_button+0x2dc>)
 8000c64:	0018      	movs	r0, r3
 8000c66:	f001 fcc5 	bl	80025f4 <HAL_ADC_GetValue>
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	4b6d      	ldr	r3, [pc, #436]	; (8000e24 <up_button+0x2e0>)
 8000c70:	801a      	strh	r2, [r3, #0]
																		sensor1_data=(((sensor1_data*330)/1023)-65580);
 8000c72:	4b6c      	ldr	r3, [pc, #432]	; (8000e24 <up_button+0x2e0>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	001a      	movs	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	189b      	adds	r3, r3, r2
 8000c7e:	015a      	lsls	r2, r3, #5
 8000c80:	189b      	adds	r3, r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4968      	ldr	r1, [pc, #416]	; (8000e28 <up_button+0x2e4>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff fad2 	bl	8000230 <__divsi3>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	3b2c      	subs	r3, #44	; 0x2c
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b63      	ldr	r3, [pc, #396]	; (8000e24 <up_button+0x2e0>)
 8000c96:	801a      	strh	r2, [r3, #0]
																		 char buffer[16];
																	//	 Display pressure value
																	//	SSD1306_Clear();
																		//HAL_Delay(100);
																		SSD1306_GotoXY(0, 0);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 ff00 	bl	8001aa0 <SSD1306_GotoXY>
																		SSD1306_Puts("                            ", &Font_7x10, 1);
 8000ca0:	4962      	ldr	r1, [pc, #392]	; (8000e2c <up_button+0x2e8>)
 8000ca2:	4b63      	ldr	r3, [pc, #396]	; (8000e30 <up_button+0x2ec>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 ff94 	bl	8001bd4 <SSD1306_Puts>
																		SSD1306_GotoXY(0, 2);
 8000cac:	2102      	movs	r1, #2
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 fef6 	bl	8001aa0 <SSD1306_GotoXY>
																		SSD1306_Puts(" HUMIDITY            ", &Font_7x10, 1);
 8000cb4:	495d      	ldr	r1, [pc, #372]	; (8000e2c <up_button+0x2e8>)
 8000cb6:	4b61      	ldr	r3, [pc, #388]	; (8000e3c <up_button+0x2f8>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f000 ff8a 	bl	8001bd4 <SSD1306_Puts>
																		SSD1306_GotoXY(10, 30);
 8000cc0:	211e      	movs	r1, #30
 8000cc2:	200a      	movs	r0, #10
 8000cc4:	f000 feec 	bl	8001aa0 <SSD1306_GotoXY>
																		sprintf(buffer, "Humidity now: %d'", sensor1_data);
 8000cc8:	4b56      	ldr	r3, [pc, #344]	; (8000e24 <up_button+0x2e0>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	001a      	movs	r2, r3
 8000cce:	495c      	ldr	r1, [pc, #368]	; (8000e40 <up_button+0x2fc>)
 8000cd0:	2420      	movs	r4, #32
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f004 fa89 	bl	80051ec <siprintf>
																		SSD1306_Puts(buffer, &Font_7x10, 1);
 8000cda:	4954      	ldr	r1, [pc, #336]	; (8000e2c <up_button+0x2e8>)
 8000cdc:	193b      	adds	r3, r7, r4
 8000cde:	2201      	movs	r2, #1
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f000 ff77 	bl	8001bd4 <SSD1306_Puts>
																		SSD1306_UpdateScreen();
 8000ce6:	f000 fe1f 	bl	8001928 <SSD1306_UpdateScreen>
																		HAL_Delay(2000);
 8000cea:	23fa      	movs	r3, #250	; 0xfa
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f001 f9f8 	bl	80020e4 <HAL_Delay>
																		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1); //LED ON
 8000cf4:	23a0      	movs	r3, #160	; 0xa0
 8000cf6:	05db      	lsls	r3, r3, #23
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2120      	movs	r1, #32
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f002 f81e 	bl	8002d3e <HAL_GPIO_WritePin>
																		HAL_Delay(80);
 8000d02:	2050      	movs	r0, #80	; 0x50
 8000d04:	f001 f9ee 	bl	80020e4 <HAL_Delay>
																		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000d08:	23a0      	movs	r3, #160	; 0xa0
 8000d0a:	05db      	lsls	r3, r3, #23
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2120      	movs	r1, #32
 8000d10:	0018      	movs	r0, r3
 8000d12:	f002 f814 	bl	8002d3e <HAL_GPIO_WritePin>
																																	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET)
 8000d16:	4b41      	ldr	r3, [pc, #260]	; (8000e1c <up_button+0x2d8>)
 8000d18:	2108      	movs	r1, #8
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f001 fff2 	bl	8002d04 <HAL_GPIO_ReadPin>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d000      	beq.n	8000d26 <up_button+0x1e2>
 8000d24:	e127      	b.n	8000f76 <up_button+0x432>
																																	{
																																	SSD1306_Clear ();
 8000d26:	f000 ff7b 	bl	8001c20 <SSD1306_Clear>
																																	HAL_Delay (10);
 8000d2a:	200a      	movs	r0, #10
 8000d2c:	f001 f9da 	bl	80020e4 <HAL_Delay>
																																	int y=1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	647b      	str	r3, [r7, #68]	; 0x44
																																	while(y)
 8000d34:	e11b      	b.n	8000f6e <up_button+0x42a>
																																	{
																																				HAL_ADC_Start(&hadc);
 8000d36:	4b3a      	ldr	r3, [pc, #232]	; (8000e20 <up_button+0x2dc>)
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f001 fb6b 	bl	8002414 <HAL_ADC_Start>
																																				HAL_ADC_PollForConversion(&hadc, 100);
 8000d3e:	4b38      	ldr	r3, [pc, #224]	; (8000e20 <up_button+0x2dc>)
 8000d40:	2164      	movs	r1, #100	; 0x64
 8000d42:	0018      	movs	r0, r3
 8000d44:	f001 fbba 	bl	80024bc <HAL_ADC_PollForConversion>
																																				sensor1_data = HAL_ADC_GetValue(&hadc);
 8000d48:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <up_button+0x2dc>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f001 fc52 	bl	80025f4 <HAL_ADC_GetValue>
 8000d50:	0003      	movs	r3, r0
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	4b33      	ldr	r3, [pc, #204]	; (8000e24 <up_button+0x2e0>)
 8000d56:	801a      	strh	r2, [r3, #0]
																																				sensor1_data=(((sensor1_data*330)/1023)-65580);
 8000d58:	4b32      	ldr	r3, [pc, #200]	; (8000e24 <up_button+0x2e0>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	0013      	movs	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	189b      	adds	r3, r3, r2
 8000d64:	015a      	lsls	r2, r3, #5
 8000d66:	189b      	adds	r3, r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	492f      	ldr	r1, [pc, #188]	; (8000e28 <up_button+0x2e4>)
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff fa5f 	bl	8000230 <__divsi3>
 8000d72:	0003      	movs	r3, r0
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	3b2c      	subs	r3, #44	; 0x2c
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <up_button+0x2e0>)
 8000d7c:	801a      	strh	r2, [r3, #0]
																																				 char buffer[16];
																																			//	 Display pressure value
																																			//	SSD1306_Clear();
																																				//HAL_Delay(100);
																																				SSD1306_GotoXY(0, 0);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2000      	movs	r0, #0
 8000d82:	f000 fe8d 	bl	8001aa0 <SSD1306_GotoXY>
																																				SSD1306_Puts("                            ", &Font_7x10, 1);
 8000d86:	4929      	ldr	r1, [pc, #164]	; (8000e2c <up_button+0x2e8>)
 8000d88:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <up_button+0x2ec>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f000 ff21 	bl	8001bd4 <SSD1306_Puts>
																																				SSD1306_GotoXY(0, 2);
 8000d92:	2102      	movs	r1, #2
 8000d94:	2000      	movs	r0, #0
 8000d96:	f000 fe83 	bl	8001aa0 <SSD1306_GotoXY>
																																				SSD1306_Puts(" PULSE RATE            ", &Font_7x10, 1);
 8000d9a:	4924      	ldr	r1, [pc, #144]	; (8000e2c <up_button+0x2e8>)
 8000d9c:	4b29      	ldr	r3, [pc, #164]	; (8000e44 <up_button+0x300>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	0018      	movs	r0, r3
 8000da2:	f000 ff17 	bl	8001bd4 <SSD1306_Puts>
																																				SSD1306_GotoXY(10, 30);
 8000da6:	211e      	movs	r1, #30
 8000da8:	200a      	movs	r0, #10
 8000daa:	f000 fe79 	bl	8001aa0 <SSD1306_GotoXY>
																																				sprintf(buffer, "Pulse Rate now: %d'", sensor1_data);
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <up_button+0x2e0>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	001a      	movs	r2, r3
 8000db4:	4924      	ldr	r1, [pc, #144]	; (8000e48 <up_button+0x304>)
 8000db6:	2410      	movs	r4, #16
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f004 fa16 	bl	80051ec <siprintf>
																																				SSD1306_Puts(buffer, &Font_7x10, 1);
 8000dc0:	491a      	ldr	r1, [pc, #104]	; (8000e2c <up_button+0x2e8>)
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f000 ff04 	bl	8001bd4 <SSD1306_Puts>
																																				SSD1306_UpdateScreen();
 8000dcc:	f000 fdac 	bl	8001928 <SSD1306_UpdateScreen>
																																				HAL_Delay(2000);
 8000dd0:	23fa      	movs	r3, #250	; 0xfa
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f001 f985 	bl	80020e4 <HAL_Delay>
																																				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1); //LED ON
 8000dda:	23a0      	movs	r3, #160	; 0xa0
 8000ddc:	05db      	lsls	r3, r3, #23
 8000dde:	2201      	movs	r2, #1
 8000de0:	2120      	movs	r1, #32
 8000de2:	0018      	movs	r0, r3
 8000de4:	f001 ffab 	bl	8002d3e <HAL_GPIO_WritePin>
																																				HAL_Delay(80);
 8000de8:	2050      	movs	r0, #80	; 0x50
 8000dea:	f001 f97b 	bl	80020e4 <HAL_Delay>
																																				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000dee:	23a0      	movs	r3, #160	; 0xa0
 8000df0:	05db      	lsls	r3, r3, #23
 8000df2:	2200      	movs	r2, #0
 8000df4:	2120      	movs	r1, #32
 8000df6:	0018      	movs	r0, r3
 8000df8:	f001 ffa1 	bl	8002d3e <HAL_GPIO_WritePin>
																																				                                                           if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET)
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <up_button+0x2d8>)
 8000dfe:	2108      	movs	r1, #8
 8000e00:	0018      	movs	r0, r3
 8000e02:	f001 ff7f 	bl	8002d04 <HAL_GPIO_ReadPin>
 8000e06:	1e03      	subs	r3, r0, #0
 8000e08:	d000      	beq.n	8000e0c <up_button+0x2c8>
 8000e0a:	e09a      	b.n	8000f42 <up_button+0x3fe>
																																																			{
																																																			SSD1306_Clear ();
 8000e0c:	f000 ff08 	bl	8001c20 <SSD1306_Clear>
																																																			HAL_Delay (10);
 8000e10:	200a      	movs	r0, #10
 8000e12:	f001 f967 	bl	80020e4 <HAL_Delay>
																																																			int y=1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	643b      	str	r3, [r7, #64]	; 0x40
																																																			while(y)
 8000e1a:	e08f      	b.n	8000f3c <up_button+0x3f8>
 8000e1c:	50000400 	.word	0x50000400
 8000e20:	200000f0 	.word	0x200000f0
 8000e24:	200001f4 	.word	0x200001f4
 8000e28:	000003ff 	.word	0x000003ff
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	08005b20 	.word	0x08005b20
 8000e34:	08005b40 	.word	0x08005b40
 8000e38:	08005b5c 	.word	0x08005b5c
 8000e3c:	08005b6c 	.word	0x08005b6c
 8000e40:	08005b84 	.word	0x08005b84
 8000e44:	08005b98 	.word	0x08005b98
 8000e48:	08005bb0 	.word	0x08005bb0
																																																			{
																																																						HAL_ADC_Start(&hadc);
 8000e4c:	4b66      	ldr	r3, [pc, #408]	; (8000fe8 <up_button+0x4a4>)
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f001 fae0 	bl	8002414 <HAL_ADC_Start>
																																																						HAL_ADC_PollForConversion(&hadc, 100);
 8000e54:	4b64      	ldr	r3, [pc, #400]	; (8000fe8 <up_button+0x4a4>)
 8000e56:	2164      	movs	r1, #100	; 0x64
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f001 fb2f 	bl	80024bc <HAL_ADC_PollForConversion>
																																																						sensor1_data = HAL_ADC_GetValue(&hadc);
 8000e5e:	4b62      	ldr	r3, [pc, #392]	; (8000fe8 <up_button+0x4a4>)
 8000e60:	0018      	movs	r0, r3
 8000e62:	f001 fbc7 	bl	80025f4 <HAL_ADC_GetValue>
 8000e66:	0003      	movs	r3, r0
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b60      	ldr	r3, [pc, #384]	; (8000fec <up_button+0x4a8>)
 8000e6c:	801a      	strh	r2, [r3, #0]
																																																						sensor1_data=(((sensor1_data*330)/1023)-65580);
 8000e6e:	4b5f      	ldr	r3, [pc, #380]	; (8000fec <up_button+0x4a8>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	001a      	movs	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	189b      	adds	r3, r3, r2
 8000e7a:	015a      	lsls	r2, r3, #5
 8000e7c:	189b      	adds	r3, r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	495b      	ldr	r1, [pc, #364]	; (8000ff0 <up_button+0x4ac>)
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff f9d4 	bl	8000230 <__divsi3>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3b2c      	subs	r3, #44	; 0x2c
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b56      	ldr	r3, [pc, #344]	; (8000fec <up_button+0x4a8>)
 8000e92:	801a      	strh	r2, [r3, #0]
																																																						 char buffer[16];
																																																					//	 Display pressure value
																																																					//	SSD1306_Clear();
																																																						//HAL_Delay(100);
																																																						SSD1306_GotoXY(0, 0);
 8000e94:	2100      	movs	r1, #0
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 fe02 	bl	8001aa0 <SSD1306_GotoXY>
																																																						SSD1306_Puts("                            ", &Font_7x10, 1);
 8000e9c:	4955      	ldr	r1, [pc, #340]	; (8000ff4 <up_button+0x4b0>)
 8000e9e:	4b56      	ldr	r3, [pc, #344]	; (8000ff8 <up_button+0x4b4>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f000 fe96 	bl	8001bd4 <SSD1306_Puts>
																																																						SSD1306_GotoXY(0, 2);
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 fdf8 	bl	8001aa0 <SSD1306_GotoXY>
																																																						SSD1306_Puts(" PRESSURE           ", &Font_7x10, 1);
 8000eb0:	4950      	ldr	r1, [pc, #320]	; (8000ff4 <up_button+0x4b0>)
 8000eb2:	4b52      	ldr	r3, [pc, #328]	; (8000ffc <up_button+0x4b8>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f000 fe8c 	bl	8001bd4 <SSD1306_Puts>
																																																						SSD1306_GotoXY(10, 30);
 8000ebc:	211e      	movs	r1, #30
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f000 fdee 	bl	8001aa0 <SSD1306_GotoXY>
																																																						sprintf(buffer, "Pressure now: %d'", sensor1_data);
 8000ec4:	4b49      	ldr	r3, [pc, #292]	; (8000fec <up_button+0x4a8>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	001a      	movs	r2, r3
 8000eca:	494d      	ldr	r1, [pc, #308]	; (8001000 <up_button+0x4bc>)
 8000ecc:	003b      	movs	r3, r7
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f004 f98c 	bl	80051ec <siprintf>
																																																						SSD1306_Puts(buffer, &Font_7x10, 1);
 8000ed4:	4947      	ldr	r1, [pc, #284]	; (8000ff4 <up_button+0x4b0>)
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2201      	movs	r2, #1
 8000eda:	0018      	movs	r0, r3
 8000edc:	f000 fe7a 	bl	8001bd4 <SSD1306_Puts>
																																																						SSD1306_UpdateScreen();
 8000ee0:	f000 fd22 	bl	8001928 <SSD1306_UpdateScreen>
																																																						HAL_Delay(2000);
 8000ee4:	23fa      	movs	r3, #250	; 0xfa
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f001 f8fb 	bl	80020e4 <HAL_Delay>
																																																						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1); //LED ON
 8000eee:	23a0      	movs	r3, #160	; 0xa0
 8000ef0:	05db      	lsls	r3, r3, #23
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f001 ff21 	bl	8002d3e <HAL_GPIO_WritePin>
																																																						HAL_Delay(80);
 8000efc:	2050      	movs	r0, #80	; 0x50
 8000efe:	f001 f8f1 	bl	80020e4 <HAL_Delay>
																																																						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000f02:	23a0      	movs	r3, #160	; 0xa0
 8000f04:	05db      	lsls	r3, r3, #23
 8000f06:	2200      	movs	r2, #0
 8000f08:	2120      	movs	r1, #32
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f001 ff17 	bl	8002d3e <HAL_GPIO_WritePin>

																																																						 if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	019b      	lsls	r3, r3, #6
 8000f14:	4a3b      	ldr	r2, [pc, #236]	; (8001004 <up_button+0x4c0>)
 8000f16:	0019      	movs	r1, r3
 8000f18:	0010      	movs	r0, r2
 8000f1a:	f001 fef3 	bl	8002d04 <HAL_GPIO_ReadPin>
 8000f1e:	1e03      	subs	r3, r0, #0
 8000f20:	d10c      	bne.n	8000f3c <up_button+0x3f8>
																																																											{
																																																											 SSD1306_Clear();
 8000f22:	f000 fe7d 	bl	8001c20 <SSD1306_Clear>
																																																											 HAL_Delay(100);
 8000f26:	2064      	movs	r0, #100	; 0x64
 8000f28:	f001 f8dc 	bl	80020e4 <HAL_Delay>
																																																											 flag=0;
 8000f2c:	4b36      	ldr	r3, [pc, #216]	; (8001008 <up_button+0x4c4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
																																																											 x=0;
 8000f32:	4b36      	ldr	r3, [pc, #216]	; (800100c <up_button+0x4c8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
																																																											 y=0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
																																																			while(y)
 8000f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d184      	bne.n	8000e4c <up_button+0x308>
																																																											}
																																																			}
																																																			}
																																				 if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	019b      	lsls	r3, r3, #6
 8000f46:	4a2f      	ldr	r2, [pc, #188]	; (8001004 <up_button+0x4c0>)
 8000f48:	0019      	movs	r1, r3
 8000f4a:	0010      	movs	r0, r2
 8000f4c:	f001 feda 	bl	8002d04 <HAL_GPIO_ReadPin>
 8000f50:	1e03      	subs	r3, r0, #0
 8000f52:	d10c      	bne.n	8000f6e <up_button+0x42a>
																																									{
																																									 SSD1306_Clear();
 8000f54:	f000 fe64 	bl	8001c20 <SSD1306_Clear>
																																									 HAL_Delay(100);
 8000f58:	2064      	movs	r0, #100	; 0x64
 8000f5a:	f001 f8c3 	bl	80020e4 <HAL_Delay>
																																									 flag=0;
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <up_button+0x4c4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
																																									 x=0;
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <up_button+0x4c8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
																																									 y=0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	647b      	str	r3, [r7, #68]	; 0x44
																																	while(y)
 8000f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d000      	beq.n	8000f76 <up_button+0x432>
 8000f74:	e6df      	b.n	8000d36 <up_button+0x1f2>
																																									}
																																	}
																																	}
																		 if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	019b      	lsls	r3, r3, #6
 8000f7a:	4a22      	ldr	r2, [pc, #136]	; (8001004 <up_button+0x4c0>)
 8000f7c:	0019      	movs	r1, r3
 8000f7e:	0010      	movs	r0, r2
 8000f80:	f001 fec0 	bl	8002d04 <HAL_GPIO_ReadPin>
 8000f84:	1e03      	subs	r3, r0, #0
 8000f86:	d10c      	bne.n	8000fa2 <up_button+0x45e>
																							{
																							 SSD1306_Clear();
 8000f88:	f000 fe4a 	bl	8001c20 <SSD1306_Clear>
																							 HAL_Delay(100);
 8000f8c:	2064      	movs	r0, #100	; 0x64
 8000f8e:	f001 f8a9 	bl	80020e4 <HAL_Delay>
																							 flag=0;
 8000f92:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <up_button+0x4c4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
																							 x=0;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <up_button+0x4c8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
																							 y=0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	64bb      	str	r3, [r7, #72]	; 0x48
															while(y)
 8000fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d000      	beq.n	8000faa <up_button+0x466>
 8000fa8:	e652      	b.n	8000c50 <up_button+0x10c>
																							}
															}
															}
									 if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	019b      	lsls	r3, r3, #6
 8000fae:	4a15      	ldr	r2, [pc, #84]	; (8001004 <up_button+0x4c0>)
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	0010      	movs	r0, r2
 8000fb4:	f001 fea6 	bl	8002d04 <HAL_GPIO_ReadPin>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d10c      	bne.n	8000fd6 <up_button+0x492>
														{
														 SSD1306_Clear();
 8000fbc:	f000 fe30 	bl	8001c20 <SSD1306_Clear>
														 HAL_Delay(100);
 8000fc0:	2064      	movs	r0, #100	; 0x64
 8000fc2:	f001 f88f 	bl	80020e4 <HAL_Delay>
														 flag=0;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <up_button+0x4c4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
														 x=0;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <up_button+0x4c8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
														 y=0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
						while(y)
 8000fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d000      	beq.n	8000fde <up_button+0x49a>
 8000fdc:	e5c5      	b.n	8000b6a <up_button+0x26>
														}
						}
						}
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b015      	add	sp, #84	; 0x54
 8000fe4:	bd90      	pop	{r4, r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	200000f0 	.word	0x200000f0
 8000fec:	200001f4 	.word	0x200001f4
 8000ff0:	000003ff 	.word	0x000003ff
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	08005b20 	.word	0x08005b20
 8000ffc:	08005bc4 	.word	0x08005bc4
 8001000:	08005bdc 	.word	0x08005bdc
 8001004:	50000800 	.word	0x50000800
 8001008:	200001f0 	.word	0x200001f0
 800100c:	20000062 	.word	0x20000062

08001010 <settings>:

void settings(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	SSD1306_Clear ();
 8001014:	f000 fe04 	bl	8001c20 <SSD1306_Clear>
	HAL_Delay (100);
 8001018:	2064      	movs	r0, #100	; 0x64
 800101a:	f001 f863 	bl	80020e4 <HAL_Delay>
	while(x)
 800101e:	e044      	b.n	80010aa <settings+0x9a>
	{
	SSD1306_GotoXY (0,0);
 8001020:	2100      	movs	r1, #0
 8001022:	2000      	movs	r0, #0
 8001024:	f000 fd3c 	bl	8001aa0 <SSD1306_GotoXY>
	SSD1306_Puts ("                            ", &Font_7x10, 0);
 8001028:	4924      	ldr	r1, [pc, #144]	; (80010bc <settings+0xac>)
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <settings+0xb0>)
 800102c:	2200      	movs	r2, #0
 800102e:	0018      	movs	r0, r3
 8001030:	f000 fdd0 	bl	8001bd4 <SSD1306_Puts>
	SSD1306_GotoXY (0,2);
 8001034:	2102      	movs	r1, #2
 8001036:	2000      	movs	r0, #0
 8001038:	f000 fd32 	bl	8001aa0 <SSD1306_GotoXY>
	SSD1306_Puts ("      SETTINGS            ", &Font_7x10, 0);
 800103c:	491f      	ldr	r1, [pc, #124]	; (80010bc <settings+0xac>)
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <settings+0xb4>)
 8001040:	2200      	movs	r2, #0
 8001042:	0018      	movs	r0, r3
 8001044:	f000 fdc6 	bl	8001bd4 <SSD1306_Puts>
	SSD1306_GotoXY (0,12);
 8001048:	210c      	movs	r1, #12
 800104a:	2000      	movs	r0, #0
 800104c:	f000 fd28 	bl	8001aa0 <SSD1306_GotoXY>
	SSD1306_Puts (" U-Pulse Rate        ", &Font_7x10, 0);
 8001050:	491a      	ldr	r1, [pc, #104]	; (80010bc <settings+0xac>)
 8001052:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <settings+0xb8>)
 8001054:	2200      	movs	r2, #0
 8001056:	0018      	movs	r0, r3
 8001058:	f000 fdbc 	bl	8001bd4 <SSD1306_Puts>
	SSD1306_GotoXY (0,22);
 800105c:	2116      	movs	r1, #22
 800105e:	2000      	movs	r0, #0
 8001060:	f000 fd1e 	bl	8001aa0 <SSD1306_GotoXY>
	SSD1306_Puts (" D-Temperature        ", &Font_7x10, 0);
 8001064:	4915      	ldr	r1, [pc, #84]	; (80010bc <settings+0xac>)
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <settings+0xbc>)
 8001068:	2200      	movs	r2, #0
 800106a:	0018      	movs	r0, r3
 800106c:	f000 fdb2 	bl	8001bd4 <SSD1306_Puts>
	SSD1306_GotoXY (0,32);
 8001070:	2120      	movs	r1, #32
 8001072:	2000      	movs	r0, #0
 8001074:	f000 fd14 	bl	8001aa0 <SSD1306_GotoXY>
	SSD1306_Puts (" L-Humidity           ", &Font_7x10, 0);
 8001078:	4910      	ldr	r1, [pc, #64]	; (80010bc <settings+0xac>)
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <settings+0xc0>)
 800107c:	2200      	movs	r2, #0
 800107e:	0018      	movs	r0, r3
 8001080:	f000 fda8 	bl	8001bd4 <SSD1306_Puts>
	SSD1306_GotoXY (0,42);
 8001084:	212a      	movs	r1, #42	; 0x2a
 8001086:	2000      	movs	r0, #0
 8001088:	f000 fd0a 	bl	8001aa0 <SSD1306_GotoXY>
	SSD1306_Puts (" R-Pressure           ", &Font_7x10, 0);
 800108c:	490b      	ldr	r1, [pc, #44]	; (80010bc <settings+0xac>)
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <settings+0xc4>)
 8001090:	2200      	movs	r2, #0
 8001092:	0018      	movs	r0, r3
 8001094:	f000 fd9e 	bl	8001bd4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001098:	f000 fc46 	bl	8001928 <SSD1306_UpdateScreen>
	HAL_Delay (500);
 800109c:	23fa      	movs	r3, #250	; 0xfa
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	0018      	movs	r0, r3
 80010a2:	f001 f81f 	bl	80020e4 <HAL_Delay>
	up_button();
 80010a6:	f7ff fd4d 	bl	8000b44 <up_button>
	while(x)
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <settings+0xc8>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1b6      	bne.n	8001020 <settings+0x10>
	}
}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	20000000 	.word	0x20000000
 80010c0:	08005b20 	.word	0x08005b20
 80010c4:	08005bf0 	.word	0x08005bf0
 80010c8:	08005c0c 	.word	0x08005c0c
 80010cc:	08005c24 	.word	0x08005c24
 80010d0:	08005c3c 	.word	0x08005c3c
 80010d4:	08005c54 	.word	0x08005c54
 80010d8:	20000062 	.word	0x20000062

080010dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80010e0:	f000 ff90 	bl	8002004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e4:	f000 f85e 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e8:	f000 fa24 	bl	8001534 <MX_GPIO_Init>
  MX_RTC_Init();
 80010ec:	f000 f986 	bl	80013fc <MX_RTC_Init>
  MX_I2C1_Init();
 80010f0:	f000 f944 	bl	800137c <MX_I2C1_Init>
  MX_ADC_Init();
 80010f4:	f000 f8ce 	bl	8001294 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80010f8:	f000 fb52 	bl	80017a0 <SSD1306_Init>

    if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1)!= 0x32F2)
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <main+0xac>)
 80010fe:	2101      	movs	r1, #1
 8001100:	0018      	movs	r0, r3
 8001102:	f004 f823 	bl	800514c <HAL_RTCEx_BKUPRead>
 8001106:	0003      	movs	r3, r0
 8001108:	4a20      	ldr	r2, [pc, #128]	; (800118c <main+0xb0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d001      	beq.n	8001112 <main+0x36>
    {
    set_time();
 800110e:	f7ff fabf 	bl	8000690 <set_time>
    }
    set_alarm();
 8001112:	f7ff fb07 	bl	8000724 <set_alarm>

  /* USER CODE BEGIN WHILE */
	while (1)
	{

														    home_screen();
 8001116:	f7ff fc49 	bl	80009ac <home_screen>
														    buttonState = HAL_GPIO_ReadPin(CENTER_GPIO_Port, CENTER_Pin);
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	019b      	lsls	r3, r3, #6
 800111e:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <main+0xb4>)
 8001120:	0019      	movs	r1, r3
 8001122:	0010      	movs	r0, r2
 8001124:	f001 fdee 	bl	8002d04 <HAL_GPIO_ReadPin>
 8001128:	0003      	movs	r3, r0
 800112a:	001a      	movs	r2, r3
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <main+0xb8>)
 800112e:	701a      	strb	r2, [r3, #0]

														    if (buttonState != lastButtonState)
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <main+0xb8>)
 8001132:	781a      	ldrb	r2, [r3, #0]
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <main+0xbc>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d010      	beq.n	800115e <main+0x82>
														    {
														        if (HAL_GetTick() - buttonPressTime >= 2000) // Button held down for 2 seconds
 800113c:	f000 ffc8 	bl	80020d0 <HAL_GetTick>
 8001140:	0002      	movs	r2, r0
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <main+0xc0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	1ad2      	subs	r2, r2, r3
 8001148:	23fa      	movs	r3, #250	; 0xfa
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	429a      	cmp	r2, r3
 800114e:	d302      	bcc.n	8001156 <main+0x7a>
														        {
														            flag = 1;
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <main+0xc4>)
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]
														        }
														        lastButtonState = buttonState;
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <main+0xb8>)
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <main+0xbc>)
 800115c:	701a      	strb	r2, [r3, #0]
														    }

														    if (flag == 1 && buttonState == GPIO_PIN_RESET && HAL_GetTick() - buttonPressTime >= 2000)
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <main+0xc4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d1d7      	bne.n	8001116 <main+0x3a>
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <main+0xb8>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1d3      	bne.n	8001116 <main+0x3a>
 800116e:	f000 ffaf 	bl	80020d0 <HAL_GetTick>
 8001172:	0002      	movs	r2, r0
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <main+0xc0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	1ad2      	subs	r2, r2, r3
 800117a:	23fa      	movs	r3, #250	; 0xfa
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	429a      	cmp	r2, r3
 8001180:	d3c9      	bcc.n	8001116 <main+0x3a>
														    {
														        settings();
 8001182:	f7ff ff45 	bl	8001010 <settings>
														    home_screen();
 8001186:	e7c6      	b.n	8001116 <main+0x3a>
 8001188:	200001a0 	.word	0x200001a0
 800118c:	000032f2 	.word	0x000032f2
 8001190:	50000800 	.word	0x50000800
 8001194:	200001e9 	.word	0x200001e9
 8001198:	200001ea 	.word	0x200001ea
 800119c:	200001ec 	.word	0x200001ec
 80011a0:	200001f0 	.word	0x200001f0

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b09d      	sub	sp, #116	; 0x74
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	2438      	movs	r4, #56	; 0x38
 80011ac:	193b      	adds	r3, r7, r4
 80011ae:	0018      	movs	r0, r3
 80011b0:	2338      	movs	r3, #56	; 0x38
 80011b2:	001a      	movs	r2, r3
 80011b4:	2100      	movs	r1, #0
 80011b6:	f004 f811 	bl	80051dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ba:	2324      	movs	r3, #36	; 0x24
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	0018      	movs	r0, r3
 80011c0:	2314      	movs	r3, #20
 80011c2:	001a      	movs	r2, r3
 80011c4:	2100      	movs	r1, #0
 80011c6:	f004 f809 	bl	80051dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ca:	003b      	movs	r3, r7
 80011cc:	0018      	movs	r0, r3
 80011ce:	2324      	movs	r3, #36	; 0x24
 80011d0:	001a      	movs	r2, r3
 80011d2:	2100      	movs	r1, #0
 80011d4:	f004 f802 	bl	80051dc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d8:	4b2c      	ldr	r3, [pc, #176]	; (800128c <SystemClock_Config+0xe8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a2c      	ldr	r2, [pc, #176]	; (8001290 <SystemClock_Config+0xec>)
 80011de:	401a      	ands	r2, r3
 80011e0:	4b2a      	ldr	r3, [pc, #168]	; (800128c <SystemClock_Config+0xe8>)
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	0109      	lsls	r1, r1, #4
 80011e6:	430a      	orrs	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80011ea:	0021      	movs	r1, r4
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	221a      	movs	r2, #26
 80011f0:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2201      	movs	r2, #1
 80011f6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	2210      	movs	r2, #16
 80011fc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	2201      	movs	r2, #1
 8001202:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001204:	187b      	adds	r3, r7, r1
 8001206:	2201      	movs	r2, #1
 8001208:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800120a:	187b      	adds	r3, r7, r1
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001210:	187b      	adds	r3, r7, r1
 8001212:	22a0      	movs	r2, #160	; 0xa0
 8001214:	0212      	lsls	r2, r2, #8
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001218:	187b      	adds	r3, r7, r1
 800121a:	2200      	movs	r2, #0
 800121c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121e:	187b      	adds	r3, r7, r1
 8001220:	0018      	movs	r0, r3
 8001222:	f002 fb2d 	bl	8003880 <HAL_RCC_OscConfig>
 8001226:	1e03      	subs	r3, r0, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800122a:	f000 fa15 	bl	8001658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122e:	2124      	movs	r1, #36	; 0x24
 8001230:	187b      	adds	r3, r7, r1
 8001232:	220f      	movs	r2, #15
 8001234:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001236:	187b      	adds	r3, r7, r1
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001242:	187b      	adds	r3, r7, r1
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800124e:	187b      	adds	r3, r7, r1
 8001250:	2100      	movs	r1, #0
 8001252:	0018      	movs	r0, r3
 8001254:	f002 fed8 	bl	8004008 <HAL_RCC_ClockConfig>
 8001258:	1e03      	subs	r3, r0, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800125c:	f000 f9fc 	bl	8001658 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8001260:	003b      	movs	r3, r7
 8001262:	2228      	movs	r2, #40	; 0x28
 8001264:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001266:	003b      	movs	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800126c:	003b      	movs	r3, r7
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	0292      	lsls	r2, r2, #10
 8001272:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001274:	003b      	movs	r3, r7
 8001276:	0018      	movs	r0, r3
 8001278:	f003 f8b4 	bl	80043e4 <HAL_RCCEx_PeriphCLKConfig>
 800127c:	1e03      	subs	r3, r0, #0
 800127e:	d001      	beq.n	8001284 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001280:	f000 f9ea 	bl	8001658 <Error_Handler>
  }
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b01d      	add	sp, #116	; 0x74
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	40007000 	.word	0x40007000
 8001290:	ffffe7ff 	.word	0xffffe7ff

08001294 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800129a:	003b      	movs	r3, r7
 800129c:	0018      	movs	r0, r3
 800129e:	2308      	movs	r3, #8
 80012a0:	001a      	movs	r2, r3
 80012a2:	2100      	movs	r1, #0
 80012a4:	f003 ff9a 	bl	80051dc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80012a8:	4b30      	ldr	r3, [pc, #192]	; (800136c <MX_ADC_Init+0xd8>)
 80012aa:	4a31      	ldr	r2, [pc, #196]	; (8001370 <MX_ADC_Init+0xdc>)
 80012ac:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80012ae:	4b2f      	ldr	r3, [pc, #188]	; (800136c <MX_ADC_Init+0xd8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012b4:	4b2d      	ldr	r3, [pc, #180]	; (800136c <MX_ADC_Init+0xd8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 80012ba:	4b2c      	ldr	r3, [pc, #176]	; (800136c <MX_ADC_Init+0xd8>)
 80012bc:	2208      	movs	r2, #8
 80012be:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012c0:	4b2a      	ldr	r3, [pc, #168]	; (800136c <MX_ADC_Init+0xd8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80012c6:	4b29      	ldr	r3, [pc, #164]	; (800136c <MX_ADC_Init+0xd8>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012cc:	4b27      	ldr	r3, [pc, #156]	; (800136c <MX_ADC_Init+0xd8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <MX_ADC_Init+0xd8>)
 80012d4:	2220      	movs	r2, #32
 80012d6:	2101      	movs	r1, #1
 80012d8:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <MX_ADC_Init+0xd8>)
 80012dc:	2221      	movs	r2, #33	; 0x21
 80012de:	2100      	movs	r1, #0
 80012e0:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <MX_ADC_Init+0xd8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <MX_ADC_Init+0xd8>)
 80012ea:	22c2      	movs	r2, #194	; 0xc2
 80012ec:	32ff      	adds	r2, #255	; 0xff
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80012f0:	4b1e      	ldr	r3, [pc, #120]	; (800136c <MX_ADC_Init+0xd8>)
 80012f2:	222c      	movs	r2, #44	; 0x2c
 80012f4:	2100      	movs	r1, #0
 80012f6:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012f8:	4b1c      	ldr	r3, [pc, #112]	; (800136c <MX_ADC_Init+0xd8>)
 80012fa:	2208      	movs	r2, #8
 80012fc:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_ADC_Init+0xd8>)
 8001300:	2200      	movs	r2, #0
 8001302:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <MX_ADC_Init+0xd8>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_ADC_Init+0xd8>)
 800130c:	2200      	movs	r2, #0
 800130e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_ADC_Init+0xd8>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_ADC_Init+0xd8>)
 8001318:	0018      	movs	r0, r3
 800131a:	f000 ff07 	bl	800212c <HAL_ADC_Init>
 800131e:	1e03      	subs	r3, r0, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8001322:	f000 f999 	bl	8001658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001326:	003b      	movs	r3, r7
 8001328:	4a12      	ldr	r2, [pc, #72]	; (8001374 <MX_ADC_Init+0xe0>)
 800132a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800132c:	003b      	movs	r3, r7
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	0152      	lsls	r2, r2, #5
 8001332:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001334:	003a      	movs	r2, r7
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <MX_ADC_Init+0xd8>)
 8001338:	0011      	movs	r1, r2
 800133a:	0018      	movs	r0, r3
 800133c:	f001 f966 	bl	800260c <HAL_ADC_ConfigChannel>
 8001340:	1e03      	subs	r3, r0, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC_Init+0xb4>
  {
    Error_Handler();
 8001344:	f000 f988 	bl	8001658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001348:	003b      	movs	r3, r7
 800134a:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <MX_ADC_Init+0xe4>)
 800134c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800134e:	003a      	movs	r2, r7
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_ADC_Init+0xd8>)
 8001352:	0011      	movs	r1, r2
 8001354:	0018      	movs	r0, r3
 8001356:	f001 f959 	bl	800260c <HAL_ADC_ConfigChannel>
 800135a:	1e03      	subs	r3, r0, #0
 800135c:	d001      	beq.n	8001362 <MX_ADC_Init+0xce>
  {
    Error_Handler();
 800135e:	f000 f97b 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b002      	add	sp, #8
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	200000f0 	.word	0x200000f0
 8001370:	40012400 	.word	0x40012400
 8001374:	28000400 	.word	0x28000400
 8001378:	2c000800 	.word	0x2c000800

0800137c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <MX_I2C1_Init+0x78>)
 8001382:	4a1d      	ldr	r2, [pc, #116]	; (80013f8 <MX_I2C1_Init+0x7c>)
 8001384:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <MX_I2C1_Init+0x78>)
 8001388:	22e1      	movs	r2, #225	; 0xe1
 800138a:	00d2      	lsls	r2, r2, #3
 800138c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <MX_I2C1_Init+0x78>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <MX_I2C1_Init+0x78>)
 8001396:	2201      	movs	r2, #1
 8001398:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <MX_I2C1_Init+0x78>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <MX_I2C1_Init+0x78>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <MX_I2C1_Init+0x78>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_I2C1_Init+0x78>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_I2C1_Init+0x78>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_I2C1_Init+0x78>)
 80013ba:	0018      	movs	r0, r3
 80013bc:	f001 fcdc 	bl	8002d78 <HAL_I2C_Init>
 80013c0:	1e03      	subs	r3, r0, #0
 80013c2:	d001      	beq.n	80013c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013c4:	f000 f948 	bl	8001658 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <MX_I2C1_Init+0x78>)
 80013ca:	2100      	movs	r1, #0
 80013cc:	0018      	movs	r0, r3
 80013ce:	f002 f9bf 	bl	8003750 <HAL_I2CEx_ConfigAnalogFilter>
 80013d2:	1e03      	subs	r3, r0, #0
 80013d4:	d001      	beq.n	80013da <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80013d6:	f000 f93f 	bl	8001658 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_I2C1_Init+0x78>)
 80013dc:	2100      	movs	r1, #0
 80013de:	0018      	movs	r0, r3
 80013e0:	f002 fa02 	bl	80037e8 <HAL_I2CEx_ConfigDigitalFilter>
 80013e4:	1e03      	subs	r3, r0, #0
 80013e6:	d001      	beq.n	80013ec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80013e8:	f000 f936 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	2000014c 	.word	0x2000014c
 80013f8:	40005400 	.word	0x40005400

080013fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b090      	sub	sp, #64	; 0x40
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001402:	232c      	movs	r3, #44	; 0x2c
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	0018      	movs	r0, r3
 8001408:	2314      	movs	r3, #20
 800140a:	001a      	movs	r2, r3
 800140c:	2100      	movs	r1, #0
 800140e:	f003 fee5 	bl	80051dc <memset>
  RTC_DateTypeDef sDate = {0};
 8001412:	2328      	movs	r3, #40	; 0x28
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800141a:	003b      	movs	r3, r7
 800141c:	0018      	movs	r0, r3
 800141e:	2328      	movs	r3, #40	; 0x28
 8001420:	001a      	movs	r2, r3
 8001422:	2100      	movs	r1, #0
 8001424:	f003 feda 	bl	80051dc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001428:	4b40      	ldr	r3, [pc, #256]	; (800152c <MX_RTC_Init+0x130>)
 800142a:	4a41      	ldr	r2, [pc, #260]	; (8001530 <MX_RTC_Init+0x134>)
 800142c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800142e:	4b3f      	ldr	r3, [pc, #252]	; (800152c <MX_RTC_Init+0x130>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001434:	4b3d      	ldr	r3, [pc, #244]	; (800152c <MX_RTC_Init+0x130>)
 8001436:	227f      	movs	r2, #127	; 0x7f
 8001438:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800143a:	4b3c      	ldr	r3, [pc, #240]	; (800152c <MX_RTC_Init+0x130>)
 800143c:	22ff      	movs	r2, #255	; 0xff
 800143e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001440:	4b3a      	ldr	r3, [pc, #232]	; (800152c <MX_RTC_Init+0x130>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001446:	4b39      	ldr	r3, [pc, #228]	; (800152c <MX_RTC_Init+0x130>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800144c:	4b37      	ldr	r3, [pc, #220]	; (800152c <MX_RTC_Init+0x130>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001452:	4b36      	ldr	r3, [pc, #216]	; (800152c <MX_RTC_Init+0x130>)
 8001454:	2200      	movs	r2, #0
 8001456:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001458:	4b34      	ldr	r3, [pc, #208]	; (800152c <MX_RTC_Init+0x130>)
 800145a:	0018      	movs	r0, r3
 800145c:	f003 f950 	bl	8004700 <HAL_RTC_Init>
 8001460:	1e03      	subs	r3, r0, #0
 8001462:	d001      	beq.n	8001468 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8001464:	f000 f8f8 	bl	8001658 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8001468:	212c      	movs	r1, #44	; 0x2c
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2210      	movs	r2, #16
 800146e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x35;
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2235      	movs	r2, #53	; 0x35
 8001474:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x30;
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2230      	movs	r2, #48	; 0x30
 800147a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800147c:	187b      	adds	r3, r7, r1
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001482:	187b      	adds	r3, r7, r1
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001488:	1879      	adds	r1, r7, r1
 800148a:	4b28      	ldr	r3, [pc, #160]	; (800152c <MX_RTC_Init+0x130>)
 800148c:	2201      	movs	r2, #1
 800148e:	0018      	movs	r0, r3
 8001490:	f003 f9d2 	bl	8004838 <HAL_RTC_SetTime>
 8001494:	1e03      	subs	r3, r0, #0
 8001496:	d001      	beq.n	800149c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8001498:	f000 f8de 	bl	8001658 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800149c:	2128      	movs	r1, #40	; 0x28
 800149e:	187b      	adds	r3, r7, r1
 80014a0:	2204      	movs	r2, #4
 80014a2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_MAY;
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	2205      	movs	r2, #5
 80014a8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x18;
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	2218      	movs	r2, #24
 80014ae:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x23;
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	2223      	movs	r2, #35	; 0x23
 80014b4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014b6:	1879      	adds	r1, r7, r1
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <MX_RTC_Init+0x130>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	0018      	movs	r0, r3
 80014be:	f003 fac3 	bl	8004a48 <HAL_RTC_SetDate>
 80014c2:	1e03      	subs	r3, r0, #0
 80014c4:	d001      	beq.n	80014ca <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80014c6:	f000 f8c7 	bl	8001658 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x10;
 80014ca:	003b      	movs	r3, r7
 80014cc:	2210      	movs	r2, #16
 80014ce:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x36;
 80014d0:	003b      	movs	r3, r7
 80014d2:	2236      	movs	r2, #54	; 0x36
 80014d4:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80014d6:	003b      	movs	r3, r7
 80014d8:	2200      	movs	r2, #0
 80014da:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80014dc:	003b      	movs	r3, r7
 80014de:	2200      	movs	r2, #0
 80014e0:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014e2:	003b      	movs	r3, r7
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014e8:	003b      	movs	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80014ee:	003b      	movs	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80014f4:	003b      	movs	r3, r7
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80014fa:	003b      	movs	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x16;
 8001500:	003b      	movs	r3, r7
 8001502:	2220      	movs	r2, #32
 8001504:	2116      	movs	r1, #22
 8001506:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001508:	003b      	movs	r3, r7
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	0052      	lsls	r2, r2, #1
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001510:	0039      	movs	r1, r7
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_RTC_Init+0x130>)
 8001514:	2201      	movs	r2, #1
 8001516:	0018      	movs	r0, r3
 8001518:	f003 fb7a 	bl	8004c10 <HAL_RTC_SetAlarm_IT>
 800151c:	1e03      	subs	r3, r0, #0
 800151e:	d001      	beq.n	8001524 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8001520:	f000 f89a 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001524:	46c0      	nop			; (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	b010      	add	sp, #64	; 0x40
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200001a0 	.word	0x200001a0
 8001530:	40002800 	.word	0x40002800

08001534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b08b      	sub	sp, #44	; 0x2c
 8001538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	2414      	movs	r4, #20
 800153c:	193b      	adds	r3, r7, r4
 800153e:	0018      	movs	r0, r3
 8001540:	2314      	movs	r3, #20
 8001542:	001a      	movs	r2, r3
 8001544:	2100      	movs	r1, #0
 8001546:	f003 fe49 	bl	80051dc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <MX_GPIO_Init+0x110>)
 800154c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800154e:	4b3d      	ldr	r3, [pc, #244]	; (8001644 <MX_GPIO_Init+0x110>)
 8001550:	2104      	movs	r1, #4
 8001552:	430a      	orrs	r2, r1
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <MX_GPIO_Init+0x110>)
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	2204      	movs	r2, #4
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001562:	4b38      	ldr	r3, [pc, #224]	; (8001644 <MX_GPIO_Init+0x110>)
 8001564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001566:	4b37      	ldr	r3, [pc, #220]	; (8001644 <MX_GPIO_Init+0x110>)
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	430a      	orrs	r2, r1
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
 800156e:	4b35      	ldr	r3, [pc, #212]	; (8001644 <MX_GPIO_Init+0x110>)
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <MX_GPIO_Init+0x110>)
 800157c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <MX_GPIO_Init+0x110>)
 8001580:	2101      	movs	r1, #1
 8001582:	430a      	orrs	r2, r1
 8001584:	62da      	str	r2, [r3, #44]	; 0x2c
 8001586:	4b2f      	ldr	r3, [pc, #188]	; (8001644 <MX_GPIO_Init+0x110>)
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	2201      	movs	r2, #1
 800158c:	4013      	ands	r3, r2
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <MX_GPIO_Init+0x110>)
 8001594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <MX_GPIO_Init+0x110>)
 8001598:	2102      	movs	r1, #2
 800159a:	430a      	orrs	r2, r1
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <MX_GPIO_Init+0x110>)
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	2202      	movs	r2, #2
 80015a4:	4013      	ands	r3, r2
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80015aa:	23a0      	movs	r3, #160	; 0xa0
 80015ac:	05db      	lsls	r3, r3, #23
 80015ae:	2200      	movs	r2, #0
 80015b0:	2120      	movs	r1, #32
 80015b2:	0018      	movs	r0, r3
 80015b4:	f001 fbc3 	bl	8002d3e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CENTER_PIN_Pin PC3 */
  GPIO_InitStruct.Pin = CENTER_PIN_Pin|GPIO_PIN_3;
 80015b8:	193b      	adds	r3, r7, r4
 80015ba:	4a23      	ldr	r2, [pc, #140]	; (8001648 <MX_GPIO_Init+0x114>)
 80015bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015be:	193b      	adds	r3, r7, r4
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	193b      	adds	r3, r7, r4
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ca:	193b      	adds	r3, r7, r4
 80015cc:	4a1f      	ldr	r2, [pc, #124]	; (800164c <MX_GPIO_Init+0x118>)
 80015ce:	0019      	movs	r1, r3
 80015d0:	0010      	movs	r0, r2
 80015d2:	f001 fa21 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin PA3 DOWN_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|GPIO_PIN_3|DOWN_Pin;
 80015d6:	193b      	adds	r3, r7, r4
 80015d8:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <MX_GPIO_Init+0x11c>)
 80015da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015dc:	193b      	adds	r3, r7, r4
 80015de:	2200      	movs	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	193b      	adds	r3, r7, r4
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	193a      	adds	r2, r7, r4
 80015ea:	23a0      	movs	r3, #160	; 0xa0
 80015ec:	05db      	lsls	r3, r3, #23
 80015ee:	0011      	movs	r1, r2
 80015f0:	0018      	movs	r0, r3
 80015f2:	f001 fa11 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015f6:	193b      	adds	r3, r7, r4
 80015f8:	2220      	movs	r2, #32
 80015fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	193b      	adds	r3, r7, r4
 80015fe:	2201      	movs	r2, #1
 8001600:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	193b      	adds	r3, r7, r4
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	193b      	adds	r3, r7, r4
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	193a      	adds	r2, r7, r4
 8001610:	23a0      	movs	r3, #160	; 0xa0
 8001612:	05db      	lsls	r3, r3, #23
 8001614:	0011      	movs	r1, r2
 8001616:	0018      	movs	r0, r3
 8001618:	f001 f9fe 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : UP_Pin */
  GPIO_InitStruct.Pin = UP_Pin;
 800161c:	193b      	adds	r3, r7, r4
 800161e:	2208      	movs	r2, #8
 8001620:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001622:	193b      	adds	r3, r7, r4
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	193b      	adds	r3, r7, r4
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(UP_GPIO_Port, &GPIO_InitStruct);
 800162e:	193b      	adds	r3, r7, r4
 8001630:	4a08      	ldr	r2, [pc, #32]	; (8001654 <MX_GPIO_Init+0x120>)
 8001632:	0019      	movs	r1, r3
 8001634:	0010      	movs	r0, r2
 8001636:	f001 f9ef 	bl	8002a18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b00b      	add	sp, #44	; 0x2c
 8001640:	bd90      	pop	{r4, r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	40021000 	.word	0x40021000
 8001648:	00002008 	.word	0x00002008
 800164c:	50000800 	.word	0x50000800
 8001650:	0000040c 	.word	0x0000040c
 8001654:	50000400 	.word	0x50000400

08001658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165c:	b672      	cpsid	i
}
 800165e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001660:	e7fe      	b.n	8001660 <Error_Handler+0x8>

08001662 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001662:	b590      	push	{r4, r7, lr}
 8001664:	b087      	sub	sp, #28
 8001666:	af00      	add	r7, sp, #0
 8001668:	0004      	movs	r4, r0
 800166a:	0008      	movs	r0, r1
 800166c:	60ba      	str	r2, [r7, #8]
 800166e:	0019      	movs	r1, r3
 8001670:	230e      	movs	r3, #14
 8001672:	18fb      	adds	r3, r7, r3
 8001674:	1c22      	adds	r2, r4, #0
 8001676:	801a      	strh	r2, [r3, #0]
 8001678:	230c      	movs	r3, #12
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	1c02      	adds	r2, r0, #0
 800167e:	801a      	strh	r2, [r3, #0]
 8001680:	1dbb      	adds	r3, r7, #6
 8001682:	1c0a      	adds	r2, r1, #0
 8001684:	801a      	strh	r2, [r3, #0]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001686:	1dbb      	adds	r3, r7, #6
 8001688:	2200      	movs	r2, #0
 800168a:	5e9b      	ldrsh	r3, [r3, r2]
 800168c:	3307      	adds	r3, #7
 800168e:	2b00      	cmp	r3, #0
 8001690:	da00      	bge.n	8001694 <SSD1306_DrawBitmap+0x32>
 8001692:	3307      	adds	r3, #7
 8001694:	10db      	asrs	r3, r3, #3
 8001696:	001a      	movs	r2, r3
 8001698:	2310      	movs	r3, #16
 800169a:	18fb      	adds	r3, r7, r3
 800169c:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 800169e:	2317      	movs	r3, #23
 80016a0:	18fb      	adds	r3, r7, r3
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]

    for(int16_t j=0; j<h; j++, y++)
 80016a6:	2314      	movs	r3, #20
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	2200      	movs	r2, #0
 80016ac:	801a      	strh	r2, [r3, #0]
 80016ae:	e068      	b.n	8001782 <SSD1306_DrawBitmap+0x120>
    {
        for(int16_t i=0; i<w; i++)
 80016b0:	2312      	movs	r3, #18
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	2200      	movs	r2, #0
 80016b6:	801a      	strh	r2, [r3, #0]
 80016b8:	e048      	b.n	800174c <SSD1306_DrawBitmap+0xea>
        {
            if(i & 7)
 80016ba:	2312      	movs	r3, #18
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	001a      	movs	r2, r3
 80016c2:	2307      	movs	r3, #7
 80016c4:	4013      	ands	r3, r2
 80016c6:	d006      	beq.n	80016d6 <SSD1306_DrawBitmap+0x74>
            {
               byte <<= 1;
 80016c8:	2317      	movs	r3, #23
 80016ca:	18fa      	adds	r2, r7, r3
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	18db      	adds	r3, r3, r3
 80016d2:	7013      	strb	r3, [r2, #0]
 80016d4:	e019      	b.n	800170a <SSD1306_DrawBitmap+0xa8>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80016d6:	2314      	movs	r3, #20
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	2200      	movs	r2, #0
 80016dc:	5e9b      	ldrsh	r3, [r3, r2]
 80016de:	2210      	movs	r2, #16
 80016e0:	18ba      	adds	r2, r7, r2
 80016e2:	2100      	movs	r1, #0
 80016e4:	5e52      	ldrsh	r2, [r2, r1]
 80016e6:	435a      	muls	r2, r3
 80016e8:	2312      	movs	r3, #18
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	2100      	movs	r1, #0
 80016ee:	5e5b      	ldrsh	r3, [r3, r1]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	da00      	bge.n	80016f6 <SSD1306_DrawBitmap+0x94>
 80016f4:	3307      	adds	r3, #7
 80016f6:	10db      	asrs	r3, r3, #3
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	18d3      	adds	r3, r2, r3
 80016fc:	001a      	movs	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	189a      	adds	r2, r3, r2
 8001702:	2317      	movs	r3, #23
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	7812      	ldrb	r2, [r2, #0]
 8001708:	701a      	strb	r2, [r3, #0]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800170a:	2317      	movs	r3, #23
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	b25b      	sxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	da11      	bge.n	800173a <SSD1306_DrawBitmap+0xd8>
 8001716:	230e      	movs	r3, #14
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	881a      	ldrh	r2, [r3, #0]
 800171c:	2312      	movs	r3, #18
 800171e:	18fb      	adds	r3, r7, r3
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	18d3      	adds	r3, r2, r3
 8001724:	b298      	uxth	r0, r3
 8001726:	230c      	movs	r3, #12
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	8819      	ldrh	r1, [r3, #0]
 800172c:	232c      	movs	r3, #44	; 0x2c
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	001a      	movs	r2, r3
 8001736:	f000 f945 	bl	80019c4 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800173a:	2112      	movs	r1, #18
 800173c:	187b      	adds	r3, r7, r1
 800173e:	2200      	movs	r2, #0
 8001740:	5e9b      	ldrsh	r3, [r3, r2]
 8001742:	b29b      	uxth	r3, r3
 8001744:	3301      	adds	r3, #1
 8001746:	b29a      	uxth	r2, r3
 8001748:	187b      	adds	r3, r7, r1
 800174a:	801a      	strh	r2, [r3, #0]
 800174c:	2312      	movs	r3, #18
 800174e:	18fa      	adds	r2, r7, r3
 8001750:	1dbb      	adds	r3, r7, #6
 8001752:	2100      	movs	r1, #0
 8001754:	5e52      	ldrsh	r2, [r2, r1]
 8001756:	2100      	movs	r1, #0
 8001758:	5e5b      	ldrsh	r3, [r3, r1]
 800175a:	429a      	cmp	r2, r3
 800175c:	dbad      	blt.n	80016ba <SSD1306_DrawBitmap+0x58>
    for(int16_t j=0; j<h; j++, y++)
 800175e:	2114      	movs	r1, #20
 8001760:	187b      	adds	r3, r7, r1
 8001762:	2200      	movs	r2, #0
 8001764:	5e9b      	ldrsh	r3, [r3, r2]
 8001766:	b29b      	uxth	r3, r3
 8001768:	3301      	adds	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	187b      	adds	r3, r7, r1
 800176e:	801a      	strh	r2, [r3, #0]
 8001770:	210c      	movs	r1, #12
 8001772:	187b      	adds	r3, r7, r1
 8001774:	2200      	movs	r2, #0
 8001776:	5e9b      	ldrsh	r3, [r3, r2]
 8001778:	b29b      	uxth	r3, r3
 800177a:	3301      	adds	r3, #1
 800177c:	b29a      	uxth	r2, r3
 800177e:	187b      	adds	r3, r7, r1
 8001780:	801a      	strh	r2, [r3, #0]
 8001782:	2314      	movs	r3, #20
 8001784:	18fa      	adds	r2, r7, r3
 8001786:	2328      	movs	r3, #40	; 0x28
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	2100      	movs	r1, #0
 800178c:	5e52      	ldrsh	r2, [r2, r1]
 800178e:	2100      	movs	r1, #0
 8001790:	5e5b      	ldrsh	r3, [r3, r1]
 8001792:	429a      	cmp	r2, r3
 8001794:	db8c      	blt.n	80016b0 <SSD1306_DrawBitmap+0x4e>
        }
    }
}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b007      	add	sp, #28
 800179e:	bd90      	pop	{r4, r7, pc}

080017a0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80017a6:	f000 fa45 	bl	8001c34 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80017aa:	4b5b      	ldr	r3, [pc, #364]	; (8001918 <SSD1306_Init+0x178>)
 80017ac:	485b      	ldr	r0, [pc, #364]	; (800191c <SSD1306_Init+0x17c>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	2178      	movs	r1, #120	; 0x78
 80017b2:	f001 fc7f 	bl	80030b4 <HAL_I2C_IsDeviceReady>
 80017b6:	1e03      	subs	r3, r0, #0
 80017b8:	d001      	beq.n	80017be <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e0a8      	b.n	8001910 <SSD1306_Init+0x170>
	}

	/* A little delay */
	uint32_t p = 2500;
 80017be:	4b58      	ldr	r3, [pc, #352]	; (8001920 <SSD1306_Init+0x180>)
 80017c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017c2:	e002      	b.n	80017ca <SSD1306_Init+0x2a>
		p--;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f9      	bne.n	80017c4 <SSD1306_Init+0x24>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80017d0:	22ae      	movs	r2, #174	; 0xae
 80017d2:	2100      	movs	r1, #0
 80017d4:	2078      	movs	r0, #120	; 0x78
 80017d6:	f000 faad 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80017da:	2220      	movs	r2, #32
 80017dc:	2100      	movs	r1, #0
 80017de:	2078      	movs	r0, #120	; 0x78
 80017e0:	f000 faa8 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80017e4:	2210      	movs	r2, #16
 80017e6:	2100      	movs	r1, #0
 80017e8:	2078      	movs	r0, #120	; 0x78
 80017ea:	f000 faa3 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80017ee:	22b0      	movs	r2, #176	; 0xb0
 80017f0:	2100      	movs	r1, #0
 80017f2:	2078      	movs	r0, #120	; 0x78
 80017f4:	f000 fa9e 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80017f8:	22c8      	movs	r2, #200	; 0xc8
 80017fa:	2100      	movs	r1, #0
 80017fc:	2078      	movs	r0, #120	; 0x78
 80017fe:	f000 fa99 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	2078      	movs	r0, #120	; 0x78
 8001808:	f000 fa94 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800180c:	2210      	movs	r2, #16
 800180e:	2100      	movs	r1, #0
 8001810:	2078      	movs	r0, #120	; 0x78
 8001812:	f000 fa8f 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001816:	2240      	movs	r2, #64	; 0x40
 8001818:	2100      	movs	r1, #0
 800181a:	2078      	movs	r0, #120	; 0x78
 800181c:	f000 fa8a 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001820:	2281      	movs	r2, #129	; 0x81
 8001822:	2100      	movs	r1, #0
 8001824:	2078      	movs	r0, #120	; 0x78
 8001826:	f000 fa85 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800182a:	22ff      	movs	r2, #255	; 0xff
 800182c:	2100      	movs	r1, #0
 800182e:	2078      	movs	r0, #120	; 0x78
 8001830:	f000 fa80 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001834:	22a1      	movs	r2, #161	; 0xa1
 8001836:	2100      	movs	r1, #0
 8001838:	2078      	movs	r0, #120	; 0x78
 800183a:	f000 fa7b 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800183e:	22a6      	movs	r2, #166	; 0xa6
 8001840:	2100      	movs	r1, #0
 8001842:	2078      	movs	r0, #120	; 0x78
 8001844:	f000 fa76 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001848:	22a8      	movs	r2, #168	; 0xa8
 800184a:	2100      	movs	r1, #0
 800184c:	2078      	movs	r0, #120	; 0x78
 800184e:	f000 fa71 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001852:	223f      	movs	r2, #63	; 0x3f
 8001854:	2100      	movs	r1, #0
 8001856:	2078      	movs	r0, #120	; 0x78
 8001858:	f000 fa6c 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800185c:	22a4      	movs	r2, #164	; 0xa4
 800185e:	2100      	movs	r1, #0
 8001860:	2078      	movs	r0, #120	; 0x78
 8001862:	f000 fa67 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001866:	22d3      	movs	r2, #211	; 0xd3
 8001868:	2100      	movs	r1, #0
 800186a:	2078      	movs	r0, #120	; 0x78
 800186c:	f000 fa62 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	2078      	movs	r0, #120	; 0x78
 8001876:	f000 fa5d 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800187a:	22d5      	movs	r2, #213	; 0xd5
 800187c:	2100      	movs	r1, #0
 800187e:	2078      	movs	r0, #120	; 0x78
 8001880:	f000 fa58 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001884:	22f0      	movs	r2, #240	; 0xf0
 8001886:	2100      	movs	r1, #0
 8001888:	2078      	movs	r0, #120	; 0x78
 800188a:	f000 fa53 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800188e:	22d9      	movs	r2, #217	; 0xd9
 8001890:	2100      	movs	r1, #0
 8001892:	2078      	movs	r0, #120	; 0x78
 8001894:	f000 fa4e 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001898:	2222      	movs	r2, #34	; 0x22
 800189a:	2100      	movs	r1, #0
 800189c:	2078      	movs	r0, #120	; 0x78
 800189e:	f000 fa49 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80018a2:	22da      	movs	r2, #218	; 0xda
 80018a4:	2100      	movs	r1, #0
 80018a6:	2078      	movs	r0, #120	; 0x78
 80018a8:	f000 fa44 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80018ac:	2212      	movs	r2, #18
 80018ae:	2100      	movs	r1, #0
 80018b0:	2078      	movs	r0, #120	; 0x78
 80018b2:	f000 fa3f 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80018b6:	22db      	movs	r2, #219	; 0xdb
 80018b8:	2100      	movs	r1, #0
 80018ba:	2078      	movs	r0, #120	; 0x78
 80018bc:	f000 fa3a 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80018c0:	2220      	movs	r2, #32
 80018c2:	2100      	movs	r1, #0
 80018c4:	2078      	movs	r0, #120	; 0x78
 80018c6:	f000 fa35 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80018ca:	228d      	movs	r2, #141	; 0x8d
 80018cc:	2100      	movs	r1, #0
 80018ce:	2078      	movs	r0, #120	; 0x78
 80018d0:	f000 fa30 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80018d4:	2214      	movs	r2, #20
 80018d6:	2100      	movs	r1, #0
 80018d8:	2078      	movs	r0, #120	; 0x78
 80018da:	f000 fa2b 	bl	8001d34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80018de:	22af      	movs	r2, #175	; 0xaf
 80018e0:	2100      	movs	r1, #0
 80018e2:	2078      	movs	r0, #120	; 0x78
 80018e4:	f000 fa26 	bl	8001d34 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80018e8:	222e      	movs	r2, #46	; 0x2e
 80018ea:	2100      	movs	r1, #0
 80018ec:	2078      	movs	r0, #120	; 0x78
 80018ee:	f000 fa21 	bl	8001d34 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f000 f84c 	bl	8001990 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80018f8:	f000 f816 	bl	8001928 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <SSD1306_Init+0x184>)
 80018fe:	2200      	movs	r2, #0
 8001900:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <SSD1306_Init+0x184>)
 8001904:	2200      	movs	r2, #0
 8001906:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <SSD1306_Init+0x184>)
 800190a:	2201      	movs	r2, #1
 800190c:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800190e:	2301      	movs	r3, #1
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b002      	add	sp, #8
 8001916:	bd80      	pop	{r7, pc}
 8001918:	00004e20 	.word	0x00004e20
 800191c:	2000014c 	.word	0x2000014c
 8001920:	000009c4 	.word	0x000009c4
 8001924:	200005f8 	.word	0x200005f8

08001928 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
 8001934:	e021      	b.n	800197a <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001936:	1dfb      	adds	r3, r7, #7
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	3b50      	subs	r3, #80	; 0x50
 800193c:	b2db      	uxtb	r3, r3
 800193e:	001a      	movs	r2, r3
 8001940:	2100      	movs	r1, #0
 8001942:	2078      	movs	r0, #120	; 0x78
 8001944:	f000 f9f6 	bl	8001d34 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	2078      	movs	r0, #120	; 0x78
 800194e:	f000 f9f1 	bl	8001d34 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001952:	2210      	movs	r2, #16
 8001954:	2100      	movs	r1, #0
 8001956:	2078      	movs	r0, #120	; 0x78
 8001958:	f000 f9ec 	bl	8001d34 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800195c:	1dfb      	adds	r3, r7, #7
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	01da      	lsls	r2, r3, #7
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <SSD1306_UpdateScreen+0x64>)
 8001964:	18d2      	adds	r2, r2, r3
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	2140      	movs	r1, #64	; 0x40
 800196a:	2078      	movs	r0, #120	; 0x78
 800196c:	f000 f976 	bl	8001c5c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001970:	1dfb      	adds	r3, r7, #7
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	1dfb      	adds	r3, r7, #7
 8001976:	3201      	adds	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b07      	cmp	r3, #7
 8001980:	d9d9      	bls.n	8001936 <SSD1306_UpdateScreen+0xe>
	}
}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b002      	add	sp, #8
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200001f8 	.word	0x200001f8

08001990 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	0002      	movs	r2, r0
 8001998:	1dfb      	adds	r3, r7, #7
 800199a:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800199c:	1dfb      	adds	r3, r7, #7
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <SSD1306_Fill+0x18>
 80019a4:	2300      	movs	r3, #0
 80019a6:	e000      	b.n	80019aa <SSD1306_Fill+0x1a>
 80019a8:	23ff      	movs	r3, #255	; 0xff
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	00d2      	lsls	r2, r2, #3
 80019ae:	4804      	ldr	r0, [pc, #16]	; (80019c0 <SSD1306_Fill+0x30>)
 80019b0:	0019      	movs	r1, r3
 80019b2:	f003 fc13 	bl	80051dc <memset>
}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b002      	add	sp, #8
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	200001f8 	.word	0x200001f8

080019c4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	0004      	movs	r4, r0
 80019cc:	0008      	movs	r0, r1
 80019ce:	0011      	movs	r1, r2
 80019d0:	1dbb      	adds	r3, r7, #6
 80019d2:	1c22      	adds	r2, r4, #0
 80019d4:	801a      	strh	r2, [r3, #0]
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	1c02      	adds	r2, r0, #0
 80019da:	801a      	strh	r2, [r3, #0]
 80019dc:	1cfb      	adds	r3, r7, #3
 80019de:	1c0a      	adds	r2, r1, #0
 80019e0:	701a      	strb	r2, [r3, #0]
	if (
 80019e2:	1dbb      	adds	r3, r7, #6
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	2b7f      	cmp	r3, #127	; 0x7f
 80019e8:	d852      	bhi.n	8001a90 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	2b3f      	cmp	r3, #63	; 0x3f
 80019f0:	d84e      	bhi.n	8001a90 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <SSD1306_DrawPixel+0xd4>)
 80019f4:	791b      	ldrb	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 80019fa:	1cfb      	adds	r3, r7, #3
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	425a      	negs	r2, r3
 8001a00:	4153      	adcs	r3, r2
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	1cfb      	adds	r3, r7, #3
 8001a06:	701a      	strb	r2, [r3, #0]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a08:	1cfb      	adds	r3, r7, #3
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d11e      	bne.n	8001a4e <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a10:	1dbb      	adds	r3, r7, #6
 8001a12:	881a      	ldrh	r2, [r3, #0]
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	08db      	lsrs	r3, r3, #3
 8001a1a:	b298      	uxth	r0, r3
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	01db      	lsls	r3, r3, #7
 8001a20:	18d3      	adds	r3, r2, r3
 8001a22:	4a1e      	ldr	r2, [pc, #120]	; (8001a9c <SSD1306_DrawPixel+0xd8>)
 8001a24:	5cd3      	ldrb	r3, [r2, r3]
 8001a26:	b25a      	sxtb	r2, r3
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	2107      	movs	r1, #7
 8001a2e:	400b      	ands	r3, r1
 8001a30:	2101      	movs	r1, #1
 8001a32:	4099      	lsls	r1, r3
 8001a34:	000b      	movs	r3, r1
 8001a36:	b25b      	sxtb	r3, r3
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	b259      	sxtb	r1, r3
 8001a3c:	1dbb      	adds	r3, r7, #6
 8001a3e:	881a      	ldrh	r2, [r3, #0]
 8001a40:	0003      	movs	r3, r0
 8001a42:	01db      	lsls	r3, r3, #7
 8001a44:	18d3      	adds	r3, r2, r3
 8001a46:	b2c9      	uxtb	r1, r1
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <SSD1306_DrawPixel+0xd8>)
 8001a4a:	54d1      	strb	r1, [r2, r3]
 8001a4c:	e021      	b.n	8001a92 <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a4e:	1dbb      	adds	r3, r7, #6
 8001a50:	881a      	ldrh	r2, [r3, #0]
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	08db      	lsrs	r3, r3, #3
 8001a58:	b298      	uxth	r0, r3
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	01db      	lsls	r3, r3, #7
 8001a5e:	18d3      	adds	r3, r2, r3
 8001a60:	4a0e      	ldr	r2, [pc, #56]	; (8001a9c <SSD1306_DrawPixel+0xd8>)
 8001a62:	5cd3      	ldrb	r3, [r2, r3]
 8001a64:	b25b      	sxtb	r3, r3
 8001a66:	1d3a      	adds	r2, r7, #4
 8001a68:	8812      	ldrh	r2, [r2, #0]
 8001a6a:	2107      	movs	r1, #7
 8001a6c:	400a      	ands	r2, r1
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4091      	lsls	r1, r2
 8001a72:	000a      	movs	r2, r1
 8001a74:	b252      	sxtb	r2, r2
 8001a76:	43d2      	mvns	r2, r2
 8001a78:	b252      	sxtb	r2, r2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	b259      	sxtb	r1, r3
 8001a7e:	1dbb      	adds	r3, r7, #6
 8001a80:	881a      	ldrh	r2, [r3, #0]
 8001a82:	0003      	movs	r3, r0
 8001a84:	01db      	lsls	r3, r3, #7
 8001a86:	18d3      	adds	r3, r2, r3
 8001a88:	b2c9      	uxtb	r1, r1
 8001a8a:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <SSD1306_DrawPixel+0xd8>)
 8001a8c:	54d1      	strb	r1, [r2, r3]
 8001a8e:	e000      	b.n	8001a92 <SSD1306_DrawPixel+0xce>
		return;
 8001a90:	46c0      	nop			; (mov r8, r8)
	}
}
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b003      	add	sp, #12
 8001a96:	bd90      	pop	{r4, r7, pc}
 8001a98:	200005f8 	.word	0x200005f8
 8001a9c:	200001f8 	.word	0x200001f8

08001aa0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	1dbb      	adds	r3, r7, #6
 8001aaa:	801a      	strh	r2, [r3, #0]
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	1c0a      	adds	r2, r1, #0
 8001ab0:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <SSD1306_GotoXY+0x2c>)
 8001ab4:	1dba      	adds	r2, r7, #6
 8001ab6:	8812      	ldrh	r2, [r2, #0]
 8001ab8:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001aba:	4b04      	ldr	r3, [pc, #16]	; (8001acc <SSD1306_GotoXY+0x2c>)
 8001abc:	1d3a      	adds	r2, r7, #4
 8001abe:	8812      	ldrh	r2, [r2, #0]
 8001ac0:	805a      	strh	r2, [r3, #2]
}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b002      	add	sp, #8
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	200005f8 	.word	0x200005f8

08001ad0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6039      	str	r1, [r7, #0]
 8001ad8:	0011      	movs	r1, r2
 8001ada:	1dfb      	adds	r3, r7, #7
 8001adc:	1c02      	adds	r2, r0, #0
 8001ade:	701a      	strb	r2, [r3, #0]
 8001ae0:	1dbb      	adds	r3, r7, #6
 8001ae2:	1c0a      	adds	r2, r1, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ae6:	4b3a      	ldr	r3, [pc, #232]	; (8001bd0 <SSD1306_Putc+0x100>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	001a      	movs	r2, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	18d3      	adds	r3, r2, r3
	if (
 8001af2:	2b7f      	cmp	r3, #127	; 0x7f
 8001af4:	dc07      	bgt.n	8001b06 <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001af6:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <SSD1306_Putc+0x100>)
 8001af8:	885b      	ldrh	r3, [r3, #2]
 8001afa:	001a      	movs	r2, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	785b      	ldrb	r3, [r3, #1]
 8001b00:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b02:	2b3f      	cmp	r3, #63	; 0x3f
 8001b04:	dd01      	ble.n	8001b0a <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e05e      	b.n	8001bc8 <SSD1306_Putc+0xf8>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e04a      	b.n	8001ba6 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	1dfb      	adds	r3, r7, #7
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	3b20      	subs	r3, #32
 8001b1a:	6839      	ldr	r1, [r7, #0]
 8001b1c:	7849      	ldrb	r1, [r1, #1]
 8001b1e:	434b      	muls	r3, r1
 8001b20:	0019      	movs	r1, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	18cb      	adds	r3, r1, r3
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	18d3      	adds	r3, r2, r3
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	e02f      	b.n	8001b94 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d011      	beq.n	8001b66 <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <SSD1306_Putc+0x100>)
 8001b44:	881a      	ldrh	r2, [r3, #0]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	18d3      	adds	r3, r2, r3
 8001b4c:	b298      	uxth	r0, r3
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <SSD1306_Putc+0x100>)
 8001b50:	885a      	ldrh	r2, [r3, #2]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	18d3      	adds	r3, r2, r3
 8001b58:	b299      	uxth	r1, r3
 8001b5a:	1dbb      	adds	r3, r7, #6
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	001a      	movs	r2, r3
 8001b60:	f7ff ff30 	bl	80019c4 <SSD1306_DrawPixel>
 8001b64:	e013      	b.n	8001b8e <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <SSD1306_Putc+0x100>)
 8001b68:	881a      	ldrh	r2, [r3, #0]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	18d3      	adds	r3, r2, r3
 8001b70:	b298      	uxth	r0, r3
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <SSD1306_Putc+0x100>)
 8001b74:	885a      	ldrh	r2, [r3, #2]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	18d3      	adds	r3, r2, r3
 8001b7c:	b299      	uxth	r1, r3
 8001b7e:	1dbb      	adds	r3, r7, #6
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	425a      	negs	r2, r3
 8001b84:	4153      	adcs	r3, r2
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	001a      	movs	r2, r3
 8001b8a:	f7ff ff1b 	bl	80019c4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	3301      	adds	r3, #1
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	001a      	movs	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d3c9      	bcc.n	8001b34 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	785b      	ldrb	r3, [r3, #1]
 8001baa:	001a      	movs	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d3ae      	bcc.n	8001b10 <SSD1306_Putc+0x40>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <SSD1306_Putc+0x100>)
 8001bb4:	881a      	ldrh	r2, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	18d3      	adds	r3, r2, r3
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <SSD1306_Putc+0x100>)
 8001bc2:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001bc4:	1dfb      	adds	r3, r7, #7
 8001bc6:	781b      	ldrb	r3, [r3, #0]
}
 8001bc8:	0018      	movs	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b006      	add	sp, #24
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200005f8 	.word	0x200005f8

08001bd4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	1dfb      	adds	r3, r7, #7
 8001be0:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8001be2:	e013      	b.n	8001c0c <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	7818      	ldrb	r0, [r3, #0]
 8001be8:	1dfb      	adds	r3, r7, #7
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	0019      	movs	r1, r3
 8001bf0:	f7ff ff6e 	bl	8001ad0 <SSD1306_Putc>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	001a      	movs	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d002      	beq.n	8001c06 <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	e008      	b.n	8001c18 <SSD1306_Puts+0x44>
		}

		/* Increase string pointer */
		str++;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e7      	bne.n	8001be4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	781b      	ldrb	r3, [r3, #0]
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b004      	add	sp, #16
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff feb3 	bl	8001990 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001c2a:	f7ff fe7d 	bl	8001928 <SSD1306_UpdateScreen>
}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <ssd1306_I2C_Init+0x24>)
 8001c3c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c3e:	e002      	b.n	8001c46 <ssd1306_I2C_Init+0x12>
		p--;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f9      	bne.n	8001c40 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b002      	add	sp, #8
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	0003d090 	.word	0x0003d090

08001c5c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001c5c:	b5b0      	push	{r4, r5, r7, lr}
 8001c5e:	b0c6      	sub	sp, #280	; 0x118
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	0004      	movs	r4, r0
 8001c64:	0008      	movs	r0, r1
 8001c66:	603a      	str	r2, [r7, #0]
 8001c68:	0019      	movs	r1, r3
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <ssd1306_I2C_WriteMulti+0xc4>)
 8001c6c:	2588      	movs	r5, #136	; 0x88
 8001c6e:	006d      	lsls	r5, r5, #1
 8001c70:	195b      	adds	r3, r3, r5
 8001c72:	19db      	adds	r3, r3, r7
 8001c74:	1c22      	adds	r2, r4, #0
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <ssd1306_I2C_WriteMulti+0xc8>)
 8001c7a:	002c      	movs	r4, r5
 8001c7c:	191b      	adds	r3, r3, r4
 8001c7e:	19db      	adds	r3, r3, r7
 8001c80:	1c02      	adds	r2, r0, #0
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <ssd1306_I2C_WriteMulti+0xcc>)
 8001c86:	0020      	movs	r0, r4
 8001c88:	181b      	adds	r3, r3, r0
 8001c8a:	19db      	adds	r3, r3, r7
 8001c8c:	1c0a      	adds	r2, r1, #0
 8001c8e:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001c90:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <ssd1306_I2C_WriteMulti+0xd0>)
 8001c92:	181b      	adds	r3, r3, r0
 8001c94:	19db      	adds	r3, r3, r7
 8001c96:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <ssd1306_I2C_WriteMulti+0xc8>)
 8001c98:	1812      	adds	r2, r2, r0
 8001c9a:	19d2      	adds	r2, r2, r7
 8001c9c:	7812      	ldrb	r2, [r2, #0]
 8001c9e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001ca0:	2310      	movs	r3, #16
 8001ca2:	33ff      	adds	r3, #255	; 0xff
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	e014      	b.n	8001cd6 <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8001cac:	2010      	movs	r0, #16
 8001cae:	30ff      	adds	r0, #255	; 0xff
 8001cb0:	183b      	adds	r3, r7, r0
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	18d2      	adds	r2, r2, r3
 8001cb8:	183b      	adds	r3, r7, r0
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	7811      	ldrb	r1, [r2, #0]
 8001cc0:	4a1a      	ldr	r2, [pc, #104]	; (8001d2c <ssd1306_I2C_WriteMulti+0xd0>)
 8001cc2:	2488      	movs	r4, #136	; 0x88
 8001cc4:	0064      	lsls	r4, r4, #1
 8001cc6:	1912      	adds	r2, r2, r4
 8001cc8:	19d2      	adds	r2, r2, r7
 8001cca:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001ccc:	183b      	adds	r3, r7, r0
 8001cce:	781a      	ldrb	r2, [r3, #0]
 8001cd0:	183b      	adds	r3, r7, r0
 8001cd2:	3201      	adds	r2, #1
 8001cd4:	701a      	strb	r2, [r3, #0]
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	33ff      	adds	r3, #255	; 0xff
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <ssd1306_I2C_WriteMulti+0xcc>)
 8001ce2:	2188      	movs	r1, #136	; 0x88
 8001ce4:	0049      	lsls	r1, r1, #1
 8001ce6:	1852      	adds	r2, r2, r1
 8001ce8:	19d2      	adds	r2, r2, r7
 8001cea:	8812      	ldrh	r2, [r2, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d8dd      	bhi.n	8001cac <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <ssd1306_I2C_WriteMulti+0xc4>)
 8001cf2:	000a      	movs	r2, r1
 8001cf4:	189b      	adds	r3, r3, r2
 8001cf6:	19db      	adds	r3, r3, r7
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	b299      	uxth	r1, r3
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <ssd1306_I2C_WriteMulti+0xcc>)
 8001cfe:	189b      	adds	r3, r3, r2
 8001d00:	19db      	adds	r3, r3, r7
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	3301      	adds	r3, #1
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	220c      	movs	r2, #12
 8001d0a:	18ba      	adds	r2, r7, r2
 8001d0c:	4808      	ldr	r0, [pc, #32]	; (8001d30 <ssd1306_I2C_WriteMulti+0xd4>)
 8001d0e:	240a      	movs	r4, #10
 8001d10:	9400      	str	r4, [sp, #0]
 8001d12:	f001 f8c7 	bl	8002ea4 <HAL_I2C_Master_Transmit>
}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b044      	add	sp, #272	; 0x110
 8001d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	fffffef7 	.word	0xfffffef7
 8001d24:	fffffef6 	.word	0xfffffef6
 8001d28:	fffffef4 	.word	0xfffffef4
 8001d2c:	fffffefc 	.word	0xfffffefc
 8001d30:	2000014c 	.word	0x2000014c

08001d34 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	0004      	movs	r4, r0
 8001d3c:	0008      	movs	r0, r1
 8001d3e:	0011      	movs	r1, r2
 8001d40:	1dfb      	adds	r3, r7, #7
 8001d42:	1c22      	adds	r2, r4, #0
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	1dbb      	adds	r3, r7, #6
 8001d48:	1c02      	adds	r2, r0, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	1d7b      	adds	r3, r7, #5
 8001d4e:	1c0a      	adds	r2, r1, #0
 8001d50:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8001d52:	200c      	movs	r0, #12
 8001d54:	183b      	adds	r3, r7, r0
 8001d56:	1dba      	adds	r2, r7, #6
 8001d58:	7812      	ldrb	r2, [r2, #0]
 8001d5a:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8001d5c:	183b      	adds	r3, r7, r0
 8001d5e:	1d7a      	adds	r2, r7, #5
 8001d60:	7812      	ldrb	r2, [r2, #0]
 8001d62:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001d64:	1dfb      	adds	r3, r7, #7
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b299      	uxth	r1, r3
 8001d6a:	183a      	adds	r2, r7, r0
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <ssd1306_I2C_Write+0x4c>)
 8001d6e:	230a      	movs	r3, #10
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2302      	movs	r3, #2
 8001d74:	f001 f896 	bl	8002ea4 <HAL_I2C_Master_Transmit>
}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b005      	add	sp, #20
 8001d7e:	bd90      	pop	{r4, r7, pc}
 8001d80:	2000014c 	.word	0x2000014c

08001d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <HAL_MspInit+0x24>)
 8001d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_MspInit+0x24>)
 8001d8e:	2101      	movs	r1, #1
 8001d90:	430a      	orrs	r2, r1
 8001d92:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <HAL_MspInit+0x24>)
 8001d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_MspInit+0x24>)
 8001d9a:	2180      	movs	r1, #128	; 0x80
 8001d9c:	0549      	lsls	r1, r1, #21
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000

08001dac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	240c      	movs	r4, #12
 8001db6:	193b      	adds	r3, r7, r4
 8001db8:	0018      	movs	r0, r3
 8001dba:	2314      	movs	r3, #20
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	f003 fa0c 	bl	80051dc <memset>
  if(hadc->Instance==ADC1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_ADC_MspInit+0x70>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d121      	bne.n	8001e12 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <HAL_ADC_MspInit+0x74>)
 8001dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_ADC_MspInit+0x74>)
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	0089      	lsls	r1, r1, #2
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_ADC_MspInit+0x74>)
 8001dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_ADC_MspInit+0x74>)
 8001de2:	2104      	movs	r1, #4
 8001de4:	430a      	orrs	r2, r1
 8001de6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_ADC_MspInit+0x74>)
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	2204      	movs	r2, #4
 8001dee:	4013      	ands	r3, r2
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC0     ------> ADC_IN10
    PC1     ------> ADC_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001df4:	193b      	adds	r3, r7, r4
 8001df6:	2203      	movs	r2, #3
 8001df8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dfa:	193b      	adds	r3, r7, r4
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	193b      	adds	r3, r7, r4
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e06:	193b      	adds	r3, r7, r4
 8001e08:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <HAL_ADC_MspInit+0x78>)
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	0010      	movs	r0, r2
 8001e0e:	f000 fe03 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b009      	add	sp, #36	; 0x24
 8001e18:	bd90      	pop	{r4, r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	40012400 	.word	0x40012400
 8001e20:	40021000 	.word	0x40021000
 8001e24:	50000800 	.word	0x50000800

08001e28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	240c      	movs	r4, #12
 8001e32:	193b      	adds	r3, r7, r4
 8001e34:	0018      	movs	r0, r3
 8001e36:	2314      	movs	r3, #20
 8001e38:	001a      	movs	r2, r3
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	f003 f9ce 	bl	80051dc <memset>
  if(hi2c->Instance==I2C1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <HAL_I2C_MspInit+0x7c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d128      	bne.n	8001e9c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_I2C_MspInit+0x80>)
 8001e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_I2C_MspInit+0x80>)
 8001e50:	2102      	movs	r1, #2
 8001e52:	430a      	orrs	r2, r1
 8001e54:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e56:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <HAL_I2C_MspInit+0x80>)
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e62:	0021      	movs	r1, r4
 8001e64:	187b      	adds	r3, r7, r1
 8001e66:	22c0      	movs	r2, #192	; 0xc0
 8001e68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e6a:	187b      	adds	r3, r7, r1
 8001e6c:	2212      	movs	r2, #18
 8001e6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	2201      	movs	r2, #1
 8001e80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e82:	187b      	adds	r3, r7, r1
 8001e84:	4a09      	ldr	r2, [pc, #36]	; (8001eac <HAL_I2C_MspInit+0x84>)
 8001e86:	0019      	movs	r1, r3
 8001e88:	0010      	movs	r0, r2
 8001e8a:	f000 fdc5 	bl	8002a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_I2C_MspInit+0x80>)
 8001e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_I2C_MspInit+0x80>)
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	0389      	lsls	r1, r1, #14
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e9c:	46c0      	nop			; (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b009      	add	sp, #36	; 0x24
 8001ea2:	bd90      	pop	{r4, r7, pc}
 8001ea4:	40005400 	.word	0x40005400
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	50000400 	.word	0x50000400

08001eb0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_RTC_MspInit+0x38>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d10e      	bne.n	8001ee0 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RTC_MspInit+0x3c>)
 8001ec4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_RTC_MspInit+0x3c>)
 8001ec8:	2180      	movs	r1, #128	; 0x80
 8001eca:	02c9      	lsls	r1, r1, #11
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	2002      	movs	r0, #2
 8001ed6:	f000 fd6d 	bl	80029b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001eda:	2002      	movs	r0, #2
 8001edc:	f000 fd7f 	bl	80029de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b002      	add	sp, #8
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40002800 	.word	0x40002800
 8001eec:	40021000 	.word	0x40021000

08001ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <NMI_Handler+0x4>

08001ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efa:	e7fe      	b.n	8001efa <HardFault_Handler+0x4>

08001efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f00:	46c0      	nop			; (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f14:	f000 f8ca 	bl	80020ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <RTC_IRQHandler+0x14>)
 8001f26:	0018      	movs	r0, r3
 8001f28:	f002 ffd4 	bl	8004ed4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001f2c:	46c0      	nop			; (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	200001a0 	.word	0x200001a0

08001f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <_sbrk+0x5c>)
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <_sbrk+0x60>)
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <_sbrk+0x64>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <_sbrk+0x68>)
 8001f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	18d3      	adds	r3, r2, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d207      	bcs.n	8001f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f68:	f003 f90e 	bl	8005188 <__errno>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	220c      	movs	r2, #12
 8001f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f72:	2301      	movs	r3, #1
 8001f74:	425b      	negs	r3, r3
 8001f76:	e009      	b.n	8001f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <_sbrk+0x64>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	18d2      	adds	r2, r2, r3
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <_sbrk+0x64>)
 8001f88:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b006      	add	sp, #24
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20002000 	.word	0x20002000
 8001f98:	00000400 	.word	0x00000400
 8001f9c:	20000600 	.word	0x20000600
 8001fa0:	20000618 	.word	0x20000618

08001fa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001fb0:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fb2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fb4:	f7ff fff6 	bl	8001fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb8:	480c      	ldr	r0, [pc, #48]	; (8001fec <LoopForever+0x6>)
  ldr r1, =_edata
 8001fba:	490d      	ldr	r1, [pc, #52]	; (8001ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <LoopForever+0xe>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc0:	e002      	b.n	8001fc8 <LoopCopyDataInit>

08001fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc6:	3304      	adds	r3, #4

08001fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fcc:	d3f9      	bcc.n	8001fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fd0:	4c0a      	ldr	r4, [pc, #40]	; (8001ffc <LoopForever+0x16>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd4:	e001      	b.n	8001fda <LoopFillZerobss>

08001fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd8:	3204      	adds	r2, #4

08001fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fdc:	d3fb      	bcc.n	8001fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fde:	f003 f8d9 	bl	8005194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fe2:	f7ff f87b 	bl	80010dc <main>

08001fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fe6:	e7fe      	b.n	8001fe6 <LoopForever>
  ldr   r0, =_estack
 8001fe8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff0:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001ff4:	080075d0 	.word	0x080075d0
  ldr r2, =_sbss
 8001ff8:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001ffc:	20000618 	.word	0x20000618

08002000 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002000:	e7fe      	b.n	8002000 <ADC1_COMP_IRQHandler>
	...

08002004 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_Init+0x3c>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_Init+0x3c>)
 8002016:	2140      	movs	r1, #64	; 0x40
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800201c:	2003      	movs	r0, #3
 800201e:	f000 f811 	bl	8002044 <HAL_InitTick>
 8002022:	1e03      	subs	r3, r0, #0
 8002024:	d003      	beq.n	800202e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002026:	1dfb      	adds	r3, r7, #7
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	e001      	b.n	8002032 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800202e:	f7ff fea9 	bl	8001d84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	781b      	ldrb	r3, [r3, #0]
}
 8002036:	0018      	movs	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	b002      	add	sp, #8
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	40022000 	.word	0x40022000

08002044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <HAL_InitTick+0x5c>)
 800204e:	681c      	ldr	r4, [r3, #0]
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <HAL_InitTick+0x60>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	0019      	movs	r1, r3
 8002056:	23fa      	movs	r3, #250	; 0xfa
 8002058:	0098      	lsls	r0, r3, #2
 800205a:	f7fe f85f 	bl	800011c <__udivsi3>
 800205e:	0003      	movs	r3, r0
 8002060:	0019      	movs	r1, r3
 8002062:	0020      	movs	r0, r4
 8002064:	f7fe f85a 	bl	800011c <__udivsi3>
 8002068:	0003      	movs	r3, r0
 800206a:	0018      	movs	r0, r3
 800206c:	f000 fcc7 	bl	80029fe <HAL_SYSTICK_Config>
 8002070:	1e03      	subs	r3, r0, #0
 8002072:	d001      	beq.n	8002078 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e00f      	b.n	8002098 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b03      	cmp	r3, #3
 800207c:	d80b      	bhi.n	8002096 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	2301      	movs	r3, #1
 8002082:	425b      	negs	r3, r3
 8002084:	2200      	movs	r2, #0
 8002086:	0018      	movs	r0, r3
 8002088:	f000 fc94 	bl	80029b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_InitTick+0x64>)
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b003      	add	sp, #12
 800209e:	bd90      	pop	{r4, r7, pc}
 80020a0:	20000064 	.word	0x20000064
 80020a4:	2000006c 	.word	0x2000006c
 80020a8:	20000068 	.word	0x20000068

080020ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_IncTick+0x1c>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	001a      	movs	r2, r3
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_IncTick+0x20>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	18d2      	adds	r2, r2, r3
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_IncTick+0x20>)
 80020be:	601a      	str	r2, [r3, #0]
}
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	2000006c 	.word	0x2000006c
 80020cc:	20000604 	.word	0x20000604

080020d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  return uwTick;
 80020d4:	4b02      	ldr	r3, [pc, #8]	; (80020e0 <HAL_GetTick+0x10>)
 80020d6:	681b      	ldr	r3, [r3, #0]
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	20000604 	.word	0x20000604

080020e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020ec:	f7ff fff0 	bl	80020d0 <HAL_GetTick>
 80020f0:	0003      	movs	r3, r0
 80020f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3301      	adds	r3, #1
 80020fc:	d005      	beq.n	800210a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_Delay+0x44>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	001a      	movs	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	189b      	adds	r3, r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	f7ff ffe0 	bl	80020d0 <HAL_GetTick>
 8002110:	0002      	movs	r2, r0
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	429a      	cmp	r2, r3
 800211a:	d8f7      	bhi.n	800210c <HAL_Delay+0x28>
  {
  }
}
 800211c:	46c0      	nop			; (mov r8, r8)
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	46bd      	mov	sp, r7
 8002122:	b004      	add	sp, #16
 8002124:	bd80      	pop	{r7, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	2000006c 	.word	0x2000006c

0800212c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e159      	b.n	80023f2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10a      	bne.n	800215c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2250      	movs	r2, #80	; 0x50
 8002150:	2100      	movs	r1, #0
 8002152:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	0018      	movs	r0, r3
 8002158:	f7ff fe28 	bl	8001dac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	2210      	movs	r2, #16
 8002162:	4013      	ands	r3, r2
 8002164:	2b10      	cmp	r3, #16
 8002166:	d005      	beq.n	8002174 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2204      	movs	r2, #4
 8002170:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002172:	d00b      	beq.n	800218c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002178:	2210      	movs	r2, #16
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2250      	movs	r2, #80	; 0x50
 8002184:	2100      	movs	r1, #0
 8002186:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e132      	b.n	80023f2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002190:	4a9a      	ldr	r2, [pc, #616]	; (80023fc <HAL_ADC_Init+0x2d0>)
 8002192:	4013      	ands	r3, r2
 8002194:	2202      	movs	r2, #2
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2203      	movs	r2, #3
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d108      	bne.n	80021bc <HAL_ADC_Init+0x90>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2201      	movs	r2, #1
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_Init+0x90>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <HAL_ADC_Init+0x92>
 80021bc:	2300      	movs	r3, #0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d149      	bne.n	8002256 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	23c0      	movs	r3, #192	; 0xc0
 80021c8:	061b      	lsls	r3, r3, #24
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d00b      	beq.n	80021e6 <HAL_ADC_Init+0xba>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	05db      	lsls	r3, r3, #23
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d005      	beq.n	80021e6 <HAL_ADC_Init+0xba>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	061b      	lsls	r3, r3, #24
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d111      	bne.n	800220a <HAL_ADC_Init+0xde>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0092      	lsls	r2, r2, #2
 80021f2:	0892      	lsrs	r2, r2, #2
 80021f4:	611a      	str	r2, [r3, #16]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6919      	ldr	r1, [r3, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	611a      	str	r2, [r3, #16]
 8002208:	e014      	b.n	8002234 <HAL_ADC_Init+0x108>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	0092      	lsls	r2, r2, #2
 8002216:	0892      	lsrs	r2, r2, #2
 8002218:	611a      	str	r2, [r3, #16]
 800221a:	4b79      	ldr	r3, [pc, #484]	; (8002400 <HAL_ADC_Init+0x2d4>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b78      	ldr	r3, [pc, #480]	; (8002400 <HAL_ADC_Init+0x2d4>)
 8002220:	4978      	ldr	r1, [pc, #480]	; (8002404 <HAL_ADC_Init+0x2d8>)
 8002222:	400a      	ands	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	4b76      	ldr	r3, [pc, #472]	; (8002400 <HAL_ADC_Init+0x2d4>)
 8002228:	6819      	ldr	r1, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4b74      	ldr	r3, [pc, #464]	; (8002400 <HAL_ADC_Init+0x2d4>)
 8002230:	430a      	orrs	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2118      	movs	r1, #24
 8002240:	438a      	bics	r2, r1
 8002242:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68d9      	ldr	r1, [r3, #12]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002256:	4b6a      	ldr	r3, [pc, #424]	; (8002400 <HAL_ADC_Init+0x2d4>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	4b69      	ldr	r3, [pc, #420]	; (8002400 <HAL_ADC_Init+0x2d4>)
 800225c:	496a      	ldr	r1, [pc, #424]	; (8002408 <HAL_ADC_Init+0x2dc>)
 800225e:	400a      	ands	r2, r1
 8002260:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8002262:	4b67      	ldr	r3, [pc, #412]	; (8002400 <HAL_ADC_Init+0x2d4>)
 8002264:	6819      	ldr	r1, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226a:	065a      	lsls	r2, r3, #25
 800226c:	4b64      	ldr	r3, [pc, #400]	; (8002400 <HAL_ADC_Init+0x2d4>)
 800226e:	430a      	orrs	r2, r1
 8002270:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	055b      	lsls	r3, r3, #21
 800227c:	4013      	ands	r3, r2
 800227e:	d108      	bne.n	8002292 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	0549      	lsls	r1, r1, #21
 800228e:	430a      	orrs	r2, r1
 8002290:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	495b      	ldr	r1, [pc, #364]	; (800240c <HAL_ADC_Init+0x2e0>)
 800229e:	400a      	ands	r2, r1
 80022a0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68d9      	ldr	r1, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_Init+0x18c>
 80022b4:	2304      	movs	r3, #4
 80022b6:	e000      	b.n	80022ba <HAL_ADC_Init+0x18e>
 80022b8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80022ba:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2020      	movs	r0, #32
 80022c0:	5c1b      	ldrb	r3, [r3, r0]
 80022c2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80022c4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	202c      	movs	r0, #44	; 0x2c
 80022ca:	5c1b      	ldrb	r3, [r3, r0]
 80022cc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80022ce:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80022d4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80022dc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80022e4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f2:	23c2      	movs	r3, #194	; 0xc2
 80022f4:	33ff      	adds	r3, #255	; 0xff
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d00b      	beq.n	8002312 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68d9      	ldr	r1, [r3, #12]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2221      	movs	r2, #33	; 0x21
 8002316:	5c9b      	ldrb	r3, [r3, r2]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d11a      	bne.n	8002352 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	5c9b      	ldrb	r3, [r3, r2]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	0249      	lsls	r1, r1, #9
 8002334:	430a      	orrs	r2, r1
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	e00b      	b.n	8002352 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233e:	2220      	movs	r2, #32
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	2201      	movs	r2, #1
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d11f      	bne.n	800239a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	492a      	ldr	r1, [pc, #168]	; (8002410 <HAL_ADC_Init+0x2e4>)
 8002366:	400a      	ands	r2, r1
 8002368:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6919      	ldr	r1, [r3, #16]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002378:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800237e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2101      	movs	r1, #1
 8002394:	430a      	orrs	r2, r1
 8002396:	611a      	str	r2, [r3, #16]
 8002398:	e00e      	b.n	80023b8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2201      	movs	r2, #1
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d107      	bne.n	80023b8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2101      	movs	r1, #1
 80023b4:	438a      	bics	r2, r1
 80023b6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2107      	movs	r1, #7
 80023c4:	438a      	bics	r2, r1
 80023c6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6959      	ldr	r1, [r3, #20]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	2203      	movs	r2, #3
 80023e6:	4393      	bics	r3, r2
 80023e8:	2201      	movs	r2, #1
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	0018      	movs	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b002      	add	sp, #8
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	fffffefd 	.word	0xfffffefd
 8002400:	40012708 	.word	0x40012708
 8002404:	ffc3ffff 	.word	0xffc3ffff
 8002408:	fdffffff 	.word	0xfdffffff
 800240c:	fffe0219 	.word	0xfffe0219
 8002410:	fffffc03 	.word	0xfffffc03

08002414 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800241c:	230f      	movs	r3, #15
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2204      	movs	r2, #4
 800242c:	4013      	ands	r3, r2
 800242e:	d138      	bne.n	80024a2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2250      	movs	r2, #80	; 0x50
 8002434:	5c9b      	ldrb	r3, [r3, r2]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_ADC_Start+0x2a>
 800243a:	2302      	movs	r3, #2
 800243c:	e038      	b.n	80024b0 <HAL_ADC_Start+0x9c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2250      	movs	r2, #80	; 0x50
 8002442:	2101      	movs	r1, #1
 8002444:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d007      	beq.n	800245e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800244e:	230f      	movs	r3, #15
 8002450:	18fc      	adds	r4, r7, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f000 f979 	bl	800274c <ADC_Enable>
 800245a:	0003      	movs	r3, r0
 800245c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800245e:	230f      	movs	r3, #15
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d120      	bne.n	80024aa <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <HAL_ADC_Start+0xa4>)
 800246e:	4013      	ands	r3, r2
 8002470:	2280      	movs	r2, #128	; 0x80
 8002472:	0052      	lsls	r2, r2, #1
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2250      	movs	r2, #80	; 0x50
 8002484:	2100      	movs	r1, #0
 8002486:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	221c      	movs	r2, #28
 800248e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2104      	movs	r1, #4
 800249c:	430a      	orrs	r2, r1
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	e003      	b.n	80024aa <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024a2:	230f      	movs	r3, #15
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	2202      	movs	r2, #2
 80024a8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80024aa:	230f      	movs	r3, #15
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	781b      	ldrb	r3, [r3, #0]
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b005      	add	sp, #20
 80024b6:	bd90      	pop	{r4, r7, pc}
 80024b8:	fffff0fe 	.word	0xfffff0fe

080024bc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d102      	bne.n	80024dc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80024d6:	2308      	movs	r3, #8
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	e014      	b.n	8002506 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d10b      	bne.n	8002502 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ee:	2220      	movs	r2, #32
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2250      	movs	r2, #80	; 0x50
 80024fa:	2100      	movs	r1, #0
 80024fc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e072      	b.n	80025e8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002502:	230c      	movs	r3, #12
 8002504:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002506:	f7ff fde3 	bl	80020d0 <HAL_GetTick>
 800250a:	0003      	movs	r3, r0
 800250c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800250e:	e01f      	b.n	8002550 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	3301      	adds	r3, #1
 8002514:	d01c      	beq.n	8002550 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <HAL_ADC_PollForConversion+0x70>
 800251c:	f7ff fdd8 	bl	80020d0 <HAL_GetTick>
 8002520:	0002      	movs	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d211      	bcs.n	8002550 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4013      	ands	r3, r2
 8002536:	d10b      	bne.n	8002550 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253c:	2204      	movs	r2, #4
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2250      	movs	r2, #80	; 0x50
 8002548:	2100      	movs	r1, #0
 800254a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e04b      	b.n	80025e8 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4013      	ands	r3, r2
 800255a:	d0d9      	beq.n	8002510 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	0092      	lsls	r2, r2, #2
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	23c0      	movs	r3, #192	; 0xc0
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	4013      	ands	r3, r2
 8002576:	d12e      	bne.n	80025d6 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800257e:	2b00      	cmp	r3, #0
 8002580:	d129      	bne.n	80025d6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2208      	movs	r2, #8
 800258a:	4013      	ands	r3, r2
 800258c:	2b08      	cmp	r3, #8
 800258e:	d122      	bne.n	80025d6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2204      	movs	r2, #4
 8002598:	4013      	ands	r3, r2
 800259a:	d110      	bne.n	80025be <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	210c      	movs	r1, #12
 80025a8:	438a      	bics	r2, r1
 80025aa:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b0:	4a0f      	ldr	r2, [pc, #60]	; (80025f0 <HAL_ADC_PollForConversion+0x134>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	2201      	movs	r2, #1
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54
 80025bc:	e00b      	b.n	80025d6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c2:	2220      	movs	r2, #32
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	2201      	movs	r2, #1
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d103      	bne.n	80025e6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	220c      	movs	r2, #12
 80025e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b004      	add	sp, #16
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	fffffefe 	.word	0xfffffefe

080025f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b002      	add	sp, #8
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2250      	movs	r2, #80	; 0x50
 800261a:	5c9b      	ldrb	r3, [r3, r2]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x18>
 8002620:	2302      	movs	r3, #2
 8002622:	e085      	b.n	8002730 <HAL_ADC_ConfigChannel+0x124>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2250      	movs	r2, #80	; 0x50
 8002628:	2101      	movs	r1, #1
 800262a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2204      	movs	r2, #4
 8002634:	4013      	ands	r3, r2
 8002636:	d00b      	beq.n	8002650 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263c:	2220      	movs	r2, #32
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2250      	movs	r2, #80	; 0x50
 8002648:	2100      	movs	r1, #0
 800264a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e06f      	b.n	8002730 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4a38      	ldr	r2, [pc, #224]	; (8002738 <HAL_ADC_ConfigChannel+0x12c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d035      	beq.n	80026c6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	035b      	lsls	r3, r3, #13
 8002666:	0b5a      	lsrs	r2, r3, #13
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	02db      	lsls	r3, r3, #11
 8002678:	4013      	ands	r3, r2
 800267a:	d009      	beq.n	8002690 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800267c:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HAL_ADC_ConfigChannel+0x130>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_ADC_ConfigChannel+0x130>)
 8002682:	2180      	movs	r1, #128	; 0x80
 8002684:	0409      	lsls	r1, r1, #16
 8002686:	430a      	orrs	r2, r1
 8002688:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800268a:	200a      	movs	r0, #10
 800268c:	f000 f8c6 	bl	800281c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	029b      	lsls	r3, r3, #10
 8002698:	4013      	ands	r3, r2
 800269a:	d006      	beq.n	80026aa <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800269c:	4b27      	ldr	r3, [pc, #156]	; (800273c <HAL_ADC_ConfigChannel+0x130>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b26      	ldr	r3, [pc, #152]	; (800273c <HAL_ADC_ConfigChannel+0x130>)
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	03c9      	lsls	r1, r1, #15
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	025b      	lsls	r3, r3, #9
 80026b2:	4013      	ands	r3, r2
 80026b4:	d037      	beq.n	8002726 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80026b6:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_ADC_ConfigChannel+0x130>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_ADC_ConfigChannel+0x130>)
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	0449      	lsls	r1, r1, #17
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e02f      	b.n	8002726 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	035b      	lsls	r3, r3, #13
 80026d2:	0b5b      	lsrs	r3, r3, #13
 80026d4:	43d9      	mvns	r1, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	400a      	ands	r2, r1
 80026dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	02db      	lsls	r3, r3, #11
 80026e6:	4013      	ands	r3, r2
 80026e8:	d005      	beq.n	80026f6 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_ADC_ConfigChannel+0x130>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_ADC_ConfigChannel+0x130>)
 80026f0:	4913      	ldr	r1, [pc, #76]	; (8002740 <HAL_ADC_ConfigChannel+0x134>)
 80026f2:	400a      	ands	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	029b      	lsls	r3, r3, #10
 80026fe:	4013      	ands	r3, r2
 8002700:	d005      	beq.n	800270e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <HAL_ADC_ConfigChannel+0x130>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <HAL_ADC_ConfigChannel+0x130>)
 8002708:	490e      	ldr	r1, [pc, #56]	; (8002744 <HAL_ADC_ConfigChannel+0x138>)
 800270a:	400a      	ands	r2, r1
 800270c:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	025b      	lsls	r3, r3, #9
 8002716:	4013      	ands	r3, r2
 8002718:	d005      	beq.n	8002726 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_ADC_ConfigChannel+0x130>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b07      	ldr	r3, [pc, #28]	; (800273c <HAL_ADC_ConfigChannel+0x130>)
 8002720:	4909      	ldr	r1, [pc, #36]	; (8002748 <HAL_ADC_ConfigChannel+0x13c>)
 8002722:	400a      	ands	r2, r1
 8002724:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2250      	movs	r2, #80	; 0x50
 800272a:	2100      	movs	r1, #0
 800272c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b002      	add	sp, #8
 8002736:	bd80      	pop	{r7, pc}
 8002738:	00001001 	.word	0x00001001
 800273c:	40012708 	.word	0x40012708
 8002740:	ff7fffff 	.word	0xff7fffff
 8002744:	ffbfffff 	.word	0xffbfffff
 8002748:	feffffff 	.word	0xfeffffff

0800274c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2203      	movs	r2, #3
 8002760:	4013      	ands	r3, r2
 8002762:	2b01      	cmp	r3, #1
 8002764:	d108      	bne.n	8002778 <ADC_Enable+0x2c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2201      	movs	r2, #1
 800276e:	4013      	ands	r3, r2
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <ADC_Enable+0x2c>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <ADC_Enable+0x2e>
 8002778:	2300      	movs	r3, #0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d146      	bne.n	800280c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a24      	ldr	r2, [pc, #144]	; (8002818 <ADC_Enable+0xcc>)
 8002786:	4013      	ands	r3, r2
 8002788:	d00d      	beq.n	80027a6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	2210      	movs	r2, #16
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	2201      	movs	r2, #1
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e033      	b.n	800280e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2101      	movs	r1, #1
 80027b2:	430a      	orrs	r2, r1
 80027b4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80027b6:	2001      	movs	r0, #1
 80027b8:	f000 f830 	bl	800281c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80027bc:	f7ff fc88 	bl	80020d0 <HAL_GetTick>
 80027c0:	0003      	movs	r3, r0
 80027c2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027c4:	e01b      	b.n	80027fe <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027c6:	f7ff fc83 	bl	80020d0 <HAL_GetTick>
 80027ca:	0002      	movs	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b0a      	cmp	r3, #10
 80027d2:	d914      	bls.n	80027fe <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2201      	movs	r2, #1
 80027dc:	4013      	ands	r3, r2
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d00d      	beq.n	80027fe <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	2210      	movs	r2, #16
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	2201      	movs	r2, #1
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e007      	b.n	800280e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2201      	movs	r2, #1
 8002806:	4013      	ands	r3, r2
 8002808:	2b01      	cmp	r3, #1
 800280a:	d1dc      	bne.n	80027c6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	0018      	movs	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	b004      	add	sp, #16
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	80000017 	.word	0x80000017

0800281c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <ADC_DelayMicroSecond+0x38>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	490b      	ldr	r1, [pc, #44]	; (8002858 <ADC_DelayMicroSecond+0x3c>)
 800282a:	0018      	movs	r0, r3
 800282c:	f7fd fc76 	bl	800011c <__udivsi3>
 8002830:	0003      	movs	r3, r0
 8002832:	001a      	movs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4353      	muls	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800283a:	e002      	b.n	8002842 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3b01      	subs	r3, #1
 8002840:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f9      	bne.n	800283c <ADC_DelayMicroSecond+0x20>
  }
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	b004      	add	sp, #16
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	20000064 	.word	0x20000064
 8002858:	000f4240 	.word	0x000f4240

0800285c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	0002      	movs	r2, r0
 8002864:	1dfb      	adds	r3, r7, #7
 8002866:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002868:	1dfb      	adds	r3, r7, #7
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b7f      	cmp	r3, #127	; 0x7f
 800286e:	d809      	bhi.n	8002884 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002870:	1dfb      	adds	r3, r7, #7
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	001a      	movs	r2, r3
 8002876:	231f      	movs	r3, #31
 8002878:	401a      	ands	r2, r3
 800287a:	4b04      	ldr	r3, [pc, #16]	; (800288c <__NVIC_EnableIRQ+0x30>)
 800287c:	2101      	movs	r1, #1
 800287e:	4091      	lsls	r1, r2
 8002880:	000a      	movs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]
  }
}
 8002884:	46c0      	nop			; (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	b002      	add	sp, #8
 800288a:	bd80      	pop	{r7, pc}
 800288c:	e000e100 	.word	0xe000e100

08002890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	0002      	movs	r2, r0
 8002898:	6039      	str	r1, [r7, #0]
 800289a:	1dfb      	adds	r3, r7, #7
 800289c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800289e:	1dfb      	adds	r3, r7, #7
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b7f      	cmp	r3, #127	; 0x7f
 80028a4:	d828      	bhi.n	80028f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028a6:	4a2f      	ldr	r2, [pc, #188]	; (8002964 <__NVIC_SetPriority+0xd4>)
 80028a8:	1dfb      	adds	r3, r7, #7
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	b25b      	sxtb	r3, r3
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	33c0      	adds	r3, #192	; 0xc0
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	589b      	ldr	r3, [r3, r2]
 80028b6:	1dfa      	adds	r2, r7, #7
 80028b8:	7812      	ldrb	r2, [r2, #0]
 80028ba:	0011      	movs	r1, r2
 80028bc:	2203      	movs	r2, #3
 80028be:	400a      	ands	r2, r1
 80028c0:	00d2      	lsls	r2, r2, #3
 80028c2:	21ff      	movs	r1, #255	; 0xff
 80028c4:	4091      	lsls	r1, r2
 80028c6:	000a      	movs	r2, r1
 80028c8:	43d2      	mvns	r2, r2
 80028ca:	401a      	ands	r2, r3
 80028cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	019b      	lsls	r3, r3, #6
 80028d2:	22ff      	movs	r2, #255	; 0xff
 80028d4:	401a      	ands	r2, r3
 80028d6:	1dfb      	adds	r3, r7, #7
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	0018      	movs	r0, r3
 80028dc:	2303      	movs	r3, #3
 80028de:	4003      	ands	r3, r0
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028e4:	481f      	ldr	r0, [pc, #124]	; (8002964 <__NVIC_SetPriority+0xd4>)
 80028e6:	1dfb      	adds	r3, r7, #7
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	b25b      	sxtb	r3, r3
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	430a      	orrs	r2, r1
 80028f0:	33c0      	adds	r3, #192	; 0xc0
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028f6:	e031      	b.n	800295c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028f8:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <__NVIC_SetPriority+0xd8>)
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	0019      	movs	r1, r3
 8002900:	230f      	movs	r3, #15
 8002902:	400b      	ands	r3, r1
 8002904:	3b08      	subs	r3, #8
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3306      	adds	r3, #6
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	18d3      	adds	r3, r2, r3
 800290e:	3304      	adds	r3, #4
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	1dfa      	adds	r2, r7, #7
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	0011      	movs	r1, r2
 8002918:	2203      	movs	r2, #3
 800291a:	400a      	ands	r2, r1
 800291c:	00d2      	lsls	r2, r2, #3
 800291e:	21ff      	movs	r1, #255	; 0xff
 8002920:	4091      	lsls	r1, r2
 8002922:	000a      	movs	r2, r1
 8002924:	43d2      	mvns	r2, r2
 8002926:	401a      	ands	r2, r3
 8002928:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	019b      	lsls	r3, r3, #6
 800292e:	22ff      	movs	r2, #255	; 0xff
 8002930:	401a      	ands	r2, r3
 8002932:	1dfb      	adds	r3, r7, #7
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	0018      	movs	r0, r3
 8002938:	2303      	movs	r3, #3
 800293a:	4003      	ands	r3, r0
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002940:	4809      	ldr	r0, [pc, #36]	; (8002968 <__NVIC_SetPriority+0xd8>)
 8002942:	1dfb      	adds	r3, r7, #7
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	001c      	movs	r4, r3
 8002948:	230f      	movs	r3, #15
 800294a:	4023      	ands	r3, r4
 800294c:	3b08      	subs	r3, #8
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	430a      	orrs	r2, r1
 8002952:	3306      	adds	r3, #6
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	18c3      	adds	r3, r0, r3
 8002958:	3304      	adds	r3, #4
 800295a:	601a      	str	r2, [r3, #0]
}
 800295c:	46c0      	nop			; (mov r8, r8)
 800295e:	46bd      	mov	sp, r7
 8002960:	b003      	add	sp, #12
 8002962:	bd90      	pop	{r4, r7, pc}
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	1e5a      	subs	r2, r3, #1
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	045b      	lsls	r3, r3, #17
 800297c:	429a      	cmp	r2, r3
 800297e:	d301      	bcc.n	8002984 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002980:	2301      	movs	r3, #1
 8002982:	e010      	b.n	80029a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <SysTick_Config+0x44>)
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	3a01      	subs	r2, #1
 800298a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298c:	2301      	movs	r3, #1
 800298e:	425b      	negs	r3, r3
 8002990:	2103      	movs	r1, #3
 8002992:	0018      	movs	r0, r3
 8002994:	f7ff ff7c 	bl	8002890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <SysTick_Config+0x44>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <SysTick_Config+0x44>)
 80029a0:	2207      	movs	r2, #7
 80029a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b002      	add	sp, #8
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	e000e010 	.word	0xe000e010

080029b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	210f      	movs	r1, #15
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	1c02      	adds	r2, r0, #0
 80029c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	b25b      	sxtb	r3, r3
 80029ce:	0011      	movs	r1, r2
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7ff ff5d 	bl	8002890 <__NVIC_SetPriority>
}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	46bd      	mov	sp, r7
 80029da:	b004      	add	sp, #16
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	0002      	movs	r2, r0
 80029e6:	1dfb      	adds	r3, r7, #7
 80029e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ea:	1dfb      	adds	r3, r7, #7
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	b25b      	sxtb	r3, r3
 80029f0:	0018      	movs	r0, r3
 80029f2:	f7ff ff33 	bl	800285c <__NVIC_EnableIRQ>
}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b002      	add	sp, #8
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7ff ffaf 	bl	800296c <SysTick_Config>
 8002a0e:	0003      	movs	r3, r0
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b002      	add	sp, #8
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a2e:	e14f      	b.n	8002cd0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2101      	movs	r1, #1
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4091      	lsls	r1, r2
 8002a3a:	000a      	movs	r2, r1
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d100      	bne.n	8002a48 <HAL_GPIO_Init+0x30>
 8002a46:	e140      	b.n	8002cca <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d005      	beq.n	8002a60 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2203      	movs	r2, #3
 8002a5a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d130      	bne.n	8002ac2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	0013      	movs	r3, r2
 8002a70:	43da      	mvns	r2, r3
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	409a      	lsls	r2, r3
 8002a82:	0013      	movs	r3, r2
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a96:	2201      	movs	r2, #1
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	0013      	movs	r3, r2
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	2201      	movs	r2, #1
 8002aae:	401a      	ands	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	0013      	movs	r3, r2
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d017      	beq.n	8002afe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	2203      	movs	r2, #3
 8002ada:	409a      	lsls	r2, r3
 8002adc:	0013      	movs	r3, r2
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	409a      	lsls	r2, r3
 8002af0:	0013      	movs	r3, r2
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2203      	movs	r2, #3
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d123      	bne.n	8002b52 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	08da      	lsrs	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3208      	adds	r2, #8
 8002b12:	0092      	lsls	r2, r2, #2
 8002b14:	58d3      	ldr	r3, [r2, r3]
 8002b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	220f      	movs	r2, #15
 8002b22:	409a      	lsls	r2, r3
 8002b24:	0013      	movs	r3, r2
 8002b26:	43da      	mvns	r2, r3
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2107      	movs	r1, #7
 8002b36:	400b      	ands	r3, r1
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	0013      	movs	r3, r2
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	08da      	lsrs	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3208      	adds	r2, #8
 8002b4c:	0092      	lsls	r2, r2, #2
 8002b4e:	6939      	ldr	r1, [r7, #16]
 8002b50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	0013      	movs	r3, r2
 8002b62:	43da      	mvns	r2, r3
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2203      	movs	r2, #3
 8002b70:	401a      	ands	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	409a      	lsls	r2, r3
 8002b78:	0013      	movs	r3, r2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	23c0      	movs	r3, #192	; 0xc0
 8002b8c:	029b      	lsls	r3, r3, #10
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d100      	bne.n	8002b94 <HAL_GPIO_Init+0x17c>
 8002b92:	e09a      	b.n	8002cca <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b94:	4b54      	ldr	r3, [pc, #336]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b98:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ba0:	4a52      	ldr	r2, [pc, #328]	; (8002cec <HAL_GPIO_Init+0x2d4>)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	089b      	lsrs	r3, r3, #2
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	589b      	ldr	r3, [r3, r2]
 8002bac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	220f      	movs	r2, #15
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	0013      	movs	r3, r2
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	23a0      	movs	r3, #160	; 0xa0
 8002bc8:	05db      	lsls	r3, r3, #23
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d019      	beq.n	8002c02 <HAL_GPIO_Init+0x1ea>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a47      	ldr	r2, [pc, #284]	; (8002cf0 <HAL_GPIO_Init+0x2d8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <HAL_GPIO_Init+0x1e6>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a46      	ldr	r2, [pc, #280]	; (8002cf4 <HAL_GPIO_Init+0x2dc>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00d      	beq.n	8002bfa <HAL_GPIO_Init+0x1e2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a45      	ldr	r2, [pc, #276]	; (8002cf8 <HAL_GPIO_Init+0x2e0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <HAL_GPIO_Init+0x1de>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a44      	ldr	r2, [pc, #272]	; (8002cfc <HAL_GPIO_Init+0x2e4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_GPIO_Init+0x1da>
 8002bee:	2305      	movs	r3, #5
 8002bf0:	e008      	b.n	8002c04 <HAL_GPIO_Init+0x1ec>
 8002bf2:	2306      	movs	r3, #6
 8002bf4:	e006      	b.n	8002c04 <HAL_GPIO_Init+0x1ec>
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e004      	b.n	8002c04 <HAL_GPIO_Init+0x1ec>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e002      	b.n	8002c04 <HAL_GPIO_Init+0x1ec>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_GPIO_Init+0x1ec>
 8002c02:	2300      	movs	r3, #0
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	2103      	movs	r1, #3
 8002c08:	400a      	ands	r2, r1
 8002c0a:	0092      	lsls	r2, r2, #2
 8002c0c:	4093      	lsls	r3, r2
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c14:	4935      	ldr	r1, [pc, #212]	; (8002cec <HAL_GPIO_Init+0x2d4>)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c22:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_GPIO_Init+0x2e8>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	035b      	lsls	r3, r3, #13
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c46:	4b2e      	ldr	r3, [pc, #184]	; (8002d00 <HAL_GPIO_Init+0x2e8>)
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c4c:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <HAL_GPIO_Init+0x2e8>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	43da      	mvns	r2, r3
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	039b      	lsls	r3, r3, #14
 8002c64:	4013      	ands	r3, r2
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c70:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <HAL_GPIO_Init+0x2e8>)
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <HAL_GPIO_Init+0x2e8>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	029b      	lsls	r3, r3, #10
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c9a:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_GPIO_Init+0x2e8>)
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca0:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <HAL_GPIO_Init+0x2e8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	43da      	mvns	r2, r3
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	025b      	lsls	r3, r3, #9
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <HAL_GPIO_Init+0x2e8>)
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	40da      	lsrs	r2, r3
 8002cd8:	1e13      	subs	r3, r2, #0
 8002cda:	d000      	beq.n	8002cde <HAL_GPIO_Init+0x2c6>
 8002cdc:	e6a8      	b.n	8002a30 <HAL_GPIO_Init+0x18>
  }
}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b006      	add	sp, #24
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	50000400 	.word	0x50000400
 8002cf4:	50000800 	.word	0x50000800
 8002cf8:	50000c00 	.word	0x50000c00
 8002cfc:	50001c00 	.word	0x50001c00
 8002d00:	40010400 	.word	0x40010400

08002d04 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	000a      	movs	r2, r1
 8002d0e:	1cbb      	adds	r3, r7, #2
 8002d10:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	1cba      	adds	r2, r7, #2
 8002d18:	8812      	ldrh	r2, [r2, #0]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d1e:	230f      	movs	r3, #15
 8002d20:	18fb      	adds	r3, r7, r3
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
 8002d26:	e003      	b.n	8002d30 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d28:	230f      	movs	r3, #15
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002d30:	230f      	movs	r3, #15
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	781b      	ldrb	r3, [r3, #0]
}
 8002d36:	0018      	movs	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b004      	add	sp, #16
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	0008      	movs	r0, r1
 8002d48:	0011      	movs	r1, r2
 8002d4a:	1cbb      	adds	r3, r7, #2
 8002d4c:	1c02      	adds	r2, r0, #0
 8002d4e:	801a      	strh	r2, [r3, #0]
 8002d50:	1c7b      	adds	r3, r7, #1
 8002d52:	1c0a      	adds	r2, r1, #0
 8002d54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d56:	1c7b      	adds	r3, r7, #1
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d004      	beq.n	8002d68 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d5e:	1cbb      	adds	r3, r7, #2
 8002d60:	881a      	ldrh	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002d66:	e003      	b.n	8002d70 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002d68:	1cbb      	adds	r3, r7, #2
 8002d6a:	881a      	ldrh	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b002      	add	sp, #8
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e082      	b.n	8002e90 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2241      	movs	r2, #65	; 0x41
 8002d8e:	5c9b      	ldrb	r3, [r3, r2]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d107      	bne.n	8002da6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2240      	movs	r2, #64	; 0x40
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7ff f841 	bl	8001e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2241      	movs	r2, #65	; 0x41
 8002daa:	2124      	movs	r1, #36	; 0x24
 8002dac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2101      	movs	r1, #1
 8002dba:	438a      	bics	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4934      	ldr	r1, [pc, #208]	; (8002e98 <HAL_I2C_Init+0x120>)
 8002dc8:	400a      	ands	r2, r1
 8002dca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4931      	ldr	r1, [pc, #196]	; (8002e9c <HAL_I2C_Init+0x124>)
 8002dd8:	400a      	ands	r2, r1
 8002dda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d108      	bne.n	8002df6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2180      	movs	r1, #128	; 0x80
 8002dee:	0209      	lsls	r1, r1, #8
 8002df0:	430a      	orrs	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	e007      	b.n	8002e06 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2184      	movs	r1, #132	; 0x84
 8002e00:	0209      	lsls	r1, r1, #8
 8002e02:	430a      	orrs	r2, r1
 8002e04:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d104      	bne.n	8002e18 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2280      	movs	r2, #128	; 0x80
 8002e14:	0112      	lsls	r2, r2, #4
 8002e16:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	491f      	ldr	r1, [pc, #124]	; (8002ea0 <HAL_I2C_Init+0x128>)
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	491a      	ldr	r1, [pc, #104]	; (8002e9c <HAL_I2C_Init+0x124>)
 8002e34:	400a      	ands	r2, r1
 8002e36:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69d9      	ldr	r1, [r3, #28]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1a      	ldr	r2, [r3, #32]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2241      	movs	r2, #65	; 0x41
 8002e7c:	2120      	movs	r1, #32
 8002e7e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2242      	movs	r2, #66	; 0x42
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b002      	add	sp, #8
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	f0ffffff 	.word	0xf0ffffff
 8002e9c:	ffff7fff 	.word	0xffff7fff
 8002ea0:	02008000 	.word	0x02008000

08002ea4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b089      	sub	sp, #36	; 0x24
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	0008      	movs	r0, r1
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	230a      	movs	r3, #10
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	1c02      	adds	r2, r0, #0
 8002eb8:	801a      	strh	r2, [r3, #0]
 8002eba:	2308      	movs	r3, #8
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	1c0a      	adds	r2, r1, #0
 8002ec0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2241      	movs	r2, #65	; 0x41
 8002ec6:	5c9b      	ldrb	r3, [r3, r2]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d000      	beq.n	8002ed0 <HAL_I2C_Master_Transmit+0x2c>
 8002ece:	e0e7      	b.n	80030a0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2240      	movs	r2, #64	; 0x40
 8002ed4:	5c9b      	ldrb	r3, [r3, r2]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_I2C_Master_Transmit+0x3a>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e0e1      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1fe>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2240      	movs	r2, #64	; 0x40
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ee6:	f7ff f8f3 	bl	80020d0 <HAL_GetTick>
 8002eea:	0003      	movs	r3, r0
 8002eec:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	0219      	lsls	r1, r3, #8
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2319      	movs	r3, #25
 8002efa:	2201      	movs	r2, #1
 8002efc:	f000 fa16 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 8002f00:	1e03      	subs	r3, r0, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0cc      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2241      	movs	r2, #65	; 0x41
 8002f0c:	2121      	movs	r1, #33	; 0x21
 8002f0e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2242      	movs	r2, #66	; 0x42
 8002f14:	2110      	movs	r1, #16
 8002f16:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2208      	movs	r2, #8
 8002f28:	18ba      	adds	r2, r7, r2
 8002f2a:	8812      	ldrh	r2, [r2, #0]
 8002f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2bff      	cmp	r3, #255	; 0xff
 8002f3c:	d911      	bls.n	8002f62 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	22ff      	movs	r2, #255	; 0xff
 8002f42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	045c      	lsls	r4, r3, #17
 8002f4e:	230a      	movs	r3, #10
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	8819      	ldrh	r1, [r3, #0]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	4b55      	ldr	r3, [pc, #340]	; (80030ac <HAL_I2C_Master_Transmit+0x208>)
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	0023      	movs	r3, r4
 8002f5c:	f000 fbbe 	bl	80036dc <I2C_TransferConfig>
 8002f60:	e075      	b.n	800304e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	049c      	lsls	r4, r3, #18
 8002f76:	230a      	movs	r3, #10
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	8819      	ldrh	r1, [r3, #0]
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	4b4b      	ldr	r3, [pc, #300]	; (80030ac <HAL_I2C_Master_Transmit+0x208>)
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	0023      	movs	r3, r4
 8002f84:	f000 fbaa 	bl	80036dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f88:	e061      	b.n	800304e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 fa19 	bl	80033c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f96:	1e03      	subs	r3, r0, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e081      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	781a      	ldrb	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d03a      	beq.n	800304e <HAL_I2C_Master_Transmit+0x1aa>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d136      	bne.n	800304e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	0013      	movs	r3, r2
 8002fea:	2200      	movs	r2, #0
 8002fec:	2180      	movs	r1, #128	; 0x80
 8002fee:	f000 f99d 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 8002ff2:	1e03      	subs	r3, r0, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e053      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2bff      	cmp	r3, #255	; 0xff
 8003002:	d911      	bls.n	8003028 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	22ff      	movs	r2, #255	; 0xff
 8003008:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	b2da      	uxtb	r2, r3
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	045c      	lsls	r4, r3, #17
 8003014:	230a      	movs	r3, #10
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	8819      	ldrh	r1, [r3, #0]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	2300      	movs	r3, #0
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	0023      	movs	r3, r4
 8003022:	f000 fb5b 	bl	80036dc <I2C_TransferConfig>
 8003026:	e012      	b.n	800304e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003036:	b2da      	uxtb	r2, r3
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	049c      	lsls	r4, r3, #18
 800303c:	230a      	movs	r3, #10
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	8819      	ldrh	r1, [r3, #0]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	2300      	movs	r3, #0
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	0023      	movs	r3, r4
 800304a:	f000 fb47 	bl	80036dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d198      	bne.n	8002f8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	0018      	movs	r0, r3
 8003060:	f000 f9f8 	bl	8003454 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003064:	1e03      	subs	r3, r0, #0
 8003066:	d001      	beq.n	800306c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e01a      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2220      	movs	r2, #32
 8003072:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	490c      	ldr	r1, [pc, #48]	; (80030b0 <HAL_I2C_Master_Transmit+0x20c>)
 8003080:	400a      	ands	r2, r1
 8003082:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2241      	movs	r2, #65	; 0x41
 8003088:	2120      	movs	r1, #32
 800308a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2242      	movs	r2, #66	; 0x42
 8003090:	2100      	movs	r1, #0
 8003092:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2240      	movs	r2, #64	; 0x40
 8003098:	2100      	movs	r1, #0
 800309a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	e000      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80030a0:	2302      	movs	r3, #2
  }
}
 80030a2:	0018      	movs	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b007      	add	sp, #28
 80030a8:	bd90      	pop	{r4, r7, pc}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	80002000 	.word	0x80002000
 80030b0:	fe00e800 	.word	0xfe00e800

080030b4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	230a      	movs	r3, #10
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	1c0a      	adds	r2, r1, #0
 80030c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2241      	movs	r2, #65	; 0x41
 80030d0:	5c9b      	ldrb	r3, [r3, r2]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d000      	beq.n	80030da <HAL_I2C_IsDeviceReady+0x26>
 80030d8:	e0fd      	b.n	80032d6 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699a      	ldr	r2, [r3, #24]
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	401a      	ands	r2, r3
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d101      	bne.n	80030f2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80030ee:	2302      	movs	r3, #2
 80030f0:	e0f2      	b.n	80032d8 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2240      	movs	r2, #64	; 0x40
 80030f6:	5c9b      	ldrb	r3, [r3, r2]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_I2C_IsDeviceReady+0x4c>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e0eb      	b.n	80032d8 <HAL_I2C_IsDeviceReady+0x224>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2240      	movs	r2, #64	; 0x40
 8003104:	2101      	movs	r1, #1
 8003106:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2241      	movs	r2, #65	; 0x41
 800310c:	2124      	movs	r1, #36	; 0x24
 800310e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d107      	bne.n	800312e <HAL_I2C_IsDeviceReady+0x7a>
 800311e:	230a      	movs	r3, #10
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	059b      	lsls	r3, r3, #22
 8003126:	0d9b      	lsrs	r3, r3, #22
 8003128:	4a6d      	ldr	r2, [pc, #436]	; (80032e0 <HAL_I2C_IsDeviceReady+0x22c>)
 800312a:	431a      	orrs	r2, r3
 800312c:	e006      	b.n	800313c <HAL_I2C_IsDeviceReady+0x88>
 800312e:	230a      	movs	r3, #10
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	059b      	lsls	r3, r3, #22
 8003136:	0d9b      	lsrs	r3, r3, #22
 8003138:	4a6a      	ldr	r2, [pc, #424]	; (80032e4 <HAL_I2C_IsDeviceReady+0x230>)
 800313a:	431a      	orrs	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003142:	f7fe ffc5 	bl	80020d0 <HAL_GetTick>
 8003146:	0003      	movs	r3, r0
 8003148:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2220      	movs	r2, #32
 8003152:	4013      	ands	r3, r2
 8003154:	3b20      	subs	r3, #32
 8003156:	425a      	negs	r2, r3
 8003158:	4153      	adcs	r3, r2
 800315a:	b2da      	uxtb	r2, r3
 800315c:	231f      	movs	r3, #31
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2210      	movs	r2, #16
 800316a:	4013      	ands	r3, r2
 800316c:	3b10      	subs	r3, #16
 800316e:	425a      	negs	r2, r3
 8003170:	4153      	adcs	r3, r2
 8003172:	b2da      	uxtb	r2, r3
 8003174:	231e      	movs	r3, #30
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800317a:	e035      	b.n	80031e8 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	d01a      	beq.n	80031b8 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003182:	f7fe ffa5 	bl	80020d0 <HAL_GetTick>
 8003186:	0002      	movs	r2, r0
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d302      	bcc.n	8003198 <HAL_I2C_IsDeviceReady+0xe4>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10f      	bne.n	80031b8 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2241      	movs	r2, #65	; 0x41
 800319c:	2120      	movs	r1, #32
 800319e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a4:	2220      	movs	r2, #32
 80031a6:	431a      	orrs	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2240      	movs	r2, #64	; 0x40
 80031b0:	2100      	movs	r1, #0
 80031b2:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e08f      	b.n	80032d8 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2220      	movs	r2, #32
 80031c0:	4013      	ands	r3, r2
 80031c2:	3b20      	subs	r3, #32
 80031c4:	425a      	negs	r2, r3
 80031c6:	4153      	adcs	r3, r2
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	231f      	movs	r3, #31
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2210      	movs	r2, #16
 80031d8:	4013      	ands	r3, r2
 80031da:	3b10      	subs	r3, #16
 80031dc:	425a      	negs	r2, r3
 80031de:	4153      	adcs	r3, r2
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	231e      	movs	r3, #30
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80031e8:	231f      	movs	r3, #31
 80031ea:	18fb      	adds	r3, r7, r3
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d104      	bne.n	80031fc <HAL_I2C_IsDeviceReady+0x148>
 80031f2:	231e      	movs	r3, #30
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0bf      	beq.n	800317c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2210      	movs	r2, #16
 8003204:	4013      	ands	r3, r2
 8003206:	2b10      	cmp	r3, #16
 8003208:	d01a      	beq.n	8003240 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	0013      	movs	r3, r2
 8003214:	2200      	movs	r2, #0
 8003216:	2120      	movs	r1, #32
 8003218:	f000 f888 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 800321c:	1e03      	subs	r3, r0, #0
 800321e:	d001      	beq.n	8003224 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e059      	b.n	80032d8 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2220      	movs	r2, #32
 800322a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2241      	movs	r2, #65	; 0x41
 8003230:	2120      	movs	r1, #32
 8003232:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2240      	movs	r2, #64	; 0x40
 8003238:	2100      	movs	r1, #0
 800323a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	e04b      	b.n	80032d8 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	0013      	movs	r3, r2
 800324a:	2200      	movs	r2, #0
 800324c:	2120      	movs	r1, #32
 800324e:	f000 f86d 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 8003252:	1e03      	subs	r3, r0, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e03e      	b.n	80032d8 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2210      	movs	r2, #16
 8003260:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2220      	movs	r2, #32
 8003268:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	429a      	cmp	r2, r3
 8003270:	d119      	bne.n	80032a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2180      	movs	r1, #128	; 0x80
 800327e:	01c9      	lsls	r1, r1, #7
 8003280:	430a      	orrs	r2, r1
 8003282:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	0013      	movs	r3, r2
 800328e:	2200      	movs	r2, #0
 8003290:	2120      	movs	r1, #32
 8003292:	f000 f84b 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 8003296:	1e03      	subs	r3, r0, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e01c      	b.n	80032d8 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2220      	movs	r2, #32
 80032a4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	3301      	adds	r3, #1
 80032aa:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d900      	bls.n	80032b6 <HAL_I2C_IsDeviceReady+0x202>
 80032b4:	e72f      	b.n	8003116 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2241      	movs	r2, #65	; 0x41
 80032ba:	2120      	movs	r1, #32
 80032bc:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	2220      	movs	r2, #32
 80032c4:	431a      	orrs	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2240      	movs	r2, #64	; 0x40
 80032ce:	2100      	movs	r1, #0
 80032d0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 80032d6:	2302      	movs	r3, #2
  }
}
 80032d8:	0018      	movs	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	b008      	add	sp, #32
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	02002000 	.word	0x02002000
 80032e4:	02002800 	.word	0x02002800

080032e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2202      	movs	r2, #2
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d103      	bne.n	8003306 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2200      	movs	r2, #0
 8003304:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2201      	movs	r2, #1
 800330e:	4013      	ands	r3, r2
 8003310:	2b01      	cmp	r3, #1
 8003312:	d007      	beq.n	8003324 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2101      	movs	r1, #1
 8003320:	430a      	orrs	r2, r1
 8003322:	619a      	str	r2, [r3, #24]
  }
}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	b002      	add	sp, #8
 800332a:	bd80      	pop	{r7, pc}

0800332c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	1dfb      	adds	r3, r7, #7
 800333a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800333c:	e030      	b.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	d02d      	beq.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003344:	f7fe fec4 	bl	80020d0 <HAL_GetTick>
 8003348:	0002      	movs	r2, r0
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d302      	bcc.n	800335a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d122      	bne.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	4013      	ands	r3, r2
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	425a      	negs	r2, r3
 800336a:	4153      	adcs	r3, r2
 800336c:	b2db      	uxtb	r3, r3
 800336e:	001a      	movs	r2, r3
 8003370:	1dfb      	adds	r3, r7, #7
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d113      	bne.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337c:	2220      	movs	r2, #32
 800337e:	431a      	orrs	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2241      	movs	r2, #65	; 0x41
 8003388:	2120      	movs	r1, #32
 800338a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2242      	movs	r2, #66	; 0x42
 8003390:	2100      	movs	r1, #0
 8003392:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2240      	movs	r2, #64	; 0x40
 8003398:	2100      	movs	r1, #0
 800339a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e00f      	b.n	80033c0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	4013      	ands	r3, r2
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	425a      	negs	r2, r3
 80033b0:	4153      	adcs	r3, r2
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	001a      	movs	r2, r3
 80033b6:	1dfb      	adds	r3, r7, #7
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d0bf      	beq.n	800333e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	0018      	movs	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b004      	add	sp, #16
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033d4:	e032      	b.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	0018      	movs	r0, r3
 80033de:	f000 f87d 	bl	80034dc <I2C_IsErrorOccurred>
 80033e2:	1e03      	subs	r3, r0, #0
 80033e4:	d001      	beq.n	80033ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e030      	b.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	3301      	adds	r3, #1
 80033ee:	d025      	beq.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f0:	f7fe fe6e 	bl	80020d0 <HAL_GetTick>
 80033f4:	0002      	movs	r2, r0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d302      	bcc.n	8003406 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d11a      	bne.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2202      	movs	r2, #2
 800340e:	4013      	ands	r3, r2
 8003410:	2b02      	cmp	r3, #2
 8003412:	d013      	beq.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	2220      	movs	r2, #32
 800341a:	431a      	orrs	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2241      	movs	r2, #65	; 0x41
 8003424:	2120      	movs	r1, #32
 8003426:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2242      	movs	r2, #66	; 0x42
 800342c:	2100      	movs	r1, #0
 800342e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2240      	movs	r2, #64	; 0x40
 8003434:	2100      	movs	r1, #0
 8003436:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e007      	b.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2202      	movs	r2, #2
 8003444:	4013      	ands	r3, r2
 8003446:	2b02      	cmp	r3, #2
 8003448:	d1c5      	bne.n	80033d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b004      	add	sp, #16
 8003452:	bd80      	pop	{r7, pc}

08003454 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003460:	e02f      	b.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	0018      	movs	r0, r3
 800346a:	f000 f837 	bl	80034dc <I2C_IsErrorOccurred>
 800346e:	1e03      	subs	r3, r0, #0
 8003470:	d001      	beq.n	8003476 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e02d      	b.n	80034d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fe fe2b 	bl	80020d0 <HAL_GetTick>
 800347a:	0002      	movs	r2, r0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d11a      	bne.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2220      	movs	r2, #32
 8003494:	4013      	ands	r3, r2
 8003496:	2b20      	cmp	r3, #32
 8003498:	d013      	beq.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	2220      	movs	r2, #32
 80034a0:	431a      	orrs	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2241      	movs	r2, #65	; 0x41
 80034aa:	2120      	movs	r1, #32
 80034ac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2242      	movs	r2, #66	; 0x42
 80034b2:	2100      	movs	r1, #0
 80034b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2240      	movs	r2, #64	; 0x40
 80034ba:	2100      	movs	r1, #0
 80034bc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e007      	b.n	80034d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	2220      	movs	r2, #32
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d1c8      	bne.n	8003462 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	0018      	movs	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b004      	add	sp, #16
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b08b      	sub	sp, #44	; 0x2c
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e8:	2327      	movs	r3, #39	; 0x27
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2210      	movs	r2, #16
 8003504:	4013      	ands	r3, r2
 8003506:	d100      	bne.n	800350a <I2C_IsErrorOccurred+0x2e>
 8003508:	e082      	b.n	8003610 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2210      	movs	r2, #16
 8003510:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003512:	e060      	b.n	80035d6 <I2C_IsErrorOccurred+0xfa>
 8003514:	2427      	movs	r4, #39	; 0x27
 8003516:	193b      	adds	r3, r7, r4
 8003518:	193a      	adds	r2, r7, r4
 800351a:	7812      	ldrb	r2, [r2, #0]
 800351c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	3301      	adds	r3, #1
 8003522:	d058      	beq.n	80035d6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003524:	f7fe fdd4 	bl	80020d0 <HAL_GetTick>
 8003528:	0002      	movs	r2, r0
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	429a      	cmp	r2, r3
 8003532:	d306      	bcc.n	8003542 <I2C_IsErrorOccurred+0x66>
 8003534:	193b      	adds	r3, r7, r4
 8003536:	193a      	adds	r2, r7, r4
 8003538:	7812      	ldrb	r2, [r2, #0]
 800353a:	701a      	strb	r2, [r3, #0]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d149      	bne.n	80035d6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	01db      	lsls	r3, r3, #7
 800354c:	4013      	ands	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003550:	2013      	movs	r0, #19
 8003552:	183b      	adds	r3, r7, r0
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	2142      	movs	r1, #66	; 0x42
 8003558:	5c52      	ldrb	r2, [r2, r1]
 800355a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	2380      	movs	r3, #128	; 0x80
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	401a      	ands	r2, r3
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	429a      	cmp	r2, r3
 800356e:	d126      	bne.n	80035be <I2C_IsErrorOccurred+0xe2>
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	01db      	lsls	r3, r3, #7
 8003576:	429a      	cmp	r2, r3
 8003578:	d021      	beq.n	80035be <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800357a:	183b      	adds	r3, r7, r0
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b20      	cmp	r3, #32
 8003580:	d01d      	beq.n	80035be <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2180      	movs	r1, #128	; 0x80
 800358e:	01c9      	lsls	r1, r1, #7
 8003590:	430a      	orrs	r2, r1
 8003592:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003594:	f7fe fd9c 	bl	80020d0 <HAL_GetTick>
 8003598:	0003      	movs	r3, r0
 800359a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800359c:	e00f      	b.n	80035be <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800359e:	f7fe fd97 	bl	80020d0 <HAL_GetTick>
 80035a2:	0002      	movs	r2, r0
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b19      	cmp	r3, #25
 80035aa:	d908      	bls.n	80035be <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	2220      	movs	r2, #32
 80035b0:	4313      	orrs	r3, r2
 80035b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80035b4:	2327      	movs	r3, #39	; 0x27
 80035b6:	18fb      	adds	r3, r7, r3
 80035b8:	2201      	movs	r2, #1
 80035ba:	701a      	strb	r2, [r3, #0]

              break;
 80035bc:	e00b      	b.n	80035d6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2220      	movs	r2, #32
 80035c6:	4013      	ands	r3, r2
 80035c8:	2127      	movs	r1, #39	; 0x27
 80035ca:	187a      	adds	r2, r7, r1
 80035cc:	1879      	adds	r1, r7, r1
 80035ce:	7809      	ldrb	r1, [r1, #0]
 80035d0:	7011      	strb	r1, [r2, #0]
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d1e3      	bne.n	800359e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	2220      	movs	r2, #32
 80035de:	4013      	ands	r3, r2
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	d004      	beq.n	80035ee <I2C_IsErrorOccurred+0x112>
 80035e4:	2327      	movs	r3, #39	; 0x27
 80035e6:	18fb      	adds	r3, r7, r3
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d092      	beq.n	8003514 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035ee:	2327      	movs	r3, #39	; 0x27
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d103      	bne.n	8003600 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2220      	movs	r2, #32
 80035fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	2204      	movs	r2, #4
 8003604:	4313      	orrs	r3, r2
 8003606:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003608:	2327      	movs	r3, #39	; 0x27
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	4013      	ands	r3, r2
 8003620:	d00c      	beq.n	800363c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	2201      	movs	r2, #1
 8003626:	4313      	orrs	r3, r2
 8003628:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	0052      	lsls	r2, r2, #1
 8003632:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003634:	2327      	movs	r3, #39	; 0x27
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4013      	ands	r3, r2
 8003644:	d00c      	beq.n	8003660 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	2208      	movs	r2, #8
 800364a:	4313      	orrs	r3, r2
 800364c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2280      	movs	r2, #128	; 0x80
 8003654:	00d2      	lsls	r2, r2, #3
 8003656:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003658:	2327      	movs	r3, #39	; 0x27
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	2201      	movs	r2, #1
 800365e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4013      	ands	r3, r2
 8003668:	d00c      	beq.n	8003684 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	2202      	movs	r2, #2
 800366e:	4313      	orrs	r3, r2
 8003670:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2280      	movs	r2, #128	; 0x80
 8003678:	0092      	lsls	r2, r2, #2
 800367a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800367c:	2327      	movs	r3, #39	; 0x27
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	2201      	movs	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003684:	2327      	movs	r3, #39	; 0x27
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d01d      	beq.n	80036ca <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	0018      	movs	r0, r3
 8003692:	f7ff fe29 	bl	80032e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	490d      	ldr	r1, [pc, #52]	; (80036d8 <I2C_IsErrorOccurred+0x1fc>)
 80036a2:	400a      	ands	r2, r1
 80036a4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2241      	movs	r2, #65	; 0x41
 80036b6:	2120      	movs	r1, #32
 80036b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2242      	movs	r2, #66	; 0x42
 80036be:	2100      	movs	r1, #0
 80036c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2240      	movs	r2, #64	; 0x40
 80036c6:	2100      	movs	r1, #0
 80036c8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80036ca:	2327      	movs	r3, #39	; 0x27
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	781b      	ldrb	r3, [r3, #0]
}
 80036d0:	0018      	movs	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b00b      	add	sp, #44	; 0x2c
 80036d6:	bd90      	pop	{r4, r7, pc}
 80036d8:	fe00e800 	.word	0xfe00e800

080036dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	0008      	movs	r0, r1
 80036e6:	0011      	movs	r1, r2
 80036e8:	607b      	str	r3, [r7, #4]
 80036ea:	240a      	movs	r4, #10
 80036ec:	193b      	adds	r3, r7, r4
 80036ee:	1c02      	adds	r2, r0, #0
 80036f0:	801a      	strh	r2, [r3, #0]
 80036f2:	2009      	movs	r0, #9
 80036f4:	183b      	adds	r3, r7, r0
 80036f6:	1c0a      	adds	r2, r1, #0
 80036f8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036fa:	193b      	adds	r3, r7, r4
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	059b      	lsls	r3, r3, #22
 8003700:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003702:	183b      	adds	r3, r7, r0
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	0419      	lsls	r1, r3, #16
 8003708:	23ff      	movs	r3, #255	; 0xff
 800370a:	041b      	lsls	r3, r3, #16
 800370c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800370e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	4313      	orrs	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003726:	0d51      	lsrs	r1, r2, #21
 8003728:	2280      	movs	r2, #128	; 0x80
 800372a:	00d2      	lsls	r2, r2, #3
 800372c:	400a      	ands	r2, r1
 800372e:	4907      	ldr	r1, [pc, #28]	; (800374c <I2C_TransferConfig+0x70>)
 8003730:	430a      	orrs	r2, r1
 8003732:	43d2      	mvns	r2, r2
 8003734:	401a      	ands	r2, r3
 8003736:	0011      	movs	r1, r2
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b007      	add	sp, #28
 8003748:	bd90      	pop	{r4, r7, pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	03ff63ff 	.word	0x03ff63ff

08003750 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2241      	movs	r2, #65	; 0x41
 800375e:	5c9b      	ldrb	r3, [r3, r2]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b20      	cmp	r3, #32
 8003764:	d138      	bne.n	80037d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2240      	movs	r2, #64	; 0x40
 800376a:	5c9b      	ldrb	r3, [r3, r2]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003770:	2302      	movs	r3, #2
 8003772:	e032      	b.n	80037da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2240      	movs	r2, #64	; 0x40
 8003778:	2101      	movs	r1, #1
 800377a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2241      	movs	r2, #65	; 0x41
 8003780:	2124      	movs	r1, #36	; 0x24
 8003782:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2101      	movs	r1, #1
 8003790:	438a      	bics	r2, r1
 8003792:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4911      	ldr	r1, [pc, #68]	; (80037e4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80037a0:	400a      	ands	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6819      	ldr	r1, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2101      	movs	r1, #1
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2241      	movs	r2, #65	; 0x41
 80037c8:	2120      	movs	r1, #32
 80037ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2240      	movs	r2, #64	; 0x40
 80037d0:	2100      	movs	r1, #0
 80037d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e000      	b.n	80037da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
  }
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b002      	add	sp, #8
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	ffffefff 	.word	0xffffefff

080037e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2241      	movs	r2, #65	; 0x41
 80037f6:	5c9b      	ldrb	r3, [r3, r2]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d139      	bne.n	8003872 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2240      	movs	r2, #64	; 0x40
 8003802:	5c9b      	ldrb	r3, [r3, r2]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003808:	2302      	movs	r3, #2
 800380a:	e033      	b.n	8003874 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2240      	movs	r2, #64	; 0x40
 8003810:	2101      	movs	r1, #1
 8003812:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2241      	movs	r2, #65	; 0x41
 8003818:	2124      	movs	r1, #36	; 0x24
 800381a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2101      	movs	r1, #1
 8003828:	438a      	bics	r2, r1
 800382a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4a11      	ldr	r2, [pc, #68]	; (800387c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003838:	4013      	ands	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2101      	movs	r1, #1
 800385a:	430a      	orrs	r2, r1
 800385c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2241      	movs	r2, #65	; 0x41
 8003862:	2120      	movs	r1, #32
 8003864:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2240      	movs	r2, #64	; 0x40
 800386a:	2100      	movs	r1, #0
 800386c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e000      	b.n	8003874 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003872:	2302      	movs	r3, #2
  }
}
 8003874:	0018      	movs	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	b004      	add	sp, #16
 800387a:	bd80      	pop	{r7, pc}
 800387c:	fffff0ff 	.word	0xfffff0ff

08003880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003880:	b5b0      	push	{r4, r5, r7, lr}
 8003882:	b08a      	sub	sp, #40	; 0x28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	f000 fbaf 	bl	8003ff2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003894:	4bcf      	ldr	r3, [pc, #828]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	220c      	movs	r2, #12
 800389a:	4013      	ands	r3, r2
 800389c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800389e:	4bcd      	ldr	r3, [pc, #820]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	025b      	lsls	r3, r3, #9
 80038a6:	4013      	ands	r3, r2
 80038a8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2201      	movs	r2, #1
 80038b0:	4013      	ands	r3, r2
 80038b2:	d100      	bne.n	80038b6 <HAL_RCC_OscConfig+0x36>
 80038b4:	e07e      	b.n	80039b4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d007      	beq.n	80038cc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	2b0c      	cmp	r3, #12
 80038c0:	d112      	bne.n	80038e8 <HAL_RCC_OscConfig+0x68>
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	025b      	lsls	r3, r3, #9
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d10d      	bne.n	80038e8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	4bc1      	ldr	r3, [pc, #772]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	029b      	lsls	r3, r3, #10
 80038d4:	4013      	ands	r3, r2
 80038d6:	d100      	bne.n	80038da <HAL_RCC_OscConfig+0x5a>
 80038d8:	e06b      	b.n	80039b2 <HAL_RCC_OscConfig+0x132>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d167      	bne.n	80039b2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f000 fb85 	bl	8003ff2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	025b      	lsls	r3, r3, #9
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d107      	bne.n	8003904 <HAL_RCC_OscConfig+0x84>
 80038f4:	4bb7      	ldr	r3, [pc, #732]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4bb6      	ldr	r3, [pc, #728]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 80038fa:	2180      	movs	r1, #128	; 0x80
 80038fc:	0249      	lsls	r1, r1, #9
 80038fe:	430a      	orrs	r2, r1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	e027      	b.n	8003954 <HAL_RCC_OscConfig+0xd4>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	23a0      	movs	r3, #160	; 0xa0
 800390a:	02db      	lsls	r3, r3, #11
 800390c:	429a      	cmp	r2, r3
 800390e:	d10e      	bne.n	800392e <HAL_RCC_OscConfig+0xae>
 8003910:	4bb0      	ldr	r3, [pc, #704]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	4baf      	ldr	r3, [pc, #700]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	02c9      	lsls	r1, r1, #11
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	4bad      	ldr	r3, [pc, #692]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4bac      	ldr	r3, [pc, #688]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003924:	2180      	movs	r1, #128	; 0x80
 8003926:	0249      	lsls	r1, r1, #9
 8003928:	430a      	orrs	r2, r1
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e012      	b.n	8003954 <HAL_RCC_OscConfig+0xd4>
 800392e:	4ba9      	ldr	r3, [pc, #676]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4ba8      	ldr	r3, [pc, #672]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003934:	49a8      	ldr	r1, [pc, #672]	; (8003bd8 <HAL_RCC_OscConfig+0x358>)
 8003936:	400a      	ands	r2, r1
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	4ba6      	ldr	r3, [pc, #664]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	2380      	movs	r3, #128	; 0x80
 8003940:	025b      	lsls	r3, r3, #9
 8003942:	4013      	ands	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4ba2      	ldr	r3, [pc, #648]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4ba1      	ldr	r3, [pc, #644]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 800394e:	49a3      	ldr	r1, [pc, #652]	; (8003bdc <HAL_RCC_OscConfig+0x35c>)
 8003950:	400a      	ands	r2, r1
 8003952:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d015      	beq.n	8003988 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395c:	f7fe fbb8 	bl	80020d0 <HAL_GetTick>
 8003960:	0003      	movs	r3, r0
 8003962:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003964:	e009      	b.n	800397a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003966:	f7fe fbb3 	bl	80020d0 <HAL_GetTick>
 800396a:	0002      	movs	r2, r0
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b64      	cmp	r3, #100	; 0x64
 8003972:	d902      	bls.n	800397a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	f000 fb3c 	bl	8003ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800397a:	4b96      	ldr	r3, [pc, #600]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	2380      	movs	r3, #128	; 0x80
 8003980:	029b      	lsls	r3, r3, #10
 8003982:	4013      	ands	r3, r2
 8003984:	d0ef      	beq.n	8003966 <HAL_RCC_OscConfig+0xe6>
 8003986:	e015      	b.n	80039b4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fe fba2 	bl	80020d0 <HAL_GetTick>
 800398c:	0003      	movs	r3, r0
 800398e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003992:	f7fe fb9d 	bl	80020d0 <HAL_GetTick>
 8003996:	0002      	movs	r2, r0
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b64      	cmp	r3, #100	; 0x64
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e326      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039a4:	4b8b      	ldr	r3, [pc, #556]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	029b      	lsls	r3, r3, #10
 80039ac:	4013      	ands	r3, r2
 80039ae:	d1f0      	bne.n	8003992 <HAL_RCC_OscConfig+0x112>
 80039b0:	e000      	b.n	80039b4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2202      	movs	r2, #2
 80039ba:	4013      	ands	r3, r2
 80039bc:	d100      	bne.n	80039c0 <HAL_RCC_OscConfig+0x140>
 80039be:	e08b      	b.n	8003ad8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	d13e      	bne.n	8003a50 <HAL_RCC_OscConfig+0x1d0>
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d13b      	bne.n	8003a50 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80039d8:	4b7e      	ldr	r3, [pc, #504]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2204      	movs	r2, #4
 80039de:	4013      	ands	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_RCC_OscConfig+0x16c>
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e302      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ec:	4b79      	ldr	r3, [pc, #484]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4a7b      	ldr	r2, [pc, #492]	; (8003be0 <HAL_RCC_OscConfig+0x360>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	0019      	movs	r1, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	021a      	lsls	r2, r3, #8
 80039fc:	4b75      	ldr	r3, [pc, #468]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003a02:	4b74      	ldr	r3, [pc, #464]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2209      	movs	r2, #9
 8003a08:	4393      	bics	r3, r2
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	4b71      	ldr	r3, [pc, #452]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a14:	f000 fc40 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8003a18:	0001      	movs	r1, r0
 8003a1a:	4b6e      	ldr	r3, [pc, #440]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	091b      	lsrs	r3, r3, #4
 8003a20:	220f      	movs	r2, #15
 8003a22:	4013      	ands	r3, r2
 8003a24:	4a6f      	ldr	r2, [pc, #444]	; (8003be4 <HAL_RCC_OscConfig+0x364>)
 8003a26:	5cd3      	ldrb	r3, [r2, r3]
 8003a28:	000a      	movs	r2, r1
 8003a2a:	40da      	lsrs	r2, r3
 8003a2c:	4b6e      	ldr	r3, [pc, #440]	; (8003be8 <HAL_RCC_OscConfig+0x368>)
 8003a2e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003a30:	4b6e      	ldr	r3, [pc, #440]	; (8003bec <HAL_RCC_OscConfig+0x36c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2513      	movs	r5, #19
 8003a36:	197c      	adds	r4, r7, r5
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7fe fb03 	bl	8002044 <HAL_InitTick>
 8003a3e:	0003      	movs	r3, r0
 8003a40:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003a42:	197b      	adds	r3, r7, r5
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d046      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8003a4a:	197b      	adds	r3, r7, r5
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	e2d0      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d027      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003a56:	4b5f      	ldr	r3, [pc, #380]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2209      	movs	r2, #9
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	0019      	movs	r1, r3
 8003a60:	4b5c      	ldr	r3, [pc, #368]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fe fb32 	bl	80020d0 <HAL_GetTick>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fe fb2d 	bl	80020d0 <HAL_GetTick>
 8003a76:	0002      	movs	r2, r0
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e2b6      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a84:	4b53      	ldr	r3, [pc, #332]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2204      	movs	r2, #4
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d0f1      	beq.n	8003a72 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8e:	4b51      	ldr	r3, [pc, #324]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	4a53      	ldr	r2, [pc, #332]	; (8003be0 <HAL_RCC_OscConfig+0x360>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	0019      	movs	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	021a      	lsls	r2, r3, #8
 8003a9e:	4b4d      	ldr	r3, [pc, #308]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]
 8003aa4:	e018      	b.n	8003ad8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa6:	4b4b      	ldr	r3, [pc, #300]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003aac:	2101      	movs	r1, #1
 8003aae:	438a      	bics	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab2:	f7fe fb0d 	bl	80020d0 <HAL_GetTick>
 8003ab6:	0003      	movs	r3, r0
 8003ab8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003abc:	f7fe fb08 	bl	80020d0 <HAL_GetTick>
 8003ac0:	0002      	movs	r2, r0
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e291      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ace:	4b41      	ldr	r3, [pc, #260]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d1f1      	bne.n	8003abc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2210      	movs	r2, #16
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d100      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x264>
 8003ae2:	e0a1      	b.n	8003c28 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d140      	bne.n	8003b6c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aea:	4b3a      	ldr	r3, [pc, #232]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4013      	ands	r3, r2
 8003af4:	d005      	beq.n	8003b02 <HAL_RCC_OscConfig+0x282>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e277      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b02:	4b34      	ldr	r3, [pc, #208]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4a3a      	ldr	r2, [pc, #232]	; (8003bf0 <HAL_RCC_OscConfig+0x370>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b10:	4b30      	ldr	r3, [pc, #192]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003b12:	430a      	orrs	r2, r1
 8003b14:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b16:	4b2f      	ldr	r3, [pc, #188]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	0a19      	lsrs	r1, r3, #8
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	061a      	lsls	r2, r3, #24
 8003b24:	4b2b      	ldr	r3, [pc, #172]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003b26:	430a      	orrs	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	0b5b      	lsrs	r3, r3, #13
 8003b30:	3301      	adds	r3, #1
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	0212      	lsls	r2, r2, #8
 8003b36:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003b38:	4b26      	ldr	r3, [pc, #152]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	210f      	movs	r1, #15
 8003b40:	400b      	ands	r3, r1
 8003b42:	4928      	ldr	r1, [pc, #160]	; (8003be4 <HAL_RCC_OscConfig+0x364>)
 8003b44:	5ccb      	ldrb	r3, [r1, r3]
 8003b46:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003b48:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <HAL_RCC_OscConfig+0x368>)
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003b4c:	4b27      	ldr	r3, [pc, #156]	; (8003bec <HAL_RCC_OscConfig+0x36c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2513      	movs	r5, #19
 8003b52:	197c      	adds	r4, r7, r5
 8003b54:	0018      	movs	r0, r3
 8003b56:	f7fe fa75 	bl	8002044 <HAL_InitTick>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003b5e:	197b      	adds	r3, r7, r5
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d060      	beq.n	8003c28 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003b66:	197b      	adds	r3, r7, r5
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	e242      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d03f      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b74:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003b7a:	2180      	movs	r1, #128	; 0x80
 8003b7c:	0049      	lsls	r1, r1, #1
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b82:	f7fe faa5 	bl	80020d0 <HAL_GetTick>
 8003b86:	0003      	movs	r3, r0
 8003b88:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b8c:	f7fe faa0 	bl	80020d0 <HAL_GetTick>
 8003b90:	0002      	movs	r2, r0
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e229      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	2380      	movs	r3, #128	; 0x80
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003baa:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4a10      	ldr	r2, [pc, #64]	; (8003bf0 <HAL_RCC_OscConfig+0x370>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	0a19      	lsrs	r1, r3, #8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	061a      	lsls	r2, r3, #24
 8003bcc:	4b01      	ldr	r3, [pc, #4]	; (8003bd4 <HAL_RCC_OscConfig+0x354>)
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	e029      	b.n	8003c28 <HAL_RCC_OscConfig+0x3a8>
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	fffeffff 	.word	0xfffeffff
 8003bdc:	fffbffff 	.word	0xfffbffff
 8003be0:	ffffe0ff 	.word	0xffffe0ff
 8003be4:	08007574 	.word	0x08007574
 8003be8:	20000064 	.word	0x20000064
 8003bec:	20000068 	.word	0x20000068
 8003bf0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bf4:	4bbd      	ldr	r3, [pc, #756]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4bbc      	ldr	r3, [pc, #752]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003bfa:	49bd      	ldr	r1, [pc, #756]	; (8003ef0 <HAL_RCC_OscConfig+0x670>)
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fe fa66 	bl	80020d0 <HAL_GetTick>
 8003c04:	0003      	movs	r3, r0
 8003c06:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c0a:	f7fe fa61 	bl	80020d0 <HAL_GetTick>
 8003c0e:	0002      	movs	r2, r0
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e1ea      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003c1c:	4bb3      	ldr	r3, [pc, #716]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4013      	ands	r3, r2
 8003c26:	d1f0      	bne.n	8003c0a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d036      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d019      	beq.n	8003c6e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c3a:	4bac      	ldr	r3, [pc, #688]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003c3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c3e:	4bab      	ldr	r3, [pc, #684]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003c40:	2101      	movs	r1, #1
 8003c42:	430a      	orrs	r2, r1
 8003c44:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c46:	f7fe fa43 	bl	80020d0 <HAL_GetTick>
 8003c4a:	0003      	movs	r3, r0
 8003c4c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c50:	f7fe fa3e 	bl	80020d0 <HAL_GetTick>
 8003c54:	0002      	movs	r2, r0
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e1c7      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c62:	4ba2      	ldr	r3, [pc, #648]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c66:	2202      	movs	r2, #2
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d0f1      	beq.n	8003c50 <HAL_RCC_OscConfig+0x3d0>
 8003c6c:	e018      	b.n	8003ca0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c6e:	4b9f      	ldr	r3, [pc, #636]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c72:	4b9e      	ldr	r3, [pc, #632]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003c74:	2101      	movs	r1, #1
 8003c76:	438a      	bics	r2, r1
 8003c78:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7a:	f7fe fa29 	bl	80020d0 <HAL_GetTick>
 8003c7e:	0003      	movs	r3, r0
 8003c80:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c84:	f7fe fa24 	bl	80020d0 <HAL_GetTick>
 8003c88:	0002      	movs	r2, r0
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e1ad      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c96:	4b95      	ldr	r3, [pc, #596]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d1f1      	bne.n	8003c84 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d100      	bne.n	8003cac <HAL_RCC_OscConfig+0x42c>
 8003caa:	e0ae      	b.n	8003e0a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cac:	2027      	movs	r0, #39	; 0x27
 8003cae:	183b      	adds	r3, r7, r0
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb4:	4b8d      	ldr	r3, [pc, #564]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb8:	2380      	movs	r3, #128	; 0x80
 8003cba:	055b      	lsls	r3, r3, #21
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d109      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc0:	4b8a      	ldr	r3, [pc, #552]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc4:	4b89      	ldr	r3, [pc, #548]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003cc6:	2180      	movs	r1, #128	; 0x80
 8003cc8:	0549      	lsls	r1, r1, #21
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003cce:	183b      	adds	r3, r7, r0
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd4:	4b87      	ldr	r3, [pc, #540]	; (8003ef4 <HAL_RCC_OscConfig+0x674>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	2380      	movs	r3, #128	; 0x80
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d11a      	bne.n	8003d16 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ce0:	4b84      	ldr	r3, [pc, #528]	; (8003ef4 <HAL_RCC_OscConfig+0x674>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b83      	ldr	r3, [pc, #524]	; (8003ef4 <HAL_RCC_OscConfig+0x674>)
 8003ce6:	2180      	movs	r1, #128	; 0x80
 8003ce8:	0049      	lsls	r1, r1, #1
 8003cea:	430a      	orrs	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cee:	f7fe f9ef 	bl	80020d0 <HAL_GetTick>
 8003cf2:	0003      	movs	r3, r0
 8003cf4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf8:	f7fe f9ea 	bl	80020d0 <HAL_GetTick>
 8003cfc:	0002      	movs	r2, r0
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e173      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0a:	4b7a      	ldr	r3, [pc, #488]	; (8003ef4 <HAL_RCC_OscConfig+0x674>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	4013      	ands	r3, r2
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d107      	bne.n	8003d32 <HAL_RCC_OscConfig+0x4b2>
 8003d22:	4b72      	ldr	r3, [pc, #456]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003d24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d26:	4b71      	ldr	r3, [pc, #452]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003d28:	2180      	movs	r1, #128	; 0x80
 8003d2a:	0049      	lsls	r1, r1, #1
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	651a      	str	r2, [r3, #80]	; 0x50
 8003d30:	e031      	b.n	8003d96 <HAL_RCC_OscConfig+0x516>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4d4>
 8003d3a:	4b6c      	ldr	r3, [pc, #432]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003d3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d3e:	4b6b      	ldr	r3, [pc, #428]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003d40:	496b      	ldr	r1, [pc, #428]	; (8003ef0 <HAL_RCC_OscConfig+0x670>)
 8003d42:	400a      	ands	r2, r1
 8003d44:	651a      	str	r2, [r3, #80]	; 0x50
 8003d46:	4b69      	ldr	r3, [pc, #420]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003d48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d4a:	4b68      	ldr	r3, [pc, #416]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003d4c:	496a      	ldr	r1, [pc, #424]	; (8003ef8 <HAL_RCC_OscConfig+0x678>)
 8003d4e:	400a      	ands	r2, r1
 8003d50:	651a      	str	r2, [r3, #80]	; 0x50
 8003d52:	e020      	b.n	8003d96 <HAL_RCC_OscConfig+0x516>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	23a0      	movs	r3, #160	; 0xa0
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d10e      	bne.n	8003d7e <HAL_RCC_OscConfig+0x4fe>
 8003d60:	4b62      	ldr	r3, [pc, #392]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003d62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d64:	4b61      	ldr	r3, [pc, #388]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003d66:	2180      	movs	r1, #128	; 0x80
 8003d68:	00c9      	lsls	r1, r1, #3
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	651a      	str	r2, [r3, #80]	; 0x50
 8003d6e:	4b5f      	ldr	r3, [pc, #380]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003d70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d72:	4b5e      	ldr	r3, [pc, #376]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	0049      	lsls	r1, r1, #1
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	651a      	str	r2, [r3, #80]	; 0x50
 8003d7c:	e00b      	b.n	8003d96 <HAL_RCC_OscConfig+0x516>
 8003d7e:	4b5b      	ldr	r3, [pc, #364]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003d80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d82:	4b5a      	ldr	r3, [pc, #360]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003d84:	495a      	ldr	r1, [pc, #360]	; (8003ef0 <HAL_RCC_OscConfig+0x670>)
 8003d86:	400a      	ands	r2, r1
 8003d88:	651a      	str	r2, [r3, #80]	; 0x50
 8003d8a:	4b58      	ldr	r3, [pc, #352]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003d8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d8e:	4b57      	ldr	r3, [pc, #348]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003d90:	4959      	ldr	r1, [pc, #356]	; (8003ef8 <HAL_RCC_OscConfig+0x678>)
 8003d92:	400a      	ands	r2, r1
 8003d94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d015      	beq.n	8003dca <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9e:	f7fe f997 	bl	80020d0 <HAL_GetTick>
 8003da2:	0003      	movs	r3, r0
 8003da4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003da6:	e009      	b.n	8003dbc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da8:	f7fe f992 	bl	80020d0 <HAL_GetTick>
 8003dac:	0002      	movs	r2, r0
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	4a52      	ldr	r2, [pc, #328]	; (8003efc <HAL_RCC_OscConfig+0x67c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e11a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dbc:	4b4b      	ldr	r3, [pc, #300]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003dbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d0ef      	beq.n	8003da8 <HAL_RCC_OscConfig+0x528>
 8003dc8:	e014      	b.n	8003df4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dca:	f7fe f981 	bl	80020d0 <HAL_GetTick>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dd2:	e009      	b.n	8003de8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd4:	f7fe f97c 	bl	80020d0 <HAL_GetTick>
 8003dd8:	0002      	movs	r2, r0
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	4a47      	ldr	r2, [pc, #284]	; (8003efc <HAL_RCC_OscConfig+0x67c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e104      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003de8:	4b40      	ldr	r3, [pc, #256]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003dea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4013      	ands	r3, r2
 8003df2:	d1ef      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003df4:	2327      	movs	r3, #39	; 0x27
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d105      	bne.n	8003e0a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfe:	4b3b      	ldr	r3, [pc, #236]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e02:	4b3a      	ldr	r3, [pc, #232]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003e04:	493e      	ldr	r1, [pc, #248]	; (8003f00 <HAL_RCC_OscConfig+0x680>)
 8003e06:	400a      	ands	r2, r1
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	4013      	ands	r3, r2
 8003e12:	d049      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d026      	beq.n	8003e6a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003e1c:	4b33      	ldr	r3, [pc, #204]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	4b32      	ldr	r3, [pc, #200]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003e22:	2101      	movs	r1, #1
 8003e24:	430a      	orrs	r2, r1
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	4b30      	ldr	r3, [pc, #192]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2c:	4b2f      	ldr	r3, [pc, #188]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003e2e:	2101      	movs	r1, #1
 8003e30:	430a      	orrs	r2, r1
 8003e32:	635a      	str	r2, [r3, #52]	; 0x34
 8003e34:	4b33      	ldr	r3, [pc, #204]	; (8003f04 <HAL_RCC_OscConfig+0x684>)
 8003e36:	6a1a      	ldr	r2, [r3, #32]
 8003e38:	4b32      	ldr	r3, [pc, #200]	; (8003f04 <HAL_RCC_OscConfig+0x684>)
 8003e3a:	2180      	movs	r1, #128	; 0x80
 8003e3c:	0189      	lsls	r1, r1, #6
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e42:	f7fe f945 	bl	80020d0 <HAL_GetTick>
 8003e46:	0003      	movs	r3, r0
 8003e48:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e4c:	f7fe f940 	bl	80020d0 <HAL_GetTick>
 8003e50:	0002      	movs	r2, r0
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e0c9      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e5e:	4b23      	ldr	r3, [pc, #140]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2202      	movs	r2, #2
 8003e64:	4013      	ands	r3, r2
 8003e66:	d0f1      	beq.n	8003e4c <HAL_RCC_OscConfig+0x5cc>
 8003e68:	e01e      	b.n	8003ea8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003e6a:	4b20      	ldr	r3, [pc, #128]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	4b1f      	ldr	r3, [pc, #124]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003e70:	2101      	movs	r1, #1
 8003e72:	438a      	bics	r2, r1
 8003e74:	609a      	str	r2, [r3, #8]
 8003e76:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <HAL_RCC_OscConfig+0x684>)
 8003e78:	6a1a      	ldr	r2, [r3, #32]
 8003e7a:	4b22      	ldr	r3, [pc, #136]	; (8003f04 <HAL_RCC_OscConfig+0x684>)
 8003e7c:	4922      	ldr	r1, [pc, #136]	; (8003f08 <HAL_RCC_OscConfig+0x688>)
 8003e7e:	400a      	ands	r2, r1
 8003e80:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e82:	f7fe f925 	bl	80020d0 <HAL_GetTick>
 8003e86:	0003      	movs	r3, r0
 8003e88:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e8c:	f7fe f920 	bl	80020d0 <HAL_GetTick>
 8003e90:	0002      	movs	r2, r0
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e0a9      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e9e:	4b13      	ldr	r3, [pc, #76]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d1f1      	bne.n	8003e8c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d100      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x632>
 8003eb0:	e09e      	b.n	8003ff0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	2b0c      	cmp	r3, #12
 8003eb6:	d100      	bne.n	8003eba <HAL_RCC_OscConfig+0x63a>
 8003eb8:	e077      	b.n	8003faa <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d158      	bne.n	8003f74 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4b09      	ldr	r3, [pc, #36]	; (8003eec <HAL_RCC_OscConfig+0x66c>)
 8003ec8:	4910      	ldr	r1, [pc, #64]	; (8003f0c <HAL_RCC_OscConfig+0x68c>)
 8003eca:	400a      	ands	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ece:	f7fe f8ff 	bl	80020d0 <HAL_GetTick>
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003ed6:	e01b      	b.n	8003f10 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed8:	f7fe f8fa 	bl	80020d0 <HAL_GetTick>
 8003edc:	0002      	movs	r2, r0
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d914      	bls.n	8003f10 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e083      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	fffffeff 	.word	0xfffffeff
 8003ef4:	40007000 	.word	0x40007000
 8003ef8:	fffffbff 	.word	0xfffffbff
 8003efc:	00001388 	.word	0x00001388
 8003f00:	efffffff 	.word	0xefffffff
 8003f04:	40010000 	.word	0x40010000
 8003f08:	ffffdfff 	.word	0xffffdfff
 8003f0c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f10:	4b3a      	ldr	r3, [pc, #232]	; (8003ffc <HAL_RCC_OscConfig+0x77c>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	049b      	lsls	r3, r3, #18
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d1dd      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f1c:	4b37      	ldr	r3, [pc, #220]	; (8003ffc <HAL_RCC_OscConfig+0x77c>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	4a37      	ldr	r2, [pc, #220]	; (8004000 <HAL_RCC_OscConfig+0x780>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	0019      	movs	r1, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f34:	431a      	orrs	r2, r3
 8003f36:	4b31      	ldr	r3, [pc, #196]	; (8003ffc <HAL_RCC_OscConfig+0x77c>)
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f3c:	4b2f      	ldr	r3, [pc, #188]	; (8003ffc <HAL_RCC_OscConfig+0x77c>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b2e      	ldr	r3, [pc, #184]	; (8003ffc <HAL_RCC_OscConfig+0x77c>)
 8003f42:	2180      	movs	r1, #128	; 0x80
 8003f44:	0449      	lsls	r1, r1, #17
 8003f46:	430a      	orrs	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4a:	f7fe f8c1 	bl	80020d0 <HAL_GetTick>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fe f8bc 	bl	80020d0 <HAL_GetTick>
 8003f58:	0002      	movs	r2, r0
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e045      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003f66:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <HAL_RCC_OscConfig+0x77c>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	049b      	lsls	r3, r3, #18
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x6d4>
 8003f72:	e03d      	b.n	8003ff0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f74:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <HAL_RCC_OscConfig+0x77c>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_RCC_OscConfig+0x77c>)
 8003f7a:	4922      	ldr	r1, [pc, #136]	; (8004004 <HAL_RCC_OscConfig+0x784>)
 8003f7c:	400a      	ands	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fe f8a6 	bl	80020d0 <HAL_GetTick>
 8003f84:	0003      	movs	r3, r0
 8003f86:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f8a:	f7fe f8a1 	bl	80020d0 <HAL_GetTick>
 8003f8e:	0002      	movs	r2, r0
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e02a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f9c:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <HAL_RCC_OscConfig+0x77c>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	049b      	lsls	r3, r3, #18
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d1f0      	bne.n	8003f8a <HAL_RCC_OscConfig+0x70a>
 8003fa8:	e022      	b.n	8003ff0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e01d      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fb6:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <HAL_RCC_OscConfig+0x77c>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	025b      	lsls	r3, r3, #9
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d10f      	bne.n	8003fec <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	23f0      	movs	r3, #240	; 0xf0
 8003fd0:	039b      	lsls	r3, r3, #14
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d107      	bne.n	8003fec <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	23c0      	movs	r3, #192	; 0xc0
 8003fe0:	041b      	lsls	r3, r3, #16
 8003fe2:	401a      	ands	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b00a      	add	sp, #40	; 0x28
 8003ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	40021000 	.word	0x40021000
 8004000:	ff02ffff 	.word	0xff02ffff
 8004004:	feffffff 	.word	0xfeffffff

08004008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004008:	b5b0      	push	{r4, r5, r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e128      	b.n	800426e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800401c:	4b96      	ldr	r3, [pc, #600]	; (8004278 <HAL_RCC_ClockConfig+0x270>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2201      	movs	r2, #1
 8004022:	4013      	ands	r3, r2
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d91e      	bls.n	8004068 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b93      	ldr	r3, [pc, #588]	; (8004278 <HAL_RCC_ClockConfig+0x270>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2201      	movs	r2, #1
 8004030:	4393      	bics	r3, r2
 8004032:	0019      	movs	r1, r3
 8004034:	4b90      	ldr	r3, [pc, #576]	; (8004278 <HAL_RCC_ClockConfig+0x270>)
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800403c:	f7fe f848 	bl	80020d0 <HAL_GetTick>
 8004040:	0003      	movs	r3, r0
 8004042:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004044:	e009      	b.n	800405a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004046:	f7fe f843 	bl	80020d0 <HAL_GetTick>
 800404a:	0002      	movs	r2, r0
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	4a8a      	ldr	r2, [pc, #552]	; (800427c <HAL_RCC_ClockConfig+0x274>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d901      	bls.n	800405a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e109      	b.n	800426e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b87      	ldr	r3, [pc, #540]	; (8004278 <HAL_RCC_ClockConfig+0x270>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2201      	movs	r2, #1
 8004060:	4013      	ands	r3, r2
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d1ee      	bne.n	8004046 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2202      	movs	r2, #2
 800406e:	4013      	ands	r3, r2
 8004070:	d009      	beq.n	8004086 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004072:	4b83      	ldr	r3, [pc, #524]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	22f0      	movs	r2, #240	; 0xf0
 8004078:	4393      	bics	r3, r2
 800407a:	0019      	movs	r1, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	4b7f      	ldr	r3, [pc, #508]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 8004082:	430a      	orrs	r2, r1
 8004084:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2201      	movs	r2, #1
 800408c:	4013      	ands	r3, r2
 800408e:	d100      	bne.n	8004092 <HAL_RCC_ClockConfig+0x8a>
 8004090:	e089      	b.n	80041a6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d107      	bne.n	80040aa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800409a:	4b79      	ldr	r3, [pc, #484]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	2380      	movs	r3, #128	; 0x80
 80040a0:	029b      	lsls	r3, r3, #10
 80040a2:	4013      	ands	r3, r2
 80040a4:	d120      	bne.n	80040e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e0e1      	b.n	800426e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040b2:	4b73      	ldr	r3, [pc, #460]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	2380      	movs	r3, #128	; 0x80
 80040b8:	049b      	lsls	r3, r3, #18
 80040ba:	4013      	ands	r3, r2
 80040bc:	d114      	bne.n	80040e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e0d5      	b.n	800426e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d106      	bne.n	80040d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040ca:	4b6d      	ldr	r3, [pc, #436]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2204      	movs	r2, #4
 80040d0:	4013      	ands	r3, r2
 80040d2:	d109      	bne.n	80040e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0ca      	b.n	800426e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040d8:	4b69      	ldr	r3, [pc, #420]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4013      	ands	r3, r2
 80040e2:	d101      	bne.n	80040e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0c2      	b.n	800426e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040e8:	4b65      	ldr	r3, [pc, #404]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2203      	movs	r2, #3
 80040ee:	4393      	bics	r3, r2
 80040f0:	0019      	movs	r1, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	4b62      	ldr	r3, [pc, #392]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 80040f8:	430a      	orrs	r2, r1
 80040fa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040fc:	f7fd ffe8 	bl	80020d0 <HAL_GetTick>
 8004100:	0003      	movs	r3, r0
 8004102:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d111      	bne.n	8004130 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800410c:	e009      	b.n	8004122 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800410e:	f7fd ffdf 	bl	80020d0 <HAL_GetTick>
 8004112:	0002      	movs	r2, r0
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	4a58      	ldr	r2, [pc, #352]	; (800427c <HAL_RCC_ClockConfig+0x274>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e0a5      	b.n	800426e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004122:	4b57      	ldr	r3, [pc, #348]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	220c      	movs	r2, #12
 8004128:	4013      	ands	r3, r2
 800412a:	2b08      	cmp	r3, #8
 800412c:	d1ef      	bne.n	800410e <HAL_RCC_ClockConfig+0x106>
 800412e:	e03a      	b.n	80041a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b03      	cmp	r3, #3
 8004136:	d111      	bne.n	800415c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004138:	e009      	b.n	800414e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413a:	f7fd ffc9 	bl	80020d0 <HAL_GetTick>
 800413e:	0002      	movs	r2, r0
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	4a4d      	ldr	r2, [pc, #308]	; (800427c <HAL_RCC_ClockConfig+0x274>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d901      	bls.n	800414e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e08f      	b.n	800426e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800414e:	4b4c      	ldr	r3, [pc, #304]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	220c      	movs	r2, #12
 8004154:	4013      	ands	r3, r2
 8004156:	2b0c      	cmp	r3, #12
 8004158:	d1ef      	bne.n	800413a <HAL_RCC_ClockConfig+0x132>
 800415a:	e024      	b.n	80041a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d11b      	bne.n	800419c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004164:	e009      	b.n	800417a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004166:	f7fd ffb3 	bl	80020d0 <HAL_GetTick>
 800416a:	0002      	movs	r2, r0
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	4a42      	ldr	r2, [pc, #264]	; (800427c <HAL_RCC_ClockConfig+0x274>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e079      	b.n	800426e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800417a:	4b41      	ldr	r3, [pc, #260]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	220c      	movs	r2, #12
 8004180:	4013      	ands	r3, r2
 8004182:	2b04      	cmp	r3, #4
 8004184:	d1ef      	bne.n	8004166 <HAL_RCC_ClockConfig+0x15e>
 8004186:	e00e      	b.n	80041a6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004188:	f7fd ffa2 	bl	80020d0 <HAL_GetTick>
 800418c:	0002      	movs	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	4a3a      	ldr	r2, [pc, #232]	; (800427c <HAL_RCC_ClockConfig+0x274>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d901      	bls.n	800419c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e068      	b.n	800426e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800419c:	4b38      	ldr	r3, [pc, #224]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	220c      	movs	r2, #12
 80041a2:	4013      	ands	r3, r2
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a6:	4b34      	ldr	r3, [pc, #208]	; (8004278 <HAL_RCC_ClockConfig+0x270>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2201      	movs	r2, #1
 80041ac:	4013      	ands	r3, r2
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d21e      	bcs.n	80041f2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b4:	4b30      	ldr	r3, [pc, #192]	; (8004278 <HAL_RCC_ClockConfig+0x270>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2201      	movs	r2, #1
 80041ba:	4393      	bics	r3, r2
 80041bc:	0019      	movs	r1, r3
 80041be:	4b2e      	ldr	r3, [pc, #184]	; (8004278 <HAL_RCC_ClockConfig+0x270>)
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041c6:	f7fd ff83 	bl	80020d0 <HAL_GetTick>
 80041ca:	0003      	movs	r3, r0
 80041cc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ce:	e009      	b.n	80041e4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d0:	f7fd ff7e 	bl	80020d0 <HAL_GetTick>
 80041d4:	0002      	movs	r2, r0
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	4a28      	ldr	r2, [pc, #160]	; (800427c <HAL_RCC_ClockConfig+0x274>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e044      	b.n	800426e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e4:	4b24      	ldr	r3, [pc, #144]	; (8004278 <HAL_RCC_ClockConfig+0x270>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2201      	movs	r2, #1
 80041ea:	4013      	ands	r3, r2
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d1ee      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2204      	movs	r2, #4
 80041f8:	4013      	ands	r3, r2
 80041fa:	d009      	beq.n	8004210 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041fc:	4b20      	ldr	r3, [pc, #128]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4a20      	ldr	r2, [pc, #128]	; (8004284 <HAL_RCC_ClockConfig+0x27c>)
 8004202:	4013      	ands	r3, r2
 8004204:	0019      	movs	r1, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 800420c:	430a      	orrs	r2, r1
 800420e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2208      	movs	r2, #8
 8004216:	4013      	ands	r3, r2
 8004218:	d00a      	beq.n	8004230 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800421a:	4b19      	ldr	r3, [pc, #100]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	4a1a      	ldr	r2, [pc, #104]	; (8004288 <HAL_RCC_ClockConfig+0x280>)
 8004220:	4013      	ands	r3, r2
 8004222:	0019      	movs	r1, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	00da      	lsls	r2, r3, #3
 800422a:	4b15      	ldr	r3, [pc, #84]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 800422c:	430a      	orrs	r2, r1
 800422e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004230:	f000 f832 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8004234:	0001      	movs	r1, r0
 8004236:	4b12      	ldr	r3, [pc, #72]	; (8004280 <HAL_RCC_ClockConfig+0x278>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	091b      	lsrs	r3, r3, #4
 800423c:	220f      	movs	r2, #15
 800423e:	4013      	ands	r3, r2
 8004240:	4a12      	ldr	r2, [pc, #72]	; (800428c <HAL_RCC_ClockConfig+0x284>)
 8004242:	5cd3      	ldrb	r3, [r2, r3]
 8004244:	000a      	movs	r2, r1
 8004246:	40da      	lsrs	r2, r3
 8004248:	4b11      	ldr	r3, [pc, #68]	; (8004290 <HAL_RCC_ClockConfig+0x288>)
 800424a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800424c:	4b11      	ldr	r3, [pc, #68]	; (8004294 <HAL_RCC_ClockConfig+0x28c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	250b      	movs	r5, #11
 8004252:	197c      	adds	r4, r7, r5
 8004254:	0018      	movs	r0, r3
 8004256:	f7fd fef5 	bl	8002044 <HAL_InitTick>
 800425a:	0003      	movs	r3, r0
 800425c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800425e:	197b      	adds	r3, r7, r5
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004266:	197b      	adds	r3, r7, r5
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	e000      	b.n	800426e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	0018      	movs	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	b004      	add	sp, #16
 8004274:	bdb0      	pop	{r4, r5, r7, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	40022000 	.word	0x40022000
 800427c:	00001388 	.word	0x00001388
 8004280:	40021000 	.word	0x40021000
 8004284:	fffff8ff 	.word	0xfffff8ff
 8004288:	ffffc7ff 	.word	0xffffc7ff
 800428c:	08007574 	.word	0x08007574
 8004290:	20000064 	.word	0x20000064
 8004294:	20000068 	.word	0x20000068

08004298 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004298:	b5b0      	push	{r4, r5, r7, lr}
 800429a:	b08e      	sub	sp, #56	; 0x38
 800429c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800429e:	4b4c      	ldr	r3, [pc, #304]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a6:	230c      	movs	r3, #12
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b0c      	cmp	r3, #12
 80042ac:	d014      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0x40>
 80042ae:	d900      	bls.n	80042b2 <HAL_RCC_GetSysClockFreq+0x1a>
 80042b0:	e07b      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x112>
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d002      	beq.n	80042bc <HAL_RCC_GetSysClockFreq+0x24>
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d00b      	beq.n	80042d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ba:	e076      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80042bc:	4b44      	ldr	r3, [pc, #272]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2210      	movs	r2, #16
 80042c2:	4013      	ands	r3, r2
 80042c4:	d002      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80042c6:	4b43      	ldr	r3, [pc, #268]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80042c8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80042ca:	e07c      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80042cc:	4b42      	ldr	r3, [pc, #264]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x140>)
 80042ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042d0:	e079      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042d2:	4b42      	ldr	r3, [pc, #264]	; (80043dc <HAL_RCC_GetSysClockFreq+0x144>)
 80042d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042d6:	e076      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80042d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042da:	0c9a      	lsrs	r2, r3, #18
 80042dc:	230f      	movs	r3, #15
 80042de:	401a      	ands	r2, r3
 80042e0:	4b3f      	ldr	r3, [pc, #252]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x148>)
 80042e2:	5c9b      	ldrb	r3, [r3, r2]
 80042e4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	0d9a      	lsrs	r2, r3, #22
 80042ea:	2303      	movs	r3, #3
 80042ec:	4013      	ands	r3, r2
 80042ee:	3301      	adds	r3, #1
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042f2:	4b37      	ldr	r3, [pc, #220]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	025b      	lsls	r3, r3, #9
 80042fa:	4013      	ands	r3, r2
 80042fc:	d01a      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	4a35      	ldr	r2, [pc, #212]	; (80043dc <HAL_RCC_GetSysClockFreq+0x144>)
 8004308:	2300      	movs	r3, #0
 800430a:	69b8      	ldr	r0, [r7, #24]
 800430c:	69f9      	ldr	r1, [r7, #28]
 800430e:	f7fc f89b 	bl	8000448 <__aeabi_lmul>
 8004312:	0002      	movs	r2, r0
 8004314:	000b      	movs	r3, r1
 8004316:	0010      	movs	r0, r2
 8004318:	0019      	movs	r1, r3
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f7fc f86f 	bl	8000408 <__aeabi_uldivmod>
 800432a:	0002      	movs	r2, r0
 800432c:	000b      	movs	r3, r1
 800432e:	0013      	movs	r3, r2
 8004330:	637b      	str	r3, [r7, #52]	; 0x34
 8004332:	e037      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004334:	4b26      	ldr	r3, [pc, #152]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2210      	movs	r2, #16
 800433a:	4013      	ands	r3, r2
 800433c:	d01a      	beq.n	8004374 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	4a23      	ldr	r2, [pc, #140]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004348:	2300      	movs	r3, #0
 800434a:	68b8      	ldr	r0, [r7, #8]
 800434c:	68f9      	ldr	r1, [r7, #12]
 800434e:	f7fc f87b 	bl	8000448 <__aeabi_lmul>
 8004352:	0002      	movs	r2, r0
 8004354:	000b      	movs	r3, r1
 8004356:	0010      	movs	r0, r2
 8004358:	0019      	movs	r1, r3
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	603b      	str	r3, [r7, #0]
 800435e:	2300      	movs	r3, #0
 8004360:	607b      	str	r3, [r7, #4]
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f7fc f84f 	bl	8000408 <__aeabi_uldivmod>
 800436a:	0002      	movs	r2, r0
 800436c:	000b      	movs	r3, r1
 800436e:	0013      	movs	r3, r2
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
 8004372:	e017      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004376:	0018      	movs	r0, r3
 8004378:	2300      	movs	r3, #0
 800437a:	0019      	movs	r1, r3
 800437c:	4a16      	ldr	r2, [pc, #88]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x140>)
 800437e:	2300      	movs	r3, #0
 8004380:	f7fc f862 	bl	8000448 <__aeabi_lmul>
 8004384:	0002      	movs	r2, r0
 8004386:	000b      	movs	r3, r1
 8004388:	0010      	movs	r0, r2
 800438a:	0019      	movs	r1, r3
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	001c      	movs	r4, r3
 8004390:	2300      	movs	r3, #0
 8004392:	001d      	movs	r5, r3
 8004394:	0022      	movs	r2, r4
 8004396:	002b      	movs	r3, r5
 8004398:	f7fc f836 	bl	8000408 <__aeabi_uldivmod>
 800439c:	0002      	movs	r2, r0
 800439e:	000b      	movs	r3, r1
 80043a0:	0013      	movs	r3, r2
 80043a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80043a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043a8:	e00d      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80043aa:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	0b5b      	lsrs	r3, r3, #13
 80043b0:	2207      	movs	r2, #7
 80043b2:	4013      	ands	r3, r2
 80043b4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	3301      	adds	r3, #1
 80043ba:	2280      	movs	r2, #128	; 0x80
 80043bc:	0212      	lsls	r2, r2, #8
 80043be:	409a      	lsls	r2, r3
 80043c0:	0013      	movs	r3, r2
 80043c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043c4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80043c8:	0018      	movs	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b00e      	add	sp, #56	; 0x38
 80043ce:	bdb0      	pop	{r4, r5, r7, pc}
 80043d0:	40021000 	.word	0x40021000
 80043d4:	003d0900 	.word	0x003d0900
 80043d8:	00f42400 	.word	0x00f42400
 80043dc:	007a1200 	.word	0x007a1200
 80043e0:	08007584 	.word	0x08007584

080043e4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80043ec:	2317      	movs	r3, #23
 80043ee:	18fb      	adds	r3, r7, r3
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2220      	movs	r2, #32
 80043fa:	4013      	ands	r3, r2
 80043fc:	d106      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	4013      	ands	r3, r2
 8004408:	d100      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800440a:	e104      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440c:	4bb1      	ldr	r3, [pc, #708]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800440e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004410:	2380      	movs	r3, #128	; 0x80
 8004412:	055b      	lsls	r3, r3, #21
 8004414:	4013      	ands	r3, r2
 8004416:	d10a      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004418:	4bae      	ldr	r3, [pc, #696]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800441a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800441c:	4bad      	ldr	r3, [pc, #692]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800441e:	2180      	movs	r1, #128	; 0x80
 8004420:	0549      	lsls	r1, r1, #21
 8004422:	430a      	orrs	r2, r1
 8004424:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004426:	2317      	movs	r3, #23
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442e:	4baa      	ldr	r3, [pc, #680]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	2380      	movs	r3, #128	; 0x80
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	4013      	ands	r3, r2
 8004438:	d11a      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800443a:	4ba7      	ldr	r3, [pc, #668]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	4ba6      	ldr	r3, [pc, #664]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004440:	2180      	movs	r1, #128	; 0x80
 8004442:	0049      	lsls	r1, r1, #1
 8004444:	430a      	orrs	r2, r1
 8004446:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004448:	f7fd fe42 	bl	80020d0 <HAL_GetTick>
 800444c:	0003      	movs	r3, r0
 800444e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004450:	e008      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004452:	f7fd fe3d 	bl	80020d0 <HAL_GetTick>
 8004456:	0002      	movs	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b64      	cmp	r3, #100	; 0x64
 800445e:	d901      	bls.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e133      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004464:	4b9c      	ldr	r3, [pc, #624]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	4013      	ands	r3, r2
 800446e:	d0f0      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004470:	4b98      	ldr	r3, [pc, #608]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	23c0      	movs	r3, #192	; 0xc0
 8004476:	039b      	lsls	r3, r3, #14
 8004478:	4013      	ands	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	23c0      	movs	r3, #192	; 0xc0
 8004482:	039b      	lsls	r3, r3, #14
 8004484:	4013      	ands	r3, r2
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	429a      	cmp	r2, r3
 800448a:	d107      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	23c0      	movs	r3, #192	; 0xc0
 8004492:	039b      	lsls	r3, r3, #14
 8004494:	4013      	ands	r3, r2
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	429a      	cmp	r2, r3
 800449a:	d013      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	23c0      	movs	r3, #192	; 0xc0
 80044a2:	029b      	lsls	r3, r3, #10
 80044a4:	401a      	ands	r2, r3
 80044a6:	23c0      	movs	r3, #192	; 0xc0
 80044a8:	029b      	lsls	r3, r3, #10
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d10a      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80044ae:	4b89      	ldr	r3, [pc, #548]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	2380      	movs	r3, #128	; 0x80
 80044b4:	029b      	lsls	r3, r3, #10
 80044b6:	401a      	ands	r2, r3
 80044b8:	2380      	movs	r3, #128	; 0x80
 80044ba:	029b      	lsls	r3, r3, #10
 80044bc:	429a      	cmp	r2, r3
 80044be:	d101      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e103      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80044c4:	4b83      	ldr	r3, [pc, #524]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80044c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044c8:	23c0      	movs	r3, #192	; 0xc0
 80044ca:	029b      	lsls	r3, r3, #10
 80044cc:	4013      	ands	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d049      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	23c0      	movs	r3, #192	; 0xc0
 80044dc:	029b      	lsls	r3, r3, #10
 80044de:	4013      	ands	r3, r2
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d004      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2220      	movs	r2, #32
 80044ec:	4013      	ands	r3, r2
 80044ee:	d10d      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	23c0      	movs	r3, #192	; 0xc0
 80044f6:	029b      	lsls	r3, r3, #10
 80044f8:	4013      	ands	r3, r2
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d034      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	4013      	ands	r3, r2
 800450a:	d02e      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800450c:	4b71      	ldr	r3, [pc, #452]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800450e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004510:	4a72      	ldr	r2, [pc, #456]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004512:	4013      	ands	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004516:	4b6f      	ldr	r3, [pc, #444]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004518:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800451a:	4b6e      	ldr	r3, [pc, #440]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800451c:	2180      	movs	r1, #128	; 0x80
 800451e:	0309      	lsls	r1, r1, #12
 8004520:	430a      	orrs	r2, r1
 8004522:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004524:	4b6b      	ldr	r3, [pc, #428]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004526:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004528:	4b6a      	ldr	r3, [pc, #424]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800452a:	496d      	ldr	r1, [pc, #436]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800452c:	400a      	ands	r2, r1
 800452e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004530:	4b68      	ldr	r3, [pc, #416]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	4013      	ands	r3, r2
 800453e:	d014      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004540:	f7fd fdc6 	bl	80020d0 <HAL_GetTick>
 8004544:	0003      	movs	r3, r0
 8004546:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004548:	e009      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800454a:	f7fd fdc1 	bl	80020d0 <HAL_GetTick>
 800454e:	0002      	movs	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	4a63      	ldr	r2, [pc, #396]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e0b6      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800455e:	4b5d      	ldr	r3, [pc, #372]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004562:	2380      	movs	r3, #128	; 0x80
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4013      	ands	r3, r2
 8004568:	d0ef      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	2380      	movs	r3, #128	; 0x80
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	4013      	ands	r3, r2
 8004574:	d01f      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	23c0      	movs	r3, #192	; 0xc0
 800457c:	029b      	lsls	r3, r3, #10
 800457e:	401a      	ands	r2, r3
 8004580:	23c0      	movs	r3, #192	; 0xc0
 8004582:	029b      	lsls	r3, r3, #10
 8004584:	429a      	cmp	r2, r3
 8004586:	d10c      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004588:	4b52      	ldr	r3, [pc, #328]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a56      	ldr	r2, [pc, #344]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800458e:	4013      	ands	r3, r2
 8004590:	0019      	movs	r1, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	23c0      	movs	r3, #192	; 0xc0
 8004598:	039b      	lsls	r3, r3, #14
 800459a:	401a      	ands	r2, r3
 800459c:	4b4d      	ldr	r3, [pc, #308]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800459e:	430a      	orrs	r2, r1
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	4b4c      	ldr	r3, [pc, #304]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	23c0      	movs	r3, #192	; 0xc0
 80045ac:	029b      	lsls	r3, r3, #10
 80045ae:	401a      	ands	r2, r3
 80045b0:	4b48      	ldr	r3, [pc, #288]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045b2:	430a      	orrs	r2, r1
 80045b4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2220      	movs	r2, #32
 80045bc:	4013      	ands	r3, r2
 80045be:	d01f      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	23c0      	movs	r3, #192	; 0xc0
 80045c6:	029b      	lsls	r3, r3, #10
 80045c8:	401a      	ands	r2, r3
 80045ca:	23c0      	movs	r3, #192	; 0xc0
 80045cc:	029b      	lsls	r3, r3, #10
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d10c      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x208>
 80045d2:	4b40      	ldr	r3, [pc, #256]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a44      	ldr	r2, [pc, #272]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045d8:	4013      	ands	r3, r2
 80045da:	0019      	movs	r1, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	23c0      	movs	r3, #192	; 0xc0
 80045e2:	039b      	lsls	r3, r3, #14
 80045e4:	401a      	ands	r2, r3
 80045e6:	4b3b      	ldr	r3, [pc, #236]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045e8:	430a      	orrs	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	4b39      	ldr	r3, [pc, #228]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045ee:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	23c0      	movs	r3, #192	; 0xc0
 80045f6:	029b      	lsls	r3, r3, #10
 80045f8:	401a      	ands	r2, r3
 80045fa:	4b36      	ldr	r3, [pc, #216]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045fc:	430a      	orrs	r2, r1
 80045fe:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004600:	2317      	movs	r3, #23
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d105      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460a:	4b32      	ldr	r3, [pc, #200]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800460c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800460e:	4b31      	ldr	r3, [pc, #196]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004610:	4936      	ldr	r1, [pc, #216]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004612:	400a      	ands	r2, r1
 8004614:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2201      	movs	r2, #1
 800461c:	4013      	ands	r3, r2
 800461e:	d009      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004620:	4b2c      	ldr	r3, [pc, #176]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004624:	2203      	movs	r2, #3
 8004626:	4393      	bics	r3, r2
 8004628:	0019      	movs	r1, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	4b29      	ldr	r3, [pc, #164]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004630:	430a      	orrs	r2, r1
 8004632:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d009      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800463e:	4b25      	ldr	r3, [pc, #148]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004642:	220c      	movs	r2, #12
 8004644:	4393      	bics	r3, r2
 8004646:	0019      	movs	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	4b21      	ldr	r3, [pc, #132]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800464e:	430a      	orrs	r2, r1
 8004650:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2204      	movs	r2, #4
 8004658:	4013      	ands	r3, r2
 800465a:	d009      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800465c:	4b1d      	ldr	r3, [pc, #116]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800465e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004660:	4a23      	ldr	r2, [pc, #140]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8004662:	4013      	ands	r3, r2
 8004664:	0019      	movs	r1, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	4b1a      	ldr	r3, [pc, #104]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800466c:	430a      	orrs	r2, r1
 800466e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2208      	movs	r2, #8
 8004676:	4013      	ands	r3, r2
 8004678:	d009      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800467a:	4b16      	ldr	r3, [pc, #88]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800467c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467e:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004680:	4013      	ands	r3, r2
 8004682:	0019      	movs	r1, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699a      	ldr	r2, [r3, #24]
 8004688:	4b12      	ldr	r3, [pc, #72]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800468a:	430a      	orrs	r2, r1
 800468c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2240      	movs	r2, #64	; 0x40
 8004694:	4013      	ands	r3, r2
 8004696:	d009      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004698:	4b0e      	ldr	r3, [pc, #56]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800469a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469c:	4a16      	ldr	r2, [pc, #88]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800469e:	4013      	ands	r3, r2
 80046a0:	0019      	movs	r1, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1a      	ldr	r2, [r3, #32]
 80046a6:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046a8:	430a      	orrs	r2, r1
 80046aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2280      	movs	r2, #128	; 0x80
 80046b2:	4013      	ands	r3, r2
 80046b4:	d009      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80046b6:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ba:	4a10      	ldr	r2, [pc, #64]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80046bc:	4013      	ands	r3, r2
 80046be:	0019      	movs	r1, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046c6:	430a      	orrs	r2, r1
 80046c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b006      	add	sp, #24
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40021000 	.word	0x40021000
 80046d8:	40007000 	.word	0x40007000
 80046dc:	fffcffff 	.word	0xfffcffff
 80046e0:	fff7ffff 	.word	0xfff7ffff
 80046e4:	00001388 	.word	0x00001388
 80046e8:	ffcfffff 	.word	0xffcfffff
 80046ec:	efffffff 	.word	0xefffffff
 80046f0:	fffff3ff 	.word	0xfffff3ff
 80046f4:	ffffcfff 	.word	0xffffcfff
 80046f8:	fbffffff 	.word	0xfbffffff
 80046fc:	fff3ffff 	.word	0xfff3ffff

08004700 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004700:	b5b0      	push	{r4, r5, r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004708:	230f      	movs	r3, #15
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e088      	b.n	800482c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2221      	movs	r2, #33	; 0x21
 800471e:	5c9b      	ldrb	r3, [r3, r2]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d107      	bne.n	8004736 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	2100      	movs	r1, #0
 800472c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	0018      	movs	r0, r3
 8004732:	f7fd fbbd 	bl	8001eb0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2221      	movs	r2, #33	; 0x21
 800473a:	2102      	movs	r1, #2
 800473c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	2210      	movs	r2, #16
 8004746:	4013      	ands	r3, r2
 8004748:	2b10      	cmp	r3, #16
 800474a:	d05f      	beq.n	800480c <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	22ca      	movs	r2, #202	; 0xca
 8004752:	625a      	str	r2, [r3, #36]	; 0x24
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2253      	movs	r2, #83	; 0x53
 800475a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800475c:	250f      	movs	r5, #15
 800475e:	197c      	adds	r4, r7, r5
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	0018      	movs	r0, r3
 8004764:	f000 fc2c 	bl	8004fc0 <RTC_EnterInitMode>
 8004768:	0003      	movs	r3, r0
 800476a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800476c:	0028      	movs	r0, r5
 800476e:	183b      	adds	r3, r7, r0
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d12c      	bne.n	80047d0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	492c      	ldr	r1, [pc, #176]	; (8004834 <HAL_RTC_Init+0x134>)
 8004782:	400a      	ands	r2, r1
 8004784:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6899      	ldr	r1, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	68d2      	ldr	r2, [r2, #12]
 80047ac:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6919      	ldr	r1, [r3, #16]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	041a      	lsls	r2, r3, #16
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80047c2:	183c      	adds	r4, r7, r0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	0018      	movs	r0, r3
 80047c8:	f000 fc3e 	bl	8005048 <RTC_ExitInitMode>
 80047cc:	0003      	movs	r3, r0
 80047ce:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80047d0:	230f      	movs	r3, #15
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d113      	bne.n	8004802 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2103      	movs	r1, #3
 80047e6:	438a      	bics	r2, r1
 80047e8:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	22ff      	movs	r2, #255	; 0xff
 8004808:	625a      	str	r2, [r3, #36]	; 0x24
 800480a:	e003      	b.n	8004814 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800480c:	230f      	movs	r3, #15
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004814:	230f      	movs	r3, #15
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d103      	bne.n	8004826 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2221      	movs	r2, #33	; 0x21
 8004822:	2101      	movs	r1, #1
 8004824:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004826:	230f      	movs	r3, #15
 8004828:	18fb      	adds	r3, r7, r3
 800482a:	781b      	ldrb	r3, [r3, #0]
}
 800482c:	0018      	movs	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	b004      	add	sp, #16
 8004832:	bdb0      	pop	{r4, r5, r7, pc}
 8004834:	ff8fffbf 	.word	0xff8fffbf

08004838 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004838:	b5b0      	push	{r4, r5, r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	5c9b      	ldrb	r3, [r3, r2]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_RTC_SetTime+0x1e>
 8004852:	2302      	movs	r3, #2
 8004854:	e092      	b.n	800497c <HAL_RTC_SetTime+0x144>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2220      	movs	r2, #32
 800485a:	2101      	movs	r1, #1
 800485c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2221      	movs	r2, #33	; 0x21
 8004862:	2102      	movs	r1, #2
 8004864:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d125      	bne.n	80048b8 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2240      	movs	r2, #64	; 0x40
 8004874:	4013      	ands	r3, r2
 8004876:	d102      	bne.n	800487e <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2200      	movs	r2, #0
 800487c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	0018      	movs	r0, r3
 8004884:	f000 fc0a 	bl	800509c <RTC_ByteToBcd2>
 8004888:	0003      	movs	r3, r0
 800488a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	785b      	ldrb	r3, [r3, #1]
 8004890:	0018      	movs	r0, r3
 8004892:	f000 fc03 	bl	800509c <RTC_ByteToBcd2>
 8004896:	0003      	movs	r3, r0
 8004898:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800489a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	789b      	ldrb	r3, [r3, #2]
 80048a0:	0018      	movs	r0, r3
 80048a2:	f000 fbfb 	bl	800509c <RTC_ByteToBcd2>
 80048a6:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80048a8:	0022      	movs	r2, r4
 80048aa:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	78db      	ldrb	r3, [r3, #3]
 80048b0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	e017      	b.n	80048e8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2240      	movs	r2, #64	; 0x40
 80048c0:	4013      	ands	r3, r2
 80048c2:	d102      	bne.n	80048ca <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2200      	movs	r2, #0
 80048c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80048d6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80048dc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	78db      	ldrb	r3, [r3, #3]
 80048e2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	22ca      	movs	r2, #202	; 0xca
 80048ee:	625a      	str	r2, [r3, #36]	; 0x24
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2253      	movs	r2, #83	; 0x53
 80048f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80048f8:	2513      	movs	r5, #19
 80048fa:	197c      	adds	r4, r7, r5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	0018      	movs	r0, r3
 8004900:	f000 fb5e 	bl	8004fc0 <RTC_EnterInitMode>
 8004904:	0003      	movs	r3, r0
 8004906:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8004908:	0028      	movs	r0, r5
 800490a:	183b      	adds	r3, r7, r0
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d120      	bne.n	8004954 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	491a      	ldr	r1, [pc, #104]	; (8004984 <HAL_RTC_SetTime+0x14c>)
 800491a:	400a      	ands	r2, r1
 800491c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4917      	ldr	r1, [pc, #92]	; (8004988 <HAL_RTC_SetTime+0x150>)
 800492a:	400a      	ands	r2, r1
 800492c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6899      	ldr	r1, [r3, #8]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	431a      	orrs	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004946:	183c      	adds	r4, r7, r0
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	0018      	movs	r0, r3
 800494c:	f000 fb7c 	bl	8005048 <RTC_ExitInitMode>
 8004950:	0003      	movs	r3, r0
 8004952:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8004954:	2313      	movs	r3, #19
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2221      	movs	r2, #33	; 0x21
 8004962:	2101      	movs	r1, #1
 8004964:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	22ff      	movs	r2, #255	; 0xff
 800496c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	2100      	movs	r1, #0
 8004974:	5499      	strb	r1, [r3, r2]

  return status;
 8004976:	2313      	movs	r3, #19
 8004978:	18fb      	adds	r3, r7, r3
 800497a:	781b      	ldrb	r3, [r3, #0]
}
 800497c:	0018      	movs	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	b006      	add	sp, #24
 8004982:	bdb0      	pop	{r4, r5, r7, pc}
 8004984:	007f7f7f 	.word	0x007f7f7f
 8004988:	fffbffff 	.word	0xfffbffff

0800498c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	045b      	lsls	r3, r3, #17
 80049ae:	0c5a      	lsrs	r2, r3, #17
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a22      	ldr	r2, [pc, #136]	; (8004a44 <HAL_RTC_GetTime+0xb8>)
 80049bc:	4013      	ands	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	0c1b      	lsrs	r3, r3, #16
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	223f      	movs	r2, #63	; 0x3f
 80049c8:	4013      	ands	r3, r2
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	227f      	movs	r2, #127	; 0x7f
 80049d8:	4013      	ands	r3, r2
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	227f      	movs	r2, #127	; 0x7f
 80049e6:	4013      	ands	r3, r2
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	0d9b      	lsrs	r3, r3, #22
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2201      	movs	r2, #1
 80049f6:	4013      	ands	r3, r2
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d11a      	bne.n	8004a3a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f000 fb68 	bl	80050de <RTC_Bcd2ToByte>
 8004a0e:	0003      	movs	r3, r0
 8004a10:	001a      	movs	r2, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	785b      	ldrb	r3, [r3, #1]
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f000 fb5f 	bl	80050de <RTC_Bcd2ToByte>
 8004a20:	0003      	movs	r3, r0
 8004a22:	001a      	movs	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	789b      	ldrb	r3, [r3, #2]
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f000 fb56 	bl	80050de <RTC_Bcd2ToByte>
 8004a32:	0003      	movs	r3, r0
 8004a34:	001a      	movs	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b006      	add	sp, #24
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	007f7f7f 	.word	0x007f7f7f

08004a48 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004a48:	b5b0      	push	{r4, r5, r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	5c9b      	ldrb	r3, [r3, r2]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_RTC_SetDate+0x1e>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e07e      	b.n	8004b64 <HAL_RTC_SetDate+0x11c>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2221      	movs	r2, #33	; 0x21
 8004a72:	2102      	movs	r1, #2
 8004a74:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10e      	bne.n	8004a9a <HAL_RTC_SetDate+0x52>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	785b      	ldrb	r3, [r3, #1]
 8004a80:	001a      	movs	r2, r3
 8004a82:	2310      	movs	r3, #16
 8004a84:	4013      	ands	r3, r2
 8004a86:	d008      	beq.n	8004a9a <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	2210      	movs	r2, #16
 8004a8e:	4393      	bics	r3, r2
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	330a      	adds	r3, #10
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d11c      	bne.n	8004ada <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	78db      	ldrb	r3, [r3, #3]
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f000 faf9 	bl	800509c <RTC_ByteToBcd2>
 8004aaa:	0003      	movs	r3, r0
 8004aac:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	785b      	ldrb	r3, [r3, #1]
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f000 faf2 	bl	800509c <RTC_ByteToBcd2>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004abc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	789b      	ldrb	r3, [r3, #2]
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f000 faea 	bl	800509c <RTC_ByteToBcd2>
 8004ac8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004aca:	0022      	movs	r2, r4
 8004acc:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e00e      	b.n	8004af8 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	78db      	ldrb	r3, [r3, #3]
 8004ade:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	785b      	ldrb	r3, [r3, #1]
 8004ae4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ae6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004aec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	22ca      	movs	r2, #202	; 0xca
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2253      	movs	r2, #83	; 0x53
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b08:	2513      	movs	r5, #19
 8004b0a:	197c      	adds	r4, r7, r5
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f000 fa56 	bl	8004fc0 <RTC_EnterInitMode>
 8004b14:	0003      	movs	r3, r0
 8004b16:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8004b18:	0028      	movs	r0, r5
 8004b1a:	183b      	adds	r3, r7, r0
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10c      	bne.n	8004b3c <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4910      	ldr	r1, [pc, #64]	; (8004b6c <HAL_RTC_SetDate+0x124>)
 8004b2a:	400a      	ands	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b2e:	183c      	adds	r4, r7, r0
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	0018      	movs	r0, r3
 8004b34:	f000 fa88 	bl	8005048 <RTC_ExitInitMode>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8004b3c:	2313      	movs	r3, #19
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d103      	bne.n	8004b4e <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2221      	movs	r2, #33	; 0x21
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	22ff      	movs	r2, #255	; 0xff
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	5499      	strb	r1, [r3, r2]

  return status;
 8004b5e:	2313      	movs	r3, #19
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	781b      	ldrb	r3, [r3, #0]
}
 8004b64:	0018      	movs	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b006      	add	sp, #24
 8004b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b6c:	00ffff3f 	.word	0x00ffff3f

08004b70 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4a21      	ldr	r2, [pc, #132]	; (8004c0c <HAL_RTC_GetDate+0x9c>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	0c1b      	lsrs	r3, r3, #16
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	0a1b      	lsrs	r3, r3, #8
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	221f      	movs	r2, #31
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	223f      	movs	r2, #63	; 0x3f
 8004bac:	4013      	ands	r3, r2
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	0b5b      	lsrs	r3, r3, #13
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2207      	movs	r2, #7
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d11a      	bne.n	8004c00 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	78db      	ldrb	r3, [r3, #3]
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f000 fa85 	bl	80050de <RTC_Bcd2ToByte>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	0018      	movs	r0, r3
 8004be2:	f000 fa7c 	bl	80050de <RTC_Bcd2ToByte>
 8004be6:	0003      	movs	r3, r0
 8004be8:	001a      	movs	r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	789b      	ldrb	r3, [r3, #2]
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f000 fa73 	bl	80050de <RTC_Bcd2ToByte>
 8004bf8:	0003      	movs	r3, r0
 8004bfa:	001a      	movs	r2, r3
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	0018      	movs	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	b006      	add	sp, #24
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	00ffff3f 	.word	0x00ffff3f

08004c10 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004c10:	b590      	push	{r4, r7, lr}
 8004c12:	b089      	sub	sp, #36	; 0x24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004c1c:	4ba7      	ldr	r3, [pc, #668]	; (8004ebc <HAL_RTC_SetAlarm_IT+0x2ac>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	22fa      	movs	r2, #250	; 0xfa
 8004c22:	01d1      	lsls	r1, r2, #7
 8004c24:	0018      	movs	r0, r3
 8004c26:	f7fb fa79 	bl	800011c <__udivsi3>
 8004c2a:	0003      	movs	r3, r0
 8004c2c:	001a      	movs	r2, r3
 8004c2e:	0013      	movs	r3, r2
 8004c30:	015b      	lsls	r3, r3, #5
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	189b      	adds	r3, r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	5c9b      	ldrb	r3, [r3, r2]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_RTC_SetAlarm_IT+0x42>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e130      	b.n	8004eb4 <HAL_RTC_SetAlarm_IT+0x2a4>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	2101      	movs	r1, #1
 8004c58:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2221      	movs	r2, #33	; 0x21
 8004c5e:	2102      	movs	r1, #2
 8004c60:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d136      	bne.n	8004cd6 <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2240      	movs	r2, #64	; 0x40
 8004c70:	4013      	ands	r3, r2
 8004c72:	d102      	bne.n	8004c7a <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2200      	movs	r2, #0
 8004c78:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f000 fa0c 	bl	800509c <RTC_ByteToBcd2>
 8004c84:	0003      	movs	r3, r0
 8004c86:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	785b      	ldrb	r3, [r3, #1]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f000 fa05 	bl	800509c <RTC_ByteToBcd2>
 8004c92:	0003      	movs	r3, r0
 8004c94:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004c96:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	789b      	ldrb	r3, [r3, #2]
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f000 f9fd 	bl	800509c <RTC_ByteToBcd2>
 8004ca2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ca4:	0022      	movs	r2, r4
 8004ca6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	78db      	ldrb	r3, [r3, #3]
 8004cac:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	5c9b      	ldrb	r3, [r3, r2]
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f000 f9ef 	bl	800509c <RTC_ByteToBcd2>
 8004cbe:	0003      	movs	r3, r0
 8004cc0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004cc2:	0022      	movs	r2, r4
 8004cc4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004cca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	e022      	b.n	8004d1c <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2240      	movs	r2, #64	; 0x40
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d102      	bne.n	8004ce8 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	785b      	ldrb	r3, [r3, #1]
 8004cf2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004cf4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004cfa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	78db      	ldrb	r3, [r3, #3]
 8004d00:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004d02:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2120      	movs	r1, #32
 8004d08:	5c5b      	ldrb	r3, [r3, r1]
 8004d0a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004d0c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004d12:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	22ca      	movs	r2, #202	; 0xca
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2253      	movs	r2, #83	; 0x53
 8004d36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d3c:	2380      	movs	r3, #128	; 0x80
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d146      	bne.n	8004dd2 <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	495c      	ldr	r1, [pc, #368]	; (8004ec0 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8004d50:	400a      	ands	r2, r1
 8004d52:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	22ff      	movs	r2, #255	; 0xff
 8004d5c:	401a      	ands	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4958      	ldr	r1, [pc, #352]	; (8004ec4 <HAL_RTC_SetAlarm_IT+0x2b4>)
 8004d64:	430a      	orrs	r2, r1
 8004d66:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10d      	bne.n	8004d90 <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	22ff      	movs	r2, #255	; 0xff
 8004d7a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2221      	movs	r2, #33	; 0x21
 8004d80:	2103      	movs	r1, #3
 8004d82:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	2100      	movs	r1, #0
 8004d8a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e091      	b.n	8004eb4 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d0e5      	beq.n	8004d68 <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69fa      	ldr	r2, [r7, #28]
 8004da2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2180      	movs	r1, #128	; 0x80
 8004db8:	0049      	lsls	r1, r1, #1
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	0149      	lsls	r1, r1, #5
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	e055      	b.n	8004e7e <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	493a      	ldr	r1, [pc, #232]	; (8004ec8 <HAL_RTC_SetAlarm_IT+0x2b8>)
 8004dde:	400a      	ands	r2, r1
 8004de0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	22ff      	movs	r2, #255	; 0xff
 8004dea:	401a      	ands	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4936      	ldr	r1, [pc, #216]	; (8004ecc <HAL_RTC_SetAlarm_IT+0x2bc>)
 8004df2:	430a      	orrs	r2, r1
 8004df4:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004df6:	4b31      	ldr	r3, [pc, #196]	; (8004ebc <HAL_RTC_SetAlarm_IT+0x2ac>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	22fa      	movs	r2, #250	; 0xfa
 8004dfc:	01d1      	lsls	r1, r2, #7
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f7fb f98c 	bl	800011c <__udivsi3>
 8004e04:	0003      	movs	r3, r0
 8004e06:	001a      	movs	r2, r3
 8004e08:	0013      	movs	r3, r2
 8004e0a:	015b      	lsls	r3, r3, #5
 8004e0c:	1a9b      	subs	r3, r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	189b      	adds	r3, r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10d      	bne.n	8004e3e <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	22ff      	movs	r2, #255	; 0xff
 8004e28:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2221      	movs	r2, #33	; 0x21
 8004e2e:	2103      	movs	r1, #3
 8004e30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2220      	movs	r2, #32
 8004e36:	2100      	movs	r1, #0
 8004e38:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e03a      	b.n	8004eb4 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	2202      	movs	r2, #2
 8004e46:	4013      	ands	r3, r2
 8004e48:	d0e5      	beq.n	8004e16 <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2180      	movs	r1, #128	; 0x80
 8004e66:	0089      	lsls	r1, r1, #2
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2180      	movs	r1, #128	; 0x80
 8004e78:	0189      	lsls	r1, r1, #6
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004e7e:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8004e84:	2180      	movs	r1, #128	; 0x80
 8004e86:	0289      	lsls	r1, r1, #10
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004e8c:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8004e92:	2180      	movs	r1, #128	; 0x80
 8004e94:	0289      	lsls	r1, r1, #10
 8004e96:	430a      	orrs	r2, r1
 8004e98:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	22ff      	movs	r2, #255	; 0xff
 8004ea0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2221      	movs	r2, #33	; 0x21
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2220      	movs	r2, #32
 8004eae:	2100      	movs	r1, #0
 8004eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b009      	add	sp, #36	; 0x24
 8004eba:	bd90      	pop	{r4, r7, pc}
 8004ebc:	20000064 	.word	0x20000064
 8004ec0:	fffffeff 	.word	0xfffffeff
 8004ec4:	fffffe7f 	.word	0xfffffe7f
 8004ec8:	fffffdff 	.word	0xfffffdff
 8004ecc:	fffffd7f 	.word	0xfffffd7f
 8004ed0:	40010400 	.word	0x40010400

08004ed4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004edc:	4b21      	ldr	r3, [pc, #132]	; (8004f64 <HAL_RTC_AlarmIRQHandler+0x90>)
 8004ede:	2280      	movs	r2, #128	; 0x80
 8004ee0:	0292      	lsls	r2, r2, #10
 8004ee2:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	015b      	lsls	r3, r3, #5
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d014      	beq.n	8004f1c <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	2380      	movs	r3, #128	; 0x80
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4013      	ands	r3, r2
 8004efe:	d00d      	beq.n	8004f1c <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	22ff      	movs	r2, #255	; 0xff
 8004f08:	401a      	ands	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4916      	ldr	r1, [pc, #88]	; (8004f68 <HAL_RTC_AlarmIRQHandler+0x94>)
 8004f10:	430a      	orrs	r2, r1
 8004f12:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	0018      	movs	r0, r3
 8004f18:	f7fb fc8e 	bl	8000838 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	2380      	movs	r3, #128	; 0x80
 8004f24:	019b      	lsls	r3, r3, #6
 8004f26:	4013      	ands	r3, r2
 8004f28:	d014      	beq.n	8004f54 <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4013      	ands	r3, r2
 8004f36:	d00d      	beq.n	8004f54 <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	22ff      	movs	r2, #255	; 0xff
 8004f40:	401a      	ands	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4909      	ldr	r1, [pc, #36]	; (8004f6c <HAL_RTC_AlarmIRQHandler+0x98>)
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f000 f912 	bl	8005178 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2221      	movs	r2, #33	; 0x21
 8004f58:	2101      	movs	r1, #1
 8004f5a:	5499      	strb	r1, [r3, r2]
}
 8004f5c:	46c0      	nop			; (mov r8, r8)
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b002      	add	sp, #8
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40010400 	.word	0x40010400
 8004f68:	fffffe7f 	.word	0xfffffe7f
 8004f6c:	fffffd7f 	.word	0xfffffd7f

08004f70 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a0e      	ldr	r2, [pc, #56]	; (8004fbc <HAL_RTC_WaitForSynchro+0x4c>)
 8004f82:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f84:	f7fd f8a4 	bl	80020d0 <HAL_GetTick>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f8c:	e00a      	b.n	8004fa4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f8e:	f7fd f89f 	bl	80020d0 <HAL_GetTick>
 8004f92:	0002      	movs	r2, r0
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	1ad2      	subs	r2, r2, r3
 8004f98:	23fa      	movs	r3, #250	; 0xfa
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e006      	b.n	8004fb2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	2220      	movs	r2, #32
 8004fac:	4013      	ands	r3, r2
 8004fae:	d0ee      	beq.n	8004f8e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b004      	add	sp, #16
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	00017f5f 	.word	0x00017f5f

08004fc0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004fcc:	230f      	movs	r3, #15
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	2240      	movs	r2, #64	; 0x40
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d12c      	bne.n	800503a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2180      	movs	r1, #128	; 0x80
 8004fec:	430a      	orrs	r2, r1
 8004fee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ff0:	f7fd f86e 	bl	80020d0 <HAL_GetTick>
 8004ff4:	0003      	movs	r3, r0
 8004ff6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004ff8:	e014      	b.n	8005024 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ffa:	f7fd f869 	bl	80020d0 <HAL_GetTick>
 8004ffe:	0002      	movs	r2, r0
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	1ad2      	subs	r2, r2, r3
 8005004:	200f      	movs	r0, #15
 8005006:	183b      	adds	r3, r7, r0
 8005008:	1839      	adds	r1, r7, r0
 800500a:	7809      	ldrb	r1, [r1, #0]
 800500c:	7019      	strb	r1, [r3, #0]
 800500e:	23fa      	movs	r3, #250	; 0xfa
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	429a      	cmp	r2, r3
 8005014:	d906      	bls.n	8005024 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2221      	movs	r2, #33	; 0x21
 800501a:	2104      	movs	r1, #4
 800501c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800501e:	183b      	adds	r3, r7, r0
 8005020:	2201      	movs	r2, #1
 8005022:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2240      	movs	r2, #64	; 0x40
 800502c:	4013      	ands	r3, r2
 800502e:	d104      	bne.n	800503a <RTC_EnterInitMode+0x7a>
 8005030:	230f      	movs	r3, #15
 8005032:	18fb      	adds	r3, r7, r3
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d1df      	bne.n	8004ffa <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800503a:	230f      	movs	r3, #15
 800503c:	18fb      	adds	r3, r7, r3
 800503e:	781b      	ldrb	r3, [r3, #0]
}
 8005040:	0018      	movs	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	b004      	add	sp, #16
 8005046:	bd80      	pop	{r7, pc}

08005048 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005048:	b590      	push	{r4, r7, lr}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005050:	240f      	movs	r4, #15
 8005052:	193b      	adds	r3, r7, r4
 8005054:	2200      	movs	r2, #0
 8005056:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2180      	movs	r1, #128	; 0x80
 8005064:	438a      	bics	r2, r1
 8005066:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2220      	movs	r2, #32
 8005070:	4013      	ands	r3, r2
 8005072:	d10c      	bne.n	800508e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	0018      	movs	r0, r3
 8005078:	f7ff ff7a 	bl	8004f70 <HAL_RTC_WaitForSynchro>
 800507c:	1e03      	subs	r3, r0, #0
 800507e:	d006      	beq.n	800508e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2221      	movs	r2, #33	; 0x21
 8005084:	2104      	movs	r1, #4
 8005086:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8005088:	193b      	adds	r3, r7, r4
 800508a:	2201      	movs	r2, #1
 800508c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800508e:	230f      	movs	r3, #15
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	781b      	ldrb	r3, [r3, #0]
}
 8005094:	0018      	movs	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	b005      	add	sp, #20
 800509a:	bd90      	pop	{r4, r7, pc}

0800509c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	0002      	movs	r2, r0
 80050a4:	1dfb      	adds	r3, r7, #7
 80050a6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80050ac:	e007      	b.n	80050be <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	3301      	adds	r3, #1
 80050b2:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80050b4:	1dfb      	adds	r3, r7, #7
 80050b6:	1dfa      	adds	r2, r7, #7
 80050b8:	7812      	ldrb	r2, [r2, #0]
 80050ba:	3a0a      	subs	r2, #10
 80050bc:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80050be:	1dfb      	adds	r3, r7, #7
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b09      	cmp	r3, #9
 80050c4:	d8f3      	bhi.n	80050ae <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	1dfb      	adds	r3, r7, #7
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	b2db      	uxtb	r3, r3
}
 80050d6:	0018      	movs	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	b004      	add	sp, #16
 80050dc:	bd80      	pop	{r7, pc}

080050de <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	0002      	movs	r2, r0
 80050e6:	1dfb      	adds	r3, r7, #7
 80050e8:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80050ee:	1dfb      	adds	r3, r7, #7
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	091b      	lsrs	r3, r3, #4
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	001a      	movs	r2, r3
 80050f8:	0013      	movs	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	189b      	adds	r3, r3, r2
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	b2da      	uxtb	r2, r3
 8005106:	1dfb      	adds	r3, r7, #7
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	210f      	movs	r1, #15
 800510c:	400b      	ands	r3, r1
 800510e:	b2db      	uxtb	r3, r3
 8005110:	18d3      	adds	r3, r2, r3
 8005112:	b2db      	uxtb	r3, r3
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b004      	add	sp, #16
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3350      	adds	r3, #80	; 0x50
 8005132:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	18d3      	adds	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	601a      	str	r2, [r3, #0]
}
 8005144:	46c0      	nop			; (mov r8, r8)
 8005146:	46bd      	mov	sp, r7
 8005148:	b006      	add	sp, #24
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3350      	adds	r3, #80	; 0x50
 8005160:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	18d3      	adds	r3, r2, r3
 800516a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	0018      	movs	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	b004      	add	sp, #16
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005180:	46c0      	nop			; (mov r8, r8)
 8005182:	46bd      	mov	sp, r7
 8005184:	b002      	add	sp, #8
 8005186:	bd80      	pop	{r7, pc}

08005188 <__errno>:
 8005188:	4b01      	ldr	r3, [pc, #4]	; (8005190 <__errno+0x8>)
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	4770      	bx	lr
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	20000070 	.word	0x20000070

08005194 <__libc_init_array>:
 8005194:	b570      	push	{r4, r5, r6, lr}
 8005196:	2600      	movs	r6, #0
 8005198:	4d0c      	ldr	r5, [pc, #48]	; (80051cc <__libc_init_array+0x38>)
 800519a:	4c0d      	ldr	r4, [pc, #52]	; (80051d0 <__libc_init_array+0x3c>)
 800519c:	1b64      	subs	r4, r4, r5
 800519e:	10a4      	asrs	r4, r4, #2
 80051a0:	42a6      	cmp	r6, r4
 80051a2:	d109      	bne.n	80051b8 <__libc_init_array+0x24>
 80051a4:	2600      	movs	r6, #0
 80051a6:	f000 fc8b 	bl	8005ac0 <_init>
 80051aa:	4d0a      	ldr	r5, [pc, #40]	; (80051d4 <__libc_init_array+0x40>)
 80051ac:	4c0a      	ldr	r4, [pc, #40]	; (80051d8 <__libc_init_array+0x44>)
 80051ae:	1b64      	subs	r4, r4, r5
 80051b0:	10a4      	asrs	r4, r4, #2
 80051b2:	42a6      	cmp	r6, r4
 80051b4:	d105      	bne.n	80051c2 <__libc_init_array+0x2e>
 80051b6:	bd70      	pop	{r4, r5, r6, pc}
 80051b8:	00b3      	lsls	r3, r6, #2
 80051ba:	58eb      	ldr	r3, [r5, r3]
 80051bc:	4798      	blx	r3
 80051be:	3601      	adds	r6, #1
 80051c0:	e7ee      	b.n	80051a0 <__libc_init_array+0xc>
 80051c2:	00b3      	lsls	r3, r6, #2
 80051c4:	58eb      	ldr	r3, [r5, r3]
 80051c6:	4798      	blx	r3
 80051c8:	3601      	adds	r6, #1
 80051ca:	e7f2      	b.n	80051b2 <__libc_init_array+0x1e>
 80051cc:	080075c8 	.word	0x080075c8
 80051d0:	080075c8 	.word	0x080075c8
 80051d4:	080075c8 	.word	0x080075c8
 80051d8:	080075cc 	.word	0x080075cc

080051dc <memset>:
 80051dc:	0003      	movs	r3, r0
 80051de:	1882      	adds	r2, r0, r2
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d100      	bne.n	80051e6 <memset+0xa>
 80051e4:	4770      	bx	lr
 80051e6:	7019      	strb	r1, [r3, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	e7f9      	b.n	80051e0 <memset+0x4>

080051ec <siprintf>:
 80051ec:	b40e      	push	{r1, r2, r3}
 80051ee:	b500      	push	{lr}
 80051f0:	490b      	ldr	r1, [pc, #44]	; (8005220 <siprintf+0x34>)
 80051f2:	b09c      	sub	sp, #112	; 0x70
 80051f4:	ab1d      	add	r3, sp, #116	; 0x74
 80051f6:	9002      	str	r0, [sp, #8]
 80051f8:	9006      	str	r0, [sp, #24]
 80051fa:	9107      	str	r1, [sp, #28]
 80051fc:	9104      	str	r1, [sp, #16]
 80051fe:	4809      	ldr	r0, [pc, #36]	; (8005224 <siprintf+0x38>)
 8005200:	4909      	ldr	r1, [pc, #36]	; (8005228 <siprintf+0x3c>)
 8005202:	cb04      	ldmia	r3!, {r2}
 8005204:	9105      	str	r1, [sp, #20]
 8005206:	6800      	ldr	r0, [r0, #0]
 8005208:	a902      	add	r1, sp, #8
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	f000 f870 	bl	80052f0 <_svfiprintf_r>
 8005210:	2300      	movs	r3, #0
 8005212:	9a02      	ldr	r2, [sp, #8]
 8005214:	7013      	strb	r3, [r2, #0]
 8005216:	b01c      	add	sp, #112	; 0x70
 8005218:	bc08      	pop	{r3}
 800521a:	b003      	add	sp, #12
 800521c:	4718      	bx	r3
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	7fffffff 	.word	0x7fffffff
 8005224:	20000070 	.word	0x20000070
 8005228:	ffff0208 	.word	0xffff0208

0800522c <__ssputs_r>:
 800522c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800522e:	688e      	ldr	r6, [r1, #8]
 8005230:	b085      	sub	sp, #20
 8005232:	0007      	movs	r7, r0
 8005234:	000c      	movs	r4, r1
 8005236:	9203      	str	r2, [sp, #12]
 8005238:	9301      	str	r3, [sp, #4]
 800523a:	429e      	cmp	r6, r3
 800523c:	d83c      	bhi.n	80052b8 <__ssputs_r+0x8c>
 800523e:	2390      	movs	r3, #144	; 0x90
 8005240:	898a      	ldrh	r2, [r1, #12]
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	421a      	tst	r2, r3
 8005246:	d034      	beq.n	80052b2 <__ssputs_r+0x86>
 8005248:	6909      	ldr	r1, [r1, #16]
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	6960      	ldr	r0, [r4, #20]
 800524e:	1a5b      	subs	r3, r3, r1
 8005250:	9302      	str	r3, [sp, #8]
 8005252:	2303      	movs	r3, #3
 8005254:	4343      	muls	r3, r0
 8005256:	0fdd      	lsrs	r5, r3, #31
 8005258:	18ed      	adds	r5, r5, r3
 800525a:	9b01      	ldr	r3, [sp, #4]
 800525c:	9802      	ldr	r0, [sp, #8]
 800525e:	3301      	adds	r3, #1
 8005260:	181b      	adds	r3, r3, r0
 8005262:	106d      	asrs	r5, r5, #1
 8005264:	42ab      	cmp	r3, r5
 8005266:	d900      	bls.n	800526a <__ssputs_r+0x3e>
 8005268:	001d      	movs	r5, r3
 800526a:	0553      	lsls	r3, r2, #21
 800526c:	d532      	bpl.n	80052d4 <__ssputs_r+0xa8>
 800526e:	0029      	movs	r1, r5
 8005270:	0038      	movs	r0, r7
 8005272:	f000 fb53 	bl	800591c <_malloc_r>
 8005276:	1e06      	subs	r6, r0, #0
 8005278:	d109      	bne.n	800528e <__ssputs_r+0x62>
 800527a:	230c      	movs	r3, #12
 800527c:	603b      	str	r3, [r7, #0]
 800527e:	2340      	movs	r3, #64	; 0x40
 8005280:	2001      	movs	r0, #1
 8005282:	89a2      	ldrh	r2, [r4, #12]
 8005284:	4240      	negs	r0, r0
 8005286:	4313      	orrs	r3, r2
 8005288:	81a3      	strh	r3, [r4, #12]
 800528a:	b005      	add	sp, #20
 800528c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800528e:	9a02      	ldr	r2, [sp, #8]
 8005290:	6921      	ldr	r1, [r4, #16]
 8005292:	f000 faba 	bl	800580a <memcpy>
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	4a14      	ldr	r2, [pc, #80]	; (80052ec <__ssputs_r+0xc0>)
 800529a:	401a      	ands	r2, r3
 800529c:	2380      	movs	r3, #128	; 0x80
 800529e:	4313      	orrs	r3, r2
 80052a0:	81a3      	strh	r3, [r4, #12]
 80052a2:	9b02      	ldr	r3, [sp, #8]
 80052a4:	6126      	str	r6, [r4, #16]
 80052a6:	18f6      	adds	r6, r6, r3
 80052a8:	6026      	str	r6, [r4, #0]
 80052aa:	6165      	str	r5, [r4, #20]
 80052ac:	9e01      	ldr	r6, [sp, #4]
 80052ae:	1aed      	subs	r5, r5, r3
 80052b0:	60a5      	str	r5, [r4, #8]
 80052b2:	9b01      	ldr	r3, [sp, #4]
 80052b4:	429e      	cmp	r6, r3
 80052b6:	d900      	bls.n	80052ba <__ssputs_r+0x8e>
 80052b8:	9e01      	ldr	r6, [sp, #4]
 80052ba:	0032      	movs	r2, r6
 80052bc:	9903      	ldr	r1, [sp, #12]
 80052be:	6820      	ldr	r0, [r4, #0]
 80052c0:	f000 faac 	bl	800581c <memmove>
 80052c4:	68a3      	ldr	r3, [r4, #8]
 80052c6:	2000      	movs	r0, #0
 80052c8:	1b9b      	subs	r3, r3, r6
 80052ca:	60a3      	str	r3, [r4, #8]
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	199e      	adds	r6, r3, r6
 80052d0:	6026      	str	r6, [r4, #0]
 80052d2:	e7da      	b.n	800528a <__ssputs_r+0x5e>
 80052d4:	002a      	movs	r2, r5
 80052d6:	0038      	movs	r0, r7
 80052d8:	f000 fb96 	bl	8005a08 <_realloc_r>
 80052dc:	1e06      	subs	r6, r0, #0
 80052de:	d1e0      	bne.n	80052a2 <__ssputs_r+0x76>
 80052e0:	0038      	movs	r0, r7
 80052e2:	6921      	ldr	r1, [r4, #16]
 80052e4:	f000 faae 	bl	8005844 <_free_r>
 80052e8:	e7c7      	b.n	800527a <__ssputs_r+0x4e>
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	fffffb7f 	.word	0xfffffb7f

080052f0 <_svfiprintf_r>:
 80052f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f2:	b0a1      	sub	sp, #132	; 0x84
 80052f4:	9003      	str	r0, [sp, #12]
 80052f6:	001d      	movs	r5, r3
 80052f8:	898b      	ldrh	r3, [r1, #12]
 80052fa:	000f      	movs	r7, r1
 80052fc:	0016      	movs	r6, r2
 80052fe:	061b      	lsls	r3, r3, #24
 8005300:	d511      	bpl.n	8005326 <_svfiprintf_r+0x36>
 8005302:	690b      	ldr	r3, [r1, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10e      	bne.n	8005326 <_svfiprintf_r+0x36>
 8005308:	2140      	movs	r1, #64	; 0x40
 800530a:	f000 fb07 	bl	800591c <_malloc_r>
 800530e:	6038      	str	r0, [r7, #0]
 8005310:	6138      	str	r0, [r7, #16]
 8005312:	2800      	cmp	r0, #0
 8005314:	d105      	bne.n	8005322 <_svfiprintf_r+0x32>
 8005316:	230c      	movs	r3, #12
 8005318:	9a03      	ldr	r2, [sp, #12]
 800531a:	3801      	subs	r0, #1
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	b021      	add	sp, #132	; 0x84
 8005320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005322:	2340      	movs	r3, #64	; 0x40
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	2300      	movs	r3, #0
 8005328:	ac08      	add	r4, sp, #32
 800532a:	6163      	str	r3, [r4, #20]
 800532c:	3320      	adds	r3, #32
 800532e:	7663      	strb	r3, [r4, #25]
 8005330:	3310      	adds	r3, #16
 8005332:	76a3      	strb	r3, [r4, #26]
 8005334:	9507      	str	r5, [sp, #28]
 8005336:	0035      	movs	r5, r6
 8005338:	782b      	ldrb	r3, [r5, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <_svfiprintf_r+0x52>
 800533e:	2b25      	cmp	r3, #37	; 0x25
 8005340:	d147      	bne.n	80053d2 <_svfiprintf_r+0xe2>
 8005342:	1bab      	subs	r3, r5, r6
 8005344:	9305      	str	r3, [sp, #20]
 8005346:	42b5      	cmp	r5, r6
 8005348:	d00c      	beq.n	8005364 <_svfiprintf_r+0x74>
 800534a:	0032      	movs	r2, r6
 800534c:	0039      	movs	r1, r7
 800534e:	9803      	ldr	r0, [sp, #12]
 8005350:	f7ff ff6c 	bl	800522c <__ssputs_r>
 8005354:	1c43      	adds	r3, r0, #1
 8005356:	d100      	bne.n	800535a <_svfiprintf_r+0x6a>
 8005358:	e0ae      	b.n	80054b8 <_svfiprintf_r+0x1c8>
 800535a:	6962      	ldr	r2, [r4, #20]
 800535c:	9b05      	ldr	r3, [sp, #20]
 800535e:	4694      	mov	ip, r2
 8005360:	4463      	add	r3, ip
 8005362:	6163      	str	r3, [r4, #20]
 8005364:	782b      	ldrb	r3, [r5, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d100      	bne.n	800536c <_svfiprintf_r+0x7c>
 800536a:	e0a5      	b.n	80054b8 <_svfiprintf_r+0x1c8>
 800536c:	2201      	movs	r2, #1
 800536e:	2300      	movs	r3, #0
 8005370:	4252      	negs	r2, r2
 8005372:	6062      	str	r2, [r4, #4]
 8005374:	a904      	add	r1, sp, #16
 8005376:	3254      	adds	r2, #84	; 0x54
 8005378:	1852      	adds	r2, r2, r1
 800537a:	1c6e      	adds	r6, r5, #1
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	60e3      	str	r3, [r4, #12]
 8005380:	60a3      	str	r3, [r4, #8]
 8005382:	7013      	strb	r3, [r2, #0]
 8005384:	65a3      	str	r3, [r4, #88]	; 0x58
 8005386:	2205      	movs	r2, #5
 8005388:	7831      	ldrb	r1, [r6, #0]
 800538a:	4854      	ldr	r0, [pc, #336]	; (80054dc <_svfiprintf_r+0x1ec>)
 800538c:	f000 fa32 	bl	80057f4 <memchr>
 8005390:	1c75      	adds	r5, r6, #1
 8005392:	2800      	cmp	r0, #0
 8005394:	d11f      	bne.n	80053d6 <_svfiprintf_r+0xe6>
 8005396:	6822      	ldr	r2, [r4, #0]
 8005398:	06d3      	lsls	r3, r2, #27
 800539a:	d504      	bpl.n	80053a6 <_svfiprintf_r+0xb6>
 800539c:	2353      	movs	r3, #83	; 0x53
 800539e:	a904      	add	r1, sp, #16
 80053a0:	185b      	adds	r3, r3, r1
 80053a2:	2120      	movs	r1, #32
 80053a4:	7019      	strb	r1, [r3, #0]
 80053a6:	0713      	lsls	r3, r2, #28
 80053a8:	d504      	bpl.n	80053b4 <_svfiprintf_r+0xc4>
 80053aa:	2353      	movs	r3, #83	; 0x53
 80053ac:	a904      	add	r1, sp, #16
 80053ae:	185b      	adds	r3, r3, r1
 80053b0:	212b      	movs	r1, #43	; 0x2b
 80053b2:	7019      	strb	r1, [r3, #0]
 80053b4:	7833      	ldrb	r3, [r6, #0]
 80053b6:	2b2a      	cmp	r3, #42	; 0x2a
 80053b8:	d016      	beq.n	80053e8 <_svfiprintf_r+0xf8>
 80053ba:	0035      	movs	r5, r6
 80053bc:	2100      	movs	r1, #0
 80053be:	200a      	movs	r0, #10
 80053c0:	68e3      	ldr	r3, [r4, #12]
 80053c2:	782a      	ldrb	r2, [r5, #0]
 80053c4:	1c6e      	adds	r6, r5, #1
 80053c6:	3a30      	subs	r2, #48	; 0x30
 80053c8:	2a09      	cmp	r2, #9
 80053ca:	d94e      	bls.n	800546a <_svfiprintf_r+0x17a>
 80053cc:	2900      	cmp	r1, #0
 80053ce:	d111      	bne.n	80053f4 <_svfiprintf_r+0x104>
 80053d0:	e017      	b.n	8005402 <_svfiprintf_r+0x112>
 80053d2:	3501      	adds	r5, #1
 80053d4:	e7b0      	b.n	8005338 <_svfiprintf_r+0x48>
 80053d6:	4b41      	ldr	r3, [pc, #260]	; (80054dc <_svfiprintf_r+0x1ec>)
 80053d8:	6822      	ldr	r2, [r4, #0]
 80053da:	1ac0      	subs	r0, r0, r3
 80053dc:	2301      	movs	r3, #1
 80053de:	4083      	lsls	r3, r0
 80053e0:	4313      	orrs	r3, r2
 80053e2:	002e      	movs	r6, r5
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	e7ce      	b.n	8005386 <_svfiprintf_r+0x96>
 80053e8:	9b07      	ldr	r3, [sp, #28]
 80053ea:	1d19      	adds	r1, r3, #4
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	9107      	str	r1, [sp, #28]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	db01      	blt.n	80053f8 <_svfiprintf_r+0x108>
 80053f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80053f6:	e004      	b.n	8005402 <_svfiprintf_r+0x112>
 80053f8:	425b      	negs	r3, r3
 80053fa:	60e3      	str	r3, [r4, #12]
 80053fc:	2302      	movs	r3, #2
 80053fe:	4313      	orrs	r3, r2
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	782b      	ldrb	r3, [r5, #0]
 8005404:	2b2e      	cmp	r3, #46	; 0x2e
 8005406:	d10a      	bne.n	800541e <_svfiprintf_r+0x12e>
 8005408:	786b      	ldrb	r3, [r5, #1]
 800540a:	2b2a      	cmp	r3, #42	; 0x2a
 800540c:	d135      	bne.n	800547a <_svfiprintf_r+0x18a>
 800540e:	9b07      	ldr	r3, [sp, #28]
 8005410:	3502      	adds	r5, #2
 8005412:	1d1a      	adds	r2, r3, #4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	9207      	str	r2, [sp, #28]
 8005418:	2b00      	cmp	r3, #0
 800541a:	db2b      	blt.n	8005474 <_svfiprintf_r+0x184>
 800541c:	9309      	str	r3, [sp, #36]	; 0x24
 800541e:	4e30      	ldr	r6, [pc, #192]	; (80054e0 <_svfiprintf_r+0x1f0>)
 8005420:	2203      	movs	r2, #3
 8005422:	0030      	movs	r0, r6
 8005424:	7829      	ldrb	r1, [r5, #0]
 8005426:	f000 f9e5 	bl	80057f4 <memchr>
 800542a:	2800      	cmp	r0, #0
 800542c:	d006      	beq.n	800543c <_svfiprintf_r+0x14c>
 800542e:	2340      	movs	r3, #64	; 0x40
 8005430:	1b80      	subs	r0, r0, r6
 8005432:	4083      	lsls	r3, r0
 8005434:	6822      	ldr	r2, [r4, #0]
 8005436:	3501      	adds	r5, #1
 8005438:	4313      	orrs	r3, r2
 800543a:	6023      	str	r3, [r4, #0]
 800543c:	7829      	ldrb	r1, [r5, #0]
 800543e:	2206      	movs	r2, #6
 8005440:	4828      	ldr	r0, [pc, #160]	; (80054e4 <_svfiprintf_r+0x1f4>)
 8005442:	1c6e      	adds	r6, r5, #1
 8005444:	7621      	strb	r1, [r4, #24]
 8005446:	f000 f9d5 	bl	80057f4 <memchr>
 800544a:	2800      	cmp	r0, #0
 800544c:	d03c      	beq.n	80054c8 <_svfiprintf_r+0x1d8>
 800544e:	4b26      	ldr	r3, [pc, #152]	; (80054e8 <_svfiprintf_r+0x1f8>)
 8005450:	2b00      	cmp	r3, #0
 8005452:	d125      	bne.n	80054a0 <_svfiprintf_r+0x1b0>
 8005454:	2207      	movs	r2, #7
 8005456:	9b07      	ldr	r3, [sp, #28]
 8005458:	3307      	adds	r3, #7
 800545a:	4393      	bics	r3, r2
 800545c:	3308      	adds	r3, #8
 800545e:	9307      	str	r3, [sp, #28]
 8005460:	6963      	ldr	r3, [r4, #20]
 8005462:	9a04      	ldr	r2, [sp, #16]
 8005464:	189b      	adds	r3, r3, r2
 8005466:	6163      	str	r3, [r4, #20]
 8005468:	e765      	b.n	8005336 <_svfiprintf_r+0x46>
 800546a:	4343      	muls	r3, r0
 800546c:	0035      	movs	r5, r6
 800546e:	2101      	movs	r1, #1
 8005470:	189b      	adds	r3, r3, r2
 8005472:	e7a6      	b.n	80053c2 <_svfiprintf_r+0xd2>
 8005474:	2301      	movs	r3, #1
 8005476:	425b      	negs	r3, r3
 8005478:	e7d0      	b.n	800541c <_svfiprintf_r+0x12c>
 800547a:	2300      	movs	r3, #0
 800547c:	200a      	movs	r0, #10
 800547e:	001a      	movs	r2, r3
 8005480:	3501      	adds	r5, #1
 8005482:	6063      	str	r3, [r4, #4]
 8005484:	7829      	ldrb	r1, [r5, #0]
 8005486:	1c6e      	adds	r6, r5, #1
 8005488:	3930      	subs	r1, #48	; 0x30
 800548a:	2909      	cmp	r1, #9
 800548c:	d903      	bls.n	8005496 <_svfiprintf_r+0x1a6>
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0c5      	beq.n	800541e <_svfiprintf_r+0x12e>
 8005492:	9209      	str	r2, [sp, #36]	; 0x24
 8005494:	e7c3      	b.n	800541e <_svfiprintf_r+0x12e>
 8005496:	4342      	muls	r2, r0
 8005498:	0035      	movs	r5, r6
 800549a:	2301      	movs	r3, #1
 800549c:	1852      	adds	r2, r2, r1
 800549e:	e7f1      	b.n	8005484 <_svfiprintf_r+0x194>
 80054a0:	ab07      	add	r3, sp, #28
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	003a      	movs	r2, r7
 80054a6:	0021      	movs	r1, r4
 80054a8:	4b10      	ldr	r3, [pc, #64]	; (80054ec <_svfiprintf_r+0x1fc>)
 80054aa:	9803      	ldr	r0, [sp, #12]
 80054ac:	e000      	b.n	80054b0 <_svfiprintf_r+0x1c0>
 80054ae:	bf00      	nop
 80054b0:	9004      	str	r0, [sp, #16]
 80054b2:	9b04      	ldr	r3, [sp, #16]
 80054b4:	3301      	adds	r3, #1
 80054b6:	d1d3      	bne.n	8005460 <_svfiprintf_r+0x170>
 80054b8:	89bb      	ldrh	r3, [r7, #12]
 80054ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 80054bc:	065b      	lsls	r3, r3, #25
 80054be:	d400      	bmi.n	80054c2 <_svfiprintf_r+0x1d2>
 80054c0:	e72d      	b.n	800531e <_svfiprintf_r+0x2e>
 80054c2:	2001      	movs	r0, #1
 80054c4:	4240      	negs	r0, r0
 80054c6:	e72a      	b.n	800531e <_svfiprintf_r+0x2e>
 80054c8:	ab07      	add	r3, sp, #28
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	003a      	movs	r2, r7
 80054ce:	0021      	movs	r1, r4
 80054d0:	4b06      	ldr	r3, [pc, #24]	; (80054ec <_svfiprintf_r+0x1fc>)
 80054d2:	9803      	ldr	r0, [sp, #12]
 80054d4:	f000 f87c 	bl	80055d0 <_printf_i>
 80054d8:	e7ea      	b.n	80054b0 <_svfiprintf_r+0x1c0>
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	0800758d 	.word	0x0800758d
 80054e0:	08007593 	.word	0x08007593
 80054e4:	08007597 	.word	0x08007597
 80054e8:	00000000 	.word	0x00000000
 80054ec:	0800522d 	.word	0x0800522d

080054f0 <_printf_common>:
 80054f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054f2:	0015      	movs	r5, r2
 80054f4:	9301      	str	r3, [sp, #4]
 80054f6:	688a      	ldr	r2, [r1, #8]
 80054f8:	690b      	ldr	r3, [r1, #16]
 80054fa:	000c      	movs	r4, r1
 80054fc:	9000      	str	r0, [sp, #0]
 80054fe:	4293      	cmp	r3, r2
 8005500:	da00      	bge.n	8005504 <_printf_common+0x14>
 8005502:	0013      	movs	r3, r2
 8005504:	0022      	movs	r2, r4
 8005506:	602b      	str	r3, [r5, #0]
 8005508:	3243      	adds	r2, #67	; 0x43
 800550a:	7812      	ldrb	r2, [r2, #0]
 800550c:	2a00      	cmp	r2, #0
 800550e:	d001      	beq.n	8005514 <_printf_common+0x24>
 8005510:	3301      	adds	r3, #1
 8005512:	602b      	str	r3, [r5, #0]
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	069b      	lsls	r3, r3, #26
 8005518:	d502      	bpl.n	8005520 <_printf_common+0x30>
 800551a:	682b      	ldr	r3, [r5, #0]
 800551c:	3302      	adds	r3, #2
 800551e:	602b      	str	r3, [r5, #0]
 8005520:	6822      	ldr	r2, [r4, #0]
 8005522:	2306      	movs	r3, #6
 8005524:	0017      	movs	r7, r2
 8005526:	401f      	ands	r7, r3
 8005528:	421a      	tst	r2, r3
 800552a:	d027      	beq.n	800557c <_printf_common+0x8c>
 800552c:	0023      	movs	r3, r4
 800552e:	3343      	adds	r3, #67	; 0x43
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	1e5a      	subs	r2, r3, #1
 8005534:	4193      	sbcs	r3, r2
 8005536:	6822      	ldr	r2, [r4, #0]
 8005538:	0692      	lsls	r2, r2, #26
 800553a:	d430      	bmi.n	800559e <_printf_common+0xae>
 800553c:	0022      	movs	r2, r4
 800553e:	9901      	ldr	r1, [sp, #4]
 8005540:	9800      	ldr	r0, [sp, #0]
 8005542:	9e08      	ldr	r6, [sp, #32]
 8005544:	3243      	adds	r2, #67	; 0x43
 8005546:	47b0      	blx	r6
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d025      	beq.n	8005598 <_printf_common+0xa8>
 800554c:	2306      	movs	r3, #6
 800554e:	6820      	ldr	r0, [r4, #0]
 8005550:	682a      	ldr	r2, [r5, #0]
 8005552:	68e1      	ldr	r1, [r4, #12]
 8005554:	2500      	movs	r5, #0
 8005556:	4003      	ands	r3, r0
 8005558:	2b04      	cmp	r3, #4
 800555a:	d103      	bne.n	8005564 <_printf_common+0x74>
 800555c:	1a8d      	subs	r5, r1, r2
 800555e:	43eb      	mvns	r3, r5
 8005560:	17db      	asrs	r3, r3, #31
 8005562:	401d      	ands	r5, r3
 8005564:	68a3      	ldr	r3, [r4, #8]
 8005566:	6922      	ldr	r2, [r4, #16]
 8005568:	4293      	cmp	r3, r2
 800556a:	dd01      	ble.n	8005570 <_printf_common+0x80>
 800556c:	1a9b      	subs	r3, r3, r2
 800556e:	18ed      	adds	r5, r5, r3
 8005570:	2700      	movs	r7, #0
 8005572:	42bd      	cmp	r5, r7
 8005574:	d120      	bne.n	80055b8 <_printf_common+0xc8>
 8005576:	2000      	movs	r0, #0
 8005578:	e010      	b.n	800559c <_printf_common+0xac>
 800557a:	3701      	adds	r7, #1
 800557c:	68e3      	ldr	r3, [r4, #12]
 800557e:	682a      	ldr	r2, [r5, #0]
 8005580:	1a9b      	subs	r3, r3, r2
 8005582:	42bb      	cmp	r3, r7
 8005584:	ddd2      	ble.n	800552c <_printf_common+0x3c>
 8005586:	0022      	movs	r2, r4
 8005588:	2301      	movs	r3, #1
 800558a:	9901      	ldr	r1, [sp, #4]
 800558c:	9800      	ldr	r0, [sp, #0]
 800558e:	9e08      	ldr	r6, [sp, #32]
 8005590:	3219      	adds	r2, #25
 8005592:	47b0      	blx	r6
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	d1f0      	bne.n	800557a <_printf_common+0x8a>
 8005598:	2001      	movs	r0, #1
 800559a:	4240      	negs	r0, r0
 800559c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800559e:	2030      	movs	r0, #48	; 0x30
 80055a0:	18e1      	adds	r1, r4, r3
 80055a2:	3143      	adds	r1, #67	; 0x43
 80055a4:	7008      	strb	r0, [r1, #0]
 80055a6:	0021      	movs	r1, r4
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	3145      	adds	r1, #69	; 0x45
 80055ac:	7809      	ldrb	r1, [r1, #0]
 80055ae:	18a2      	adds	r2, r4, r2
 80055b0:	3243      	adds	r2, #67	; 0x43
 80055b2:	3302      	adds	r3, #2
 80055b4:	7011      	strb	r1, [r2, #0]
 80055b6:	e7c1      	b.n	800553c <_printf_common+0x4c>
 80055b8:	0022      	movs	r2, r4
 80055ba:	2301      	movs	r3, #1
 80055bc:	9901      	ldr	r1, [sp, #4]
 80055be:	9800      	ldr	r0, [sp, #0]
 80055c0:	9e08      	ldr	r6, [sp, #32]
 80055c2:	321a      	adds	r2, #26
 80055c4:	47b0      	blx	r6
 80055c6:	1c43      	adds	r3, r0, #1
 80055c8:	d0e6      	beq.n	8005598 <_printf_common+0xa8>
 80055ca:	3701      	adds	r7, #1
 80055cc:	e7d1      	b.n	8005572 <_printf_common+0x82>
	...

080055d0 <_printf_i>:
 80055d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d2:	b08b      	sub	sp, #44	; 0x2c
 80055d4:	9206      	str	r2, [sp, #24]
 80055d6:	000a      	movs	r2, r1
 80055d8:	3243      	adds	r2, #67	; 0x43
 80055da:	9307      	str	r3, [sp, #28]
 80055dc:	9005      	str	r0, [sp, #20]
 80055de:	9204      	str	r2, [sp, #16]
 80055e0:	7e0a      	ldrb	r2, [r1, #24]
 80055e2:	000c      	movs	r4, r1
 80055e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80055e6:	2a78      	cmp	r2, #120	; 0x78
 80055e8:	d807      	bhi.n	80055fa <_printf_i+0x2a>
 80055ea:	2a62      	cmp	r2, #98	; 0x62
 80055ec:	d809      	bhi.n	8005602 <_printf_i+0x32>
 80055ee:	2a00      	cmp	r2, #0
 80055f0:	d100      	bne.n	80055f4 <_printf_i+0x24>
 80055f2:	e0c1      	b.n	8005778 <_printf_i+0x1a8>
 80055f4:	2a58      	cmp	r2, #88	; 0x58
 80055f6:	d100      	bne.n	80055fa <_printf_i+0x2a>
 80055f8:	e08c      	b.n	8005714 <_printf_i+0x144>
 80055fa:	0026      	movs	r6, r4
 80055fc:	3642      	adds	r6, #66	; 0x42
 80055fe:	7032      	strb	r2, [r6, #0]
 8005600:	e022      	b.n	8005648 <_printf_i+0x78>
 8005602:	0010      	movs	r0, r2
 8005604:	3863      	subs	r0, #99	; 0x63
 8005606:	2815      	cmp	r0, #21
 8005608:	d8f7      	bhi.n	80055fa <_printf_i+0x2a>
 800560a:	f7fa fd7d 	bl	8000108 <__gnu_thumb1_case_shi>
 800560e:	0016      	.short	0x0016
 8005610:	fff6001f 	.word	0xfff6001f
 8005614:	fff6fff6 	.word	0xfff6fff6
 8005618:	001ffff6 	.word	0x001ffff6
 800561c:	fff6fff6 	.word	0xfff6fff6
 8005620:	fff6fff6 	.word	0xfff6fff6
 8005624:	003600a8 	.word	0x003600a8
 8005628:	fff6009a 	.word	0xfff6009a
 800562c:	00b9fff6 	.word	0x00b9fff6
 8005630:	0036fff6 	.word	0x0036fff6
 8005634:	fff6fff6 	.word	0xfff6fff6
 8005638:	009e      	.short	0x009e
 800563a:	0026      	movs	r6, r4
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	3642      	adds	r6, #66	; 0x42
 8005640:	1d11      	adds	r1, r2, #4
 8005642:	6019      	str	r1, [r3, #0]
 8005644:	6813      	ldr	r3, [r2, #0]
 8005646:	7033      	strb	r3, [r6, #0]
 8005648:	2301      	movs	r3, #1
 800564a:	e0a7      	b.n	800579c <_printf_i+0x1cc>
 800564c:	6808      	ldr	r0, [r1, #0]
 800564e:	6819      	ldr	r1, [r3, #0]
 8005650:	1d0a      	adds	r2, r1, #4
 8005652:	0605      	lsls	r5, r0, #24
 8005654:	d50b      	bpl.n	800566e <_printf_i+0x9e>
 8005656:	680d      	ldr	r5, [r1, #0]
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	2d00      	cmp	r5, #0
 800565c:	da03      	bge.n	8005666 <_printf_i+0x96>
 800565e:	232d      	movs	r3, #45	; 0x2d
 8005660:	9a04      	ldr	r2, [sp, #16]
 8005662:	426d      	negs	r5, r5
 8005664:	7013      	strb	r3, [r2, #0]
 8005666:	4b61      	ldr	r3, [pc, #388]	; (80057ec <_printf_i+0x21c>)
 8005668:	270a      	movs	r7, #10
 800566a:	9303      	str	r3, [sp, #12]
 800566c:	e01b      	b.n	80056a6 <_printf_i+0xd6>
 800566e:	680d      	ldr	r5, [r1, #0]
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	0641      	lsls	r1, r0, #25
 8005674:	d5f1      	bpl.n	800565a <_printf_i+0x8a>
 8005676:	b22d      	sxth	r5, r5
 8005678:	e7ef      	b.n	800565a <_printf_i+0x8a>
 800567a:	680d      	ldr	r5, [r1, #0]
 800567c:	6819      	ldr	r1, [r3, #0]
 800567e:	1d08      	adds	r0, r1, #4
 8005680:	6018      	str	r0, [r3, #0]
 8005682:	062e      	lsls	r6, r5, #24
 8005684:	d501      	bpl.n	800568a <_printf_i+0xba>
 8005686:	680d      	ldr	r5, [r1, #0]
 8005688:	e003      	b.n	8005692 <_printf_i+0xc2>
 800568a:	066d      	lsls	r5, r5, #25
 800568c:	d5fb      	bpl.n	8005686 <_printf_i+0xb6>
 800568e:	680d      	ldr	r5, [r1, #0]
 8005690:	b2ad      	uxth	r5, r5
 8005692:	4b56      	ldr	r3, [pc, #344]	; (80057ec <_printf_i+0x21c>)
 8005694:	2708      	movs	r7, #8
 8005696:	9303      	str	r3, [sp, #12]
 8005698:	2a6f      	cmp	r2, #111	; 0x6f
 800569a:	d000      	beq.n	800569e <_printf_i+0xce>
 800569c:	3702      	adds	r7, #2
 800569e:	0023      	movs	r3, r4
 80056a0:	2200      	movs	r2, #0
 80056a2:	3343      	adds	r3, #67	; 0x43
 80056a4:	701a      	strb	r2, [r3, #0]
 80056a6:	6863      	ldr	r3, [r4, #4]
 80056a8:	60a3      	str	r3, [r4, #8]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	db03      	blt.n	80056b6 <_printf_i+0xe6>
 80056ae:	2204      	movs	r2, #4
 80056b0:	6821      	ldr	r1, [r4, #0]
 80056b2:	4391      	bics	r1, r2
 80056b4:	6021      	str	r1, [r4, #0]
 80056b6:	2d00      	cmp	r5, #0
 80056b8:	d102      	bne.n	80056c0 <_printf_i+0xf0>
 80056ba:	9e04      	ldr	r6, [sp, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00c      	beq.n	80056da <_printf_i+0x10a>
 80056c0:	9e04      	ldr	r6, [sp, #16]
 80056c2:	0028      	movs	r0, r5
 80056c4:	0039      	movs	r1, r7
 80056c6:	f7fa fdaf 	bl	8000228 <__aeabi_uidivmod>
 80056ca:	9b03      	ldr	r3, [sp, #12]
 80056cc:	3e01      	subs	r6, #1
 80056ce:	5c5b      	ldrb	r3, [r3, r1]
 80056d0:	7033      	strb	r3, [r6, #0]
 80056d2:	002b      	movs	r3, r5
 80056d4:	0005      	movs	r5, r0
 80056d6:	429f      	cmp	r7, r3
 80056d8:	d9f3      	bls.n	80056c2 <_printf_i+0xf2>
 80056da:	2f08      	cmp	r7, #8
 80056dc:	d109      	bne.n	80056f2 <_printf_i+0x122>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	07db      	lsls	r3, r3, #31
 80056e2:	d506      	bpl.n	80056f2 <_printf_i+0x122>
 80056e4:	6863      	ldr	r3, [r4, #4]
 80056e6:	6922      	ldr	r2, [r4, #16]
 80056e8:	4293      	cmp	r3, r2
 80056ea:	dc02      	bgt.n	80056f2 <_printf_i+0x122>
 80056ec:	2330      	movs	r3, #48	; 0x30
 80056ee:	3e01      	subs	r6, #1
 80056f0:	7033      	strb	r3, [r6, #0]
 80056f2:	9b04      	ldr	r3, [sp, #16]
 80056f4:	1b9b      	subs	r3, r3, r6
 80056f6:	6123      	str	r3, [r4, #16]
 80056f8:	9b07      	ldr	r3, [sp, #28]
 80056fa:	0021      	movs	r1, r4
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	9805      	ldr	r0, [sp, #20]
 8005700:	9b06      	ldr	r3, [sp, #24]
 8005702:	aa09      	add	r2, sp, #36	; 0x24
 8005704:	f7ff fef4 	bl	80054f0 <_printf_common>
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	d14c      	bne.n	80057a6 <_printf_i+0x1d6>
 800570c:	2001      	movs	r0, #1
 800570e:	4240      	negs	r0, r0
 8005710:	b00b      	add	sp, #44	; 0x2c
 8005712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005714:	3145      	adds	r1, #69	; 0x45
 8005716:	700a      	strb	r2, [r1, #0]
 8005718:	4a34      	ldr	r2, [pc, #208]	; (80057ec <_printf_i+0x21c>)
 800571a:	9203      	str	r2, [sp, #12]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	6821      	ldr	r1, [r4, #0]
 8005720:	ca20      	ldmia	r2!, {r5}
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	0608      	lsls	r0, r1, #24
 8005726:	d516      	bpl.n	8005756 <_printf_i+0x186>
 8005728:	07cb      	lsls	r3, r1, #31
 800572a:	d502      	bpl.n	8005732 <_printf_i+0x162>
 800572c:	2320      	movs	r3, #32
 800572e:	4319      	orrs	r1, r3
 8005730:	6021      	str	r1, [r4, #0]
 8005732:	2710      	movs	r7, #16
 8005734:	2d00      	cmp	r5, #0
 8005736:	d1b2      	bne.n	800569e <_printf_i+0xce>
 8005738:	2320      	movs	r3, #32
 800573a:	6822      	ldr	r2, [r4, #0]
 800573c:	439a      	bics	r2, r3
 800573e:	6022      	str	r2, [r4, #0]
 8005740:	e7ad      	b.n	800569e <_printf_i+0xce>
 8005742:	2220      	movs	r2, #32
 8005744:	6809      	ldr	r1, [r1, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	6022      	str	r2, [r4, #0]
 800574a:	0022      	movs	r2, r4
 800574c:	2178      	movs	r1, #120	; 0x78
 800574e:	3245      	adds	r2, #69	; 0x45
 8005750:	7011      	strb	r1, [r2, #0]
 8005752:	4a27      	ldr	r2, [pc, #156]	; (80057f0 <_printf_i+0x220>)
 8005754:	e7e1      	b.n	800571a <_printf_i+0x14a>
 8005756:	0648      	lsls	r0, r1, #25
 8005758:	d5e6      	bpl.n	8005728 <_printf_i+0x158>
 800575a:	b2ad      	uxth	r5, r5
 800575c:	e7e4      	b.n	8005728 <_printf_i+0x158>
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	680d      	ldr	r5, [r1, #0]
 8005762:	1d10      	adds	r0, r2, #4
 8005764:	6949      	ldr	r1, [r1, #20]
 8005766:	6018      	str	r0, [r3, #0]
 8005768:	6813      	ldr	r3, [r2, #0]
 800576a:	062e      	lsls	r6, r5, #24
 800576c:	d501      	bpl.n	8005772 <_printf_i+0x1a2>
 800576e:	6019      	str	r1, [r3, #0]
 8005770:	e002      	b.n	8005778 <_printf_i+0x1a8>
 8005772:	066d      	lsls	r5, r5, #25
 8005774:	d5fb      	bpl.n	800576e <_printf_i+0x19e>
 8005776:	8019      	strh	r1, [r3, #0]
 8005778:	2300      	movs	r3, #0
 800577a:	9e04      	ldr	r6, [sp, #16]
 800577c:	6123      	str	r3, [r4, #16]
 800577e:	e7bb      	b.n	80056f8 <_printf_i+0x128>
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	1d11      	adds	r1, r2, #4
 8005784:	6019      	str	r1, [r3, #0]
 8005786:	6816      	ldr	r6, [r2, #0]
 8005788:	2100      	movs	r1, #0
 800578a:	0030      	movs	r0, r6
 800578c:	6862      	ldr	r2, [r4, #4]
 800578e:	f000 f831 	bl	80057f4 <memchr>
 8005792:	2800      	cmp	r0, #0
 8005794:	d001      	beq.n	800579a <_printf_i+0x1ca>
 8005796:	1b80      	subs	r0, r0, r6
 8005798:	6060      	str	r0, [r4, #4]
 800579a:	6863      	ldr	r3, [r4, #4]
 800579c:	6123      	str	r3, [r4, #16]
 800579e:	2300      	movs	r3, #0
 80057a0:	9a04      	ldr	r2, [sp, #16]
 80057a2:	7013      	strb	r3, [r2, #0]
 80057a4:	e7a8      	b.n	80056f8 <_printf_i+0x128>
 80057a6:	6923      	ldr	r3, [r4, #16]
 80057a8:	0032      	movs	r2, r6
 80057aa:	9906      	ldr	r1, [sp, #24]
 80057ac:	9805      	ldr	r0, [sp, #20]
 80057ae:	9d07      	ldr	r5, [sp, #28]
 80057b0:	47a8      	blx	r5
 80057b2:	1c43      	adds	r3, r0, #1
 80057b4:	d0aa      	beq.n	800570c <_printf_i+0x13c>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	079b      	lsls	r3, r3, #30
 80057ba:	d415      	bmi.n	80057e8 <_printf_i+0x218>
 80057bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057be:	68e0      	ldr	r0, [r4, #12]
 80057c0:	4298      	cmp	r0, r3
 80057c2:	daa5      	bge.n	8005710 <_printf_i+0x140>
 80057c4:	0018      	movs	r0, r3
 80057c6:	e7a3      	b.n	8005710 <_printf_i+0x140>
 80057c8:	0022      	movs	r2, r4
 80057ca:	2301      	movs	r3, #1
 80057cc:	9906      	ldr	r1, [sp, #24]
 80057ce:	9805      	ldr	r0, [sp, #20]
 80057d0:	9e07      	ldr	r6, [sp, #28]
 80057d2:	3219      	adds	r2, #25
 80057d4:	47b0      	blx	r6
 80057d6:	1c43      	adds	r3, r0, #1
 80057d8:	d098      	beq.n	800570c <_printf_i+0x13c>
 80057da:	3501      	adds	r5, #1
 80057dc:	68e3      	ldr	r3, [r4, #12]
 80057de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057e0:	1a9b      	subs	r3, r3, r2
 80057e2:	42ab      	cmp	r3, r5
 80057e4:	dcf0      	bgt.n	80057c8 <_printf_i+0x1f8>
 80057e6:	e7e9      	b.n	80057bc <_printf_i+0x1ec>
 80057e8:	2500      	movs	r5, #0
 80057ea:	e7f7      	b.n	80057dc <_printf_i+0x20c>
 80057ec:	0800759e 	.word	0x0800759e
 80057f0:	080075af 	.word	0x080075af

080057f4 <memchr>:
 80057f4:	b2c9      	uxtb	r1, r1
 80057f6:	1882      	adds	r2, r0, r2
 80057f8:	4290      	cmp	r0, r2
 80057fa:	d101      	bne.n	8005800 <memchr+0xc>
 80057fc:	2000      	movs	r0, #0
 80057fe:	4770      	bx	lr
 8005800:	7803      	ldrb	r3, [r0, #0]
 8005802:	428b      	cmp	r3, r1
 8005804:	d0fb      	beq.n	80057fe <memchr+0xa>
 8005806:	3001      	adds	r0, #1
 8005808:	e7f6      	b.n	80057f8 <memchr+0x4>

0800580a <memcpy>:
 800580a:	2300      	movs	r3, #0
 800580c:	b510      	push	{r4, lr}
 800580e:	429a      	cmp	r2, r3
 8005810:	d100      	bne.n	8005814 <memcpy+0xa>
 8005812:	bd10      	pop	{r4, pc}
 8005814:	5ccc      	ldrb	r4, [r1, r3]
 8005816:	54c4      	strb	r4, [r0, r3]
 8005818:	3301      	adds	r3, #1
 800581a:	e7f8      	b.n	800580e <memcpy+0x4>

0800581c <memmove>:
 800581c:	b510      	push	{r4, lr}
 800581e:	4288      	cmp	r0, r1
 8005820:	d902      	bls.n	8005828 <memmove+0xc>
 8005822:	188b      	adds	r3, r1, r2
 8005824:	4298      	cmp	r0, r3
 8005826:	d303      	bcc.n	8005830 <memmove+0x14>
 8005828:	2300      	movs	r3, #0
 800582a:	e007      	b.n	800583c <memmove+0x20>
 800582c:	5c8b      	ldrb	r3, [r1, r2]
 800582e:	5483      	strb	r3, [r0, r2]
 8005830:	3a01      	subs	r2, #1
 8005832:	d2fb      	bcs.n	800582c <memmove+0x10>
 8005834:	bd10      	pop	{r4, pc}
 8005836:	5ccc      	ldrb	r4, [r1, r3]
 8005838:	54c4      	strb	r4, [r0, r3]
 800583a:	3301      	adds	r3, #1
 800583c:	429a      	cmp	r2, r3
 800583e:	d1fa      	bne.n	8005836 <memmove+0x1a>
 8005840:	e7f8      	b.n	8005834 <memmove+0x18>
	...

08005844 <_free_r>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	0005      	movs	r5, r0
 8005848:	2900      	cmp	r1, #0
 800584a:	d010      	beq.n	800586e <_free_r+0x2a>
 800584c:	1f0c      	subs	r4, r1, #4
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	da00      	bge.n	8005856 <_free_r+0x12>
 8005854:	18e4      	adds	r4, r4, r3
 8005856:	0028      	movs	r0, r5
 8005858:	f000 f918 	bl	8005a8c <__malloc_lock>
 800585c:	4a1d      	ldr	r2, [pc, #116]	; (80058d4 <_free_r+0x90>)
 800585e:	6813      	ldr	r3, [r2, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d105      	bne.n	8005870 <_free_r+0x2c>
 8005864:	6063      	str	r3, [r4, #4]
 8005866:	6014      	str	r4, [r2, #0]
 8005868:	0028      	movs	r0, r5
 800586a:	f000 f917 	bl	8005a9c <__malloc_unlock>
 800586e:	bd70      	pop	{r4, r5, r6, pc}
 8005870:	42a3      	cmp	r3, r4
 8005872:	d908      	bls.n	8005886 <_free_r+0x42>
 8005874:	6821      	ldr	r1, [r4, #0]
 8005876:	1860      	adds	r0, r4, r1
 8005878:	4283      	cmp	r3, r0
 800587a:	d1f3      	bne.n	8005864 <_free_r+0x20>
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	1841      	adds	r1, r0, r1
 8005882:	6021      	str	r1, [r4, #0]
 8005884:	e7ee      	b.n	8005864 <_free_r+0x20>
 8005886:	001a      	movs	r2, r3
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <_free_r+0x4e>
 800588e:	42a3      	cmp	r3, r4
 8005890:	d9f9      	bls.n	8005886 <_free_r+0x42>
 8005892:	6811      	ldr	r1, [r2, #0]
 8005894:	1850      	adds	r0, r2, r1
 8005896:	42a0      	cmp	r0, r4
 8005898:	d10b      	bne.n	80058b2 <_free_r+0x6e>
 800589a:	6820      	ldr	r0, [r4, #0]
 800589c:	1809      	adds	r1, r1, r0
 800589e:	1850      	adds	r0, r2, r1
 80058a0:	6011      	str	r1, [r2, #0]
 80058a2:	4283      	cmp	r3, r0
 80058a4:	d1e0      	bne.n	8005868 <_free_r+0x24>
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	1841      	adds	r1, r0, r1
 80058ac:	6011      	str	r1, [r2, #0]
 80058ae:	6053      	str	r3, [r2, #4]
 80058b0:	e7da      	b.n	8005868 <_free_r+0x24>
 80058b2:	42a0      	cmp	r0, r4
 80058b4:	d902      	bls.n	80058bc <_free_r+0x78>
 80058b6:	230c      	movs	r3, #12
 80058b8:	602b      	str	r3, [r5, #0]
 80058ba:	e7d5      	b.n	8005868 <_free_r+0x24>
 80058bc:	6821      	ldr	r1, [r4, #0]
 80058be:	1860      	adds	r0, r4, r1
 80058c0:	4283      	cmp	r3, r0
 80058c2:	d103      	bne.n	80058cc <_free_r+0x88>
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	1841      	adds	r1, r0, r1
 80058ca:	6021      	str	r1, [r4, #0]
 80058cc:	6063      	str	r3, [r4, #4]
 80058ce:	6054      	str	r4, [r2, #4]
 80058d0:	e7ca      	b.n	8005868 <_free_r+0x24>
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	20000608 	.word	0x20000608

080058d8 <sbrk_aligned>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	4e0f      	ldr	r6, [pc, #60]	; (8005918 <sbrk_aligned+0x40>)
 80058dc:	000d      	movs	r5, r1
 80058de:	6831      	ldr	r1, [r6, #0]
 80058e0:	0004      	movs	r4, r0
 80058e2:	2900      	cmp	r1, #0
 80058e4:	d102      	bne.n	80058ec <sbrk_aligned+0x14>
 80058e6:	f000 f8bf 	bl	8005a68 <_sbrk_r>
 80058ea:	6030      	str	r0, [r6, #0]
 80058ec:	0029      	movs	r1, r5
 80058ee:	0020      	movs	r0, r4
 80058f0:	f000 f8ba 	bl	8005a68 <_sbrk_r>
 80058f4:	1c43      	adds	r3, r0, #1
 80058f6:	d00a      	beq.n	800590e <sbrk_aligned+0x36>
 80058f8:	2303      	movs	r3, #3
 80058fa:	1cc5      	adds	r5, r0, #3
 80058fc:	439d      	bics	r5, r3
 80058fe:	42a8      	cmp	r0, r5
 8005900:	d007      	beq.n	8005912 <sbrk_aligned+0x3a>
 8005902:	1a29      	subs	r1, r5, r0
 8005904:	0020      	movs	r0, r4
 8005906:	f000 f8af 	bl	8005a68 <_sbrk_r>
 800590a:	1c43      	adds	r3, r0, #1
 800590c:	d101      	bne.n	8005912 <sbrk_aligned+0x3a>
 800590e:	2501      	movs	r5, #1
 8005910:	426d      	negs	r5, r5
 8005912:	0028      	movs	r0, r5
 8005914:	bd70      	pop	{r4, r5, r6, pc}
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	2000060c 	.word	0x2000060c

0800591c <_malloc_r>:
 800591c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800591e:	2203      	movs	r2, #3
 8005920:	1ccb      	adds	r3, r1, #3
 8005922:	4393      	bics	r3, r2
 8005924:	3308      	adds	r3, #8
 8005926:	0006      	movs	r6, r0
 8005928:	001f      	movs	r7, r3
 800592a:	2b0c      	cmp	r3, #12
 800592c:	d232      	bcs.n	8005994 <_malloc_r+0x78>
 800592e:	270c      	movs	r7, #12
 8005930:	42b9      	cmp	r1, r7
 8005932:	d831      	bhi.n	8005998 <_malloc_r+0x7c>
 8005934:	0030      	movs	r0, r6
 8005936:	f000 f8a9 	bl	8005a8c <__malloc_lock>
 800593a:	4d32      	ldr	r5, [pc, #200]	; (8005a04 <_malloc_r+0xe8>)
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	001c      	movs	r4, r3
 8005940:	2c00      	cmp	r4, #0
 8005942:	d12e      	bne.n	80059a2 <_malloc_r+0x86>
 8005944:	0039      	movs	r1, r7
 8005946:	0030      	movs	r0, r6
 8005948:	f7ff ffc6 	bl	80058d8 <sbrk_aligned>
 800594c:	0004      	movs	r4, r0
 800594e:	1c43      	adds	r3, r0, #1
 8005950:	d11e      	bne.n	8005990 <_malloc_r+0x74>
 8005952:	682c      	ldr	r4, [r5, #0]
 8005954:	0025      	movs	r5, r4
 8005956:	2d00      	cmp	r5, #0
 8005958:	d14a      	bne.n	80059f0 <_malloc_r+0xd4>
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	0029      	movs	r1, r5
 800595e:	18e3      	adds	r3, r4, r3
 8005960:	0030      	movs	r0, r6
 8005962:	9301      	str	r3, [sp, #4]
 8005964:	f000 f880 	bl	8005a68 <_sbrk_r>
 8005968:	9b01      	ldr	r3, [sp, #4]
 800596a:	4283      	cmp	r3, r0
 800596c:	d143      	bne.n	80059f6 <_malloc_r+0xda>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	3703      	adds	r7, #3
 8005972:	1aff      	subs	r7, r7, r3
 8005974:	2303      	movs	r3, #3
 8005976:	439f      	bics	r7, r3
 8005978:	3708      	adds	r7, #8
 800597a:	2f0c      	cmp	r7, #12
 800597c:	d200      	bcs.n	8005980 <_malloc_r+0x64>
 800597e:	270c      	movs	r7, #12
 8005980:	0039      	movs	r1, r7
 8005982:	0030      	movs	r0, r6
 8005984:	f7ff ffa8 	bl	80058d8 <sbrk_aligned>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d034      	beq.n	80059f6 <_malloc_r+0xda>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	19df      	adds	r7, r3, r7
 8005990:	6027      	str	r7, [r4, #0]
 8005992:	e013      	b.n	80059bc <_malloc_r+0xa0>
 8005994:	2b00      	cmp	r3, #0
 8005996:	dacb      	bge.n	8005930 <_malloc_r+0x14>
 8005998:	230c      	movs	r3, #12
 800599a:	2500      	movs	r5, #0
 800599c:	6033      	str	r3, [r6, #0]
 800599e:	0028      	movs	r0, r5
 80059a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059a2:	6822      	ldr	r2, [r4, #0]
 80059a4:	1bd1      	subs	r1, r2, r7
 80059a6:	d420      	bmi.n	80059ea <_malloc_r+0xce>
 80059a8:	290b      	cmp	r1, #11
 80059aa:	d917      	bls.n	80059dc <_malloc_r+0xc0>
 80059ac:	19e2      	adds	r2, r4, r7
 80059ae:	6027      	str	r7, [r4, #0]
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	d111      	bne.n	80059d8 <_malloc_r+0xbc>
 80059b4:	602a      	str	r2, [r5, #0]
 80059b6:	6863      	ldr	r3, [r4, #4]
 80059b8:	6011      	str	r1, [r2, #0]
 80059ba:	6053      	str	r3, [r2, #4]
 80059bc:	0030      	movs	r0, r6
 80059be:	0025      	movs	r5, r4
 80059c0:	f000 f86c 	bl	8005a9c <__malloc_unlock>
 80059c4:	2207      	movs	r2, #7
 80059c6:	350b      	adds	r5, #11
 80059c8:	1d23      	adds	r3, r4, #4
 80059ca:	4395      	bics	r5, r2
 80059cc:	1aea      	subs	r2, r5, r3
 80059ce:	429d      	cmp	r5, r3
 80059d0:	d0e5      	beq.n	800599e <_malloc_r+0x82>
 80059d2:	1b5b      	subs	r3, r3, r5
 80059d4:	50a3      	str	r3, [r4, r2]
 80059d6:	e7e2      	b.n	800599e <_malloc_r+0x82>
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	e7ec      	b.n	80059b6 <_malloc_r+0x9a>
 80059dc:	6862      	ldr	r2, [r4, #4]
 80059de:	42a3      	cmp	r3, r4
 80059e0:	d101      	bne.n	80059e6 <_malloc_r+0xca>
 80059e2:	602a      	str	r2, [r5, #0]
 80059e4:	e7ea      	b.n	80059bc <_malloc_r+0xa0>
 80059e6:	605a      	str	r2, [r3, #4]
 80059e8:	e7e8      	b.n	80059bc <_malloc_r+0xa0>
 80059ea:	0023      	movs	r3, r4
 80059ec:	6864      	ldr	r4, [r4, #4]
 80059ee:	e7a7      	b.n	8005940 <_malloc_r+0x24>
 80059f0:	002c      	movs	r4, r5
 80059f2:	686d      	ldr	r5, [r5, #4]
 80059f4:	e7af      	b.n	8005956 <_malloc_r+0x3a>
 80059f6:	230c      	movs	r3, #12
 80059f8:	0030      	movs	r0, r6
 80059fa:	6033      	str	r3, [r6, #0]
 80059fc:	f000 f84e 	bl	8005a9c <__malloc_unlock>
 8005a00:	e7cd      	b.n	800599e <_malloc_r+0x82>
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	20000608 	.word	0x20000608

08005a08 <_realloc_r>:
 8005a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a0a:	0007      	movs	r7, r0
 8005a0c:	000e      	movs	r6, r1
 8005a0e:	0014      	movs	r4, r2
 8005a10:	2900      	cmp	r1, #0
 8005a12:	d105      	bne.n	8005a20 <_realloc_r+0x18>
 8005a14:	0011      	movs	r1, r2
 8005a16:	f7ff ff81 	bl	800591c <_malloc_r>
 8005a1a:	0005      	movs	r5, r0
 8005a1c:	0028      	movs	r0, r5
 8005a1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a20:	2a00      	cmp	r2, #0
 8005a22:	d103      	bne.n	8005a2c <_realloc_r+0x24>
 8005a24:	f7ff ff0e 	bl	8005844 <_free_r>
 8005a28:	0025      	movs	r5, r4
 8005a2a:	e7f7      	b.n	8005a1c <_realloc_r+0x14>
 8005a2c:	f000 f83e 	bl	8005aac <_malloc_usable_size_r>
 8005a30:	9001      	str	r0, [sp, #4]
 8005a32:	4284      	cmp	r4, r0
 8005a34:	d803      	bhi.n	8005a3e <_realloc_r+0x36>
 8005a36:	0035      	movs	r5, r6
 8005a38:	0843      	lsrs	r3, r0, #1
 8005a3a:	42a3      	cmp	r3, r4
 8005a3c:	d3ee      	bcc.n	8005a1c <_realloc_r+0x14>
 8005a3e:	0021      	movs	r1, r4
 8005a40:	0038      	movs	r0, r7
 8005a42:	f7ff ff6b 	bl	800591c <_malloc_r>
 8005a46:	1e05      	subs	r5, r0, #0
 8005a48:	d0e8      	beq.n	8005a1c <_realloc_r+0x14>
 8005a4a:	9b01      	ldr	r3, [sp, #4]
 8005a4c:	0022      	movs	r2, r4
 8005a4e:	429c      	cmp	r4, r3
 8005a50:	d900      	bls.n	8005a54 <_realloc_r+0x4c>
 8005a52:	001a      	movs	r2, r3
 8005a54:	0031      	movs	r1, r6
 8005a56:	0028      	movs	r0, r5
 8005a58:	f7ff fed7 	bl	800580a <memcpy>
 8005a5c:	0031      	movs	r1, r6
 8005a5e:	0038      	movs	r0, r7
 8005a60:	f7ff fef0 	bl	8005844 <_free_r>
 8005a64:	e7da      	b.n	8005a1c <_realloc_r+0x14>
	...

08005a68 <_sbrk_r>:
 8005a68:	2300      	movs	r3, #0
 8005a6a:	b570      	push	{r4, r5, r6, lr}
 8005a6c:	4d06      	ldr	r5, [pc, #24]	; (8005a88 <_sbrk_r+0x20>)
 8005a6e:	0004      	movs	r4, r0
 8005a70:	0008      	movs	r0, r1
 8005a72:	602b      	str	r3, [r5, #0]
 8005a74:	f7fc fa60 	bl	8001f38 <_sbrk>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d103      	bne.n	8005a84 <_sbrk_r+0x1c>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d000      	beq.n	8005a84 <_sbrk_r+0x1c>
 8005a82:	6023      	str	r3, [r4, #0]
 8005a84:	bd70      	pop	{r4, r5, r6, pc}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	20000610 	.word	0x20000610

08005a8c <__malloc_lock>:
 8005a8c:	b510      	push	{r4, lr}
 8005a8e:	4802      	ldr	r0, [pc, #8]	; (8005a98 <__malloc_lock+0xc>)
 8005a90:	f000 f814 	bl	8005abc <__retarget_lock_acquire_recursive>
 8005a94:	bd10      	pop	{r4, pc}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	20000614 	.word	0x20000614

08005a9c <__malloc_unlock>:
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	4802      	ldr	r0, [pc, #8]	; (8005aa8 <__malloc_unlock+0xc>)
 8005aa0:	f000 f80d 	bl	8005abe <__retarget_lock_release_recursive>
 8005aa4:	bd10      	pop	{r4, pc}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	20000614 	.word	0x20000614

08005aac <_malloc_usable_size_r>:
 8005aac:	1f0b      	subs	r3, r1, #4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	1f18      	subs	r0, r3, #4
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	da01      	bge.n	8005aba <_malloc_usable_size_r+0xe>
 8005ab6:	580b      	ldr	r3, [r1, r0]
 8005ab8:	18c0      	adds	r0, r0, r3
 8005aba:	4770      	bx	lr

08005abc <__retarget_lock_acquire_recursive>:
 8005abc:	4770      	bx	lr

08005abe <__retarget_lock_release_recursive>:
 8005abe:	4770      	bx	lr

08005ac0 <_init>:
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac6:	bc08      	pop	{r3}
 8005ac8:	469e      	mov	lr, r3
 8005aca:	4770      	bx	lr

08005acc <_fini>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad2:	bc08      	pop	{r3}
 8005ad4:	469e      	mov	lr, r3
 8005ad6:	4770      	bx	lr
